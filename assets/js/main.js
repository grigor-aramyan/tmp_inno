
(function() {
'use strict';

function F2(fun)
{
  function wrapper(a) { return function(b) { return fun(a,b); }; }
  wrapper.arity = 2;
  wrapper.func = fun;
  return wrapper;
}

function F3(fun)
{
  function wrapper(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  }
  wrapper.arity = 3;
  wrapper.func = fun;
  return wrapper;
}

function F4(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  }
  wrapper.arity = 4;
  wrapper.func = fun;
  return wrapper;
}

function F5(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  }
  wrapper.arity = 5;
  wrapper.func = fun;
  return wrapper;
}

function F6(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  }
  wrapper.arity = 6;
  wrapper.func = fun;
  return wrapper;
}

function F7(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  }
  wrapper.arity = 7;
  wrapper.func = fun;
  return wrapper;
}

function F8(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  }
  wrapper.arity = 8;
  wrapper.func = fun;
  return wrapper;
}

function F9(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  }
  wrapper.arity = 9;
  wrapper.func = fun;
  return wrapper;
}

function A2(fun, a, b)
{
  return fun.arity === 2
    ? fun.func(a, b)
    : fun(a)(b);
}
function A3(fun, a, b, c)
{
  return fun.arity === 3
    ? fun.func(a, b, c)
    : fun(a)(b)(c);
}
function A4(fun, a, b, c, d)
{
  return fun.arity === 4
    ? fun.func(a, b, c, d)
    : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e)
{
  return fun.arity === 5
    ? fun.func(a, b, c, d, e)
    : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f)
{
  return fun.arity === 6
    ? fun.func(a, b, c, d, e, f)
    : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g)
{
  return fun.arity === 7
    ? fun.func(a, b, c, d, e, f, g)
    : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h)
{
  return fun.arity === 8
    ? fun.func(a, b, c, d, e, f, g, h)
    : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i)
{
  return fun.arity === 9
    ? fun.func(a, b, c, d, e, f, g, h, i)
    : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

//import Native.List //

var _elm_lang$core$Native_Array = function() {

// A RRB-Tree has two distinct data types.
// Leaf -> "height"  is always 0
//         "table"   is an array of elements
// Node -> "height"  is always greater than 0
//         "table"   is an array of child nodes
//         "lengths" is an array of accumulated lengths of the child nodes

// M is the maximal table size. 32 seems fast. E is the allowed increase
// of search steps when concatting to find an index. Lower values will
// decrease balancing, but will increase search steps.
var M = 32;
var E = 2;

// An empty array.
var empty = {
	ctor: '_Array',
	height: 0,
	table: []
};


function get(i, array)
{
	if (i < 0 || i >= length(array))
	{
		throw new Error(
			'Index ' + i + ' is out of range. Check the length of ' +
			'your array first or use getMaybe or getWithDefault.');
	}
	return unsafeGet(i, array);
}


function unsafeGet(i, array)
{
	for (var x = array.height; x > 0; x--)
	{
		var slot = i >> (x * 5);
		while (array.lengths[slot] <= i)
		{
			slot++;
		}
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array = array.table[slot];
	}
	return array.table[i];
}


// Sets the value at the index i. Only the nodes leading to i will get
// copied and updated.
function set(i, item, array)
{
	if (i < 0 || length(array) <= i)
	{
		return array;
	}
	return unsafeSet(i, item, array);
}


function unsafeSet(i, item, array)
{
	array = nodeCopy(array);

	if (array.height === 0)
	{
		array.table[i] = item;
	}
	else
	{
		var slot = getSlot(i, array);
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array.table[slot] = unsafeSet(i, item, array.table[slot]);
	}
	return array;
}


function initialize(len, f)
{
	if (len <= 0)
	{
		return empty;
	}
	var h = Math.floor( Math.log(len) / Math.log(M) );
	return initialize_(f, h, 0, len);
}

function initialize_(f, h, from, to)
{
	if (h === 0)
	{
		var table = new Array((to - from) % (M + 1));
		for (var i = 0; i < table.length; i++)
		{
		  table[i] = f(from + i);
		}
		return {
			ctor: '_Array',
			height: 0,
			table: table
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = initialize_(f, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i-1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

function fromList(list)
{
	if (list.ctor === '[]')
	{
		return empty;
	}

	// Allocate M sized blocks (table) and write list elements to it.
	var table = new Array(M);
	var nodes = [];
	var i = 0;

	while (list.ctor !== '[]')
	{
		table[i] = list._0;
		list = list._1;
		i++;

		// table is full, so we can push a leaf containing it into the
		// next node.
		if (i === M)
		{
			var leaf = {
				ctor: '_Array',
				height: 0,
				table: table
			};
			fromListPush(leaf, nodes);
			table = new Array(M);
			i = 0;
		}
	}

	// Maybe there is something left on the table.
	if (i > 0)
	{
		var leaf = {
			ctor: '_Array',
			height: 0,
			table: table.splice(0, i)
		};
		fromListPush(leaf, nodes);
	}

	// Go through all of the nodes and eventually push them into higher nodes.
	for (var h = 0; h < nodes.length - 1; h++)
	{
		if (nodes[h].table.length > 0)
		{
			fromListPush(nodes[h], nodes);
		}
	}

	var head = nodes[nodes.length - 1];
	if (head.height > 0 && head.table.length === 1)
	{
		return head.table[0];
	}
	else
	{
		return head;
	}
}

// Push a node into a higher node as a child.
function fromListPush(toPush, nodes)
{
	var h = toPush.height;

	// Maybe the node on this height does not exist.
	if (nodes.length === h)
	{
		var node = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
		nodes.push(node);
	}

	nodes[h].table.push(toPush);
	var len = length(toPush);
	if (nodes[h].lengths.length > 0)
	{
		len += nodes[h].lengths[nodes[h].lengths.length - 1];
	}
	nodes[h].lengths.push(len);

	if (nodes[h].table.length === M)
	{
		fromListPush(nodes[h], nodes);
		nodes[h] = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
	}
}

// Pushes an item via push_ to the bottom right of a tree.
function push(item, a)
{
	var pushed = push_(item, a);
	if (pushed !== null)
	{
		return pushed;
	}

	var newTree = create(item, a.height);
	return siblise(a, newTree);
}

// Recursively tries to push an item to the bottom-right most
// tree possible. If there is no space left for the item,
// null will be returned.
function push_(item, a)
{
	// Handle resursion stop at leaf level.
	if (a.height === 0)
	{
		if (a.table.length < M)
		{
			var newA = {
				ctor: '_Array',
				height: 0,
				table: a.table.slice()
			};
			newA.table.push(item);
			return newA;
		}
		else
		{
		  return null;
		}
	}

	// Recursively push
	var pushed = push_(item, botRight(a));

	// There was space in the bottom right tree, so the slot will
	// be updated.
	if (pushed !== null)
	{
		var newA = nodeCopy(a);
		newA.table[newA.table.length - 1] = pushed;
		newA.lengths[newA.lengths.length - 1]++;
		return newA;
	}

	// When there was no space left, check if there is space left
	// for a new slot with a tree which contains only the item
	// at the bottom.
	if (a.table.length < M)
	{
		var newSlot = create(item, a.height - 1);
		var newA = nodeCopy(a);
		newA.table.push(newSlot);
		newA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));
		return newA;
	}
	else
	{
		return null;
	}
}

// Converts an array into a list of elements.
function toList(a)
{
	return toList_(_elm_lang$core$Native_List.Nil, a);
}

function toList_(list, a)
{
	for (var i = a.table.length - 1; i >= 0; i--)
	{
		list =
			a.height === 0
				? _elm_lang$core$Native_List.Cons(a.table[i], list)
				: toList_(list, a.table[i]);
	}
	return list;
}

// Maps a function over the elements of an array.
function map(f, a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? f(a.table[i])
				: map(f, a.table[i]);
	}
	return newA;
}

// Maps a function over the elements with their index as first argument.
function indexedMap(f, a)
{
	return indexedMap_(f, a, 0);
}

function indexedMap_(f, a, from)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? A2(f, from + i, a.table[i])
				: indexedMap_(f, a.table[i], i == 0 ? from : from + a.lengths[i - 1]);
	}
	return newA;
}

function foldl(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = foldl(f, b, a.table[i]);
		}
	}
	return b;
}

function foldr(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = a.table.length; i--; )
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = a.table.length; i--; )
		{
			b = foldr(f, b, a.table[i]);
		}
	}
	return b;
}

// TODO: currently, it slices the right, then the left. This can be
// optimized.
function slice(from, to, a)
{
	if (from < 0)
	{
		from += length(a);
	}
	if (to < 0)
	{
		to += length(a);
	}
	return sliceLeft(from, sliceRight(to, a));
}

function sliceRight(to, a)
{
	if (to === length(a))
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(0, to);
		return newA;
	}

	// Slice the right recursively.
	var right = getSlot(to, a);
	var sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (right === 0)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(0, right),
		lengths: a.lengths.slice(0, right)
	};
	if (sliced.table.length > 0)
	{
		newA.table[right] = sliced;
		newA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);
	}
	return newA;
}

function sliceLeft(from, a)
{
	if (from === 0)
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(from, a.table.length + 1);
		return newA;
	}

	// Slice the left recursively.
	var left = getSlot(from, a);
	var sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (left === a.table.length - 1)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(left, a.table.length + 1),
		lengths: new Array(a.table.length - left)
	};
	newA.table[0] = sliced;
	var len = 0;
	for (var i = 0; i < newA.table.length; i++)
	{
		len += length(newA.table[i]);
		newA.lengths[i] = len;
	}

	return newA;
}

// Appends two trees.
function append(a,b)
{
	if (a.table.length === 0)
	{
		return b;
	}
	if (b.table.length === 0)
	{
		return a;
	}

	var c = append_(a, b);

	// Check if both nodes can be crunshed together.
	if (c[0].table.length + c[1].table.length <= M)
	{
		if (c[0].table.length === 0)
		{
			return c[1];
		}
		if (c[1].table.length === 0)
		{
			return c[0];
		}

		// Adjust .table and .lengths
		c[0].table = c[0].table.concat(c[1].table);
		if (c[0].height > 0)
		{
			var len = length(c[0]);
			for (var i = 0; i < c[1].lengths.length; i++)
			{
				c[1].lengths[i] += len;
			}
			c[0].lengths = c[0].lengths.concat(c[1].lengths);
		}

		return c[0];
	}

	if (c[0].height > 0)
	{
		var toRemove = calcToRemove(a, b);
		if (toRemove > E)
		{
			c = shuffle(c[0], c[1], toRemove);
		}
	}

	return siblise(c[0], c[1]);
}

// Returns an array of two nodes; right and left. One node _may_ be empty.
function append_(a, b)
{
	if (a.height === 0 && b.height === 0)
	{
		return [a, b];
	}

	if (a.height !== 1 || b.height !== 1)
	{
		if (a.height === b.height)
		{
			a = nodeCopy(a);
			b = nodeCopy(b);
			var appended = append_(botRight(a), botLeft(b));

			insertRight(a, appended[1]);
			insertLeft(b, appended[0]);
		}
		else if (a.height > b.height)
		{
			a = nodeCopy(a);
			var appended = append_(botRight(a), b);

			insertRight(a, appended[0]);
			b = parentise(appended[1], appended[1].height + 1);
		}
		else
		{
			b = nodeCopy(b);
			var appended = append_(a, botLeft(b));

			var left = appended[0].table.length === 0 ? 0 : 1;
			var right = left === 0 ? 1 : 0;
			insertLeft(b, appended[left]);
			a = parentise(appended[right], appended[right].height + 1);
		}
	}

	// Check if balancing is needed and return based on that.
	if (a.table.length === 0 || b.table.length === 0)
	{
		return [a, b];
	}

	var toRemove = calcToRemove(a, b);
	if (toRemove <= E)
	{
		return [a, b];
	}
	return shuffle(a, b, toRemove);
}

// Helperfunctions for append_. Replaces a child node at the side of the parent.
function insertRight(parent, node)
{
	var index = parent.table.length - 1;
	parent.table[index] = node;
	parent.lengths[index] = length(node);
	parent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;
}

function insertLeft(parent, node)
{
	if (node.table.length > 0)
	{
		parent.table[0] = node;
		parent.lengths[0] = length(node);

		var len = length(parent.table[0]);
		for (var i = 1; i < parent.lengths.length; i++)
		{
			len += length(parent.table[i]);
			parent.lengths[i] = len;
		}
	}
	else
	{
		parent.table.shift();
		for (var i = 1; i < parent.lengths.length; i++)
		{
			parent.lengths[i] = parent.lengths[i] - parent.lengths[0];
		}
		parent.lengths.shift();
	}
}

// Returns the extra search steps for E. Refer to the paper.
function calcToRemove(a, b)
{
	var subLengths = 0;
	for (var i = 0; i < a.table.length; i++)
	{
		subLengths += a.table[i].table.length;
	}
	for (var i = 0; i < b.table.length; i++)
	{
		subLengths += b.table[i].table.length;
	}

	var toRemove = a.table.length + b.table.length;
	return toRemove - (Math.floor((subLengths - 1) / M) + 1);
}

// get2, set2 and saveSlot are helpers for accessing elements over two arrays.
function get2(a, b, index)
{
	return index < a.length
		? a[index]
		: b[index - a.length];
}

function set2(a, b, index, value)
{
	if (index < a.length)
	{
		a[index] = value;
	}
	else
	{
		b[index - a.length] = value;
	}
}

function saveSlot(a, b, index, slot)
{
	set2(a.table, b.table, index, slot);

	var l = (index === 0 || index === a.lengths.length)
		? 0
		: get2(a.lengths, a.lengths, index - 1);

	set2(a.lengths, b.lengths, index, l + length(slot));
}

// Creates a node or leaf with a given length at their arrays for perfomance.
// Is only used by shuffle.
function createNode(h, length)
{
	if (length < 0)
	{
		length = 0;
	}
	var a = {
		ctor: '_Array',
		height: h,
		table: new Array(length)
	};
	if (h > 0)
	{
		a.lengths = new Array(length);
	}
	return a;
}

// Returns an array of two balanced nodes.
function shuffle(a, b, toRemove)
{
	var newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));
	var newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));

	// Skip the slots with size M. More precise: copy the slot references
	// to the new node
	var read = 0;
	while (get2(a.table, b.table, read).table.length % M === 0)
	{
		set2(newA.table, newB.table, read, get2(a.table, b.table, read));
		set2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));
		read++;
	}

	// Pulling items from left to right, caching in a slot before writing
	// it into the new nodes.
	var write = read;
	var slot = new createNode(a.height - 1, 0);
	var from = 0;

	// If the current slot is still containing data, then there will be at
	// least one more write, so we do not break this loop yet.
	while (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove)
	{
		// Find out the max possible items for copying.
		var source = get2(a.table, b.table, read);
		var to = Math.min(M - slot.table.length, source.table.length);

		// Copy and adjust size table.
		slot.table = slot.table.concat(source.table.slice(from, to));
		if (slot.height > 0)
		{
			var len = slot.lengths.length;
			for (var i = len; i < len + to - from; i++)
			{
				slot.lengths[i] = length(slot.table[i]);
				slot.lengths[i] += (i > 0 ? slot.lengths[i - 1] : 0);
			}
		}

		from += to;

		// Only proceed to next slots[i] if the current one was
		// fully copied.
		if (source.table.length <= to)
		{
			read++; from = 0;
		}

		// Only create a new slot if the current one is filled up.
		if (slot.table.length === M)
		{
			saveSlot(newA, newB, write, slot);
			slot = createNode(a.height - 1, 0);
			write++;
		}
	}

	// Cleanup after the loop. Copy the last slot into the new nodes.
	if (slot.table.length > 0)
	{
		saveSlot(newA, newB, write, slot);
		write++;
	}

	// Shift the untouched slots to the left
	while (read < a.table.length + b.table.length )
	{
		saveSlot(newA, newB, write, get2(a.table, b.table, read));
		read++;
		write++;
	}

	return [newA, newB];
}

// Navigation functions
function botRight(a)
{
	return a.table[a.table.length - 1];
}
function botLeft(a)
{
	return a.table[0];
}

// Copies a node for updating. Note that you should not use this if
// only updating only one of "table" or "lengths" for performance reasons.
function nodeCopy(a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice()
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths.slice();
	}
	return newA;
}

// Returns how many items are in the tree.
function length(array)
{
	if (array.height === 0)
	{
		return array.table.length;
	}
	else
	{
		return array.lengths[array.lengths.length - 1];
	}
}

// Calculates in which slot of "table" the item probably is, then
// find the exact slot via forward searching in  "lengths". Returns the index.
function getSlot(i, a)
{
	var slot = i >> (5 * a.height);
	while (a.lengths[slot] <= i)
	{
		slot++;
	}
	return slot;
}

// Recursively creates a tree with a given height containing
// only the given item.
function create(item, h)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: [item]
		};
	}
	return {
		ctor: '_Array',
		height: h,
		table: [create(item, h - 1)],
		lengths: [1]
	};
}

// Recursively creates a tree that contains the given tree.
function parentise(tree, h)
{
	if (h === tree.height)
	{
		return tree;
	}

	return {
		ctor: '_Array',
		height: h,
		table: [parentise(tree, h - 1)],
		lengths: [length(tree)]
	};
}

// Emphasizes blood brotherhood beneath two trees.
function siblise(a, b)
{
	return {
		ctor: '_Array',
		height: a.height + 1,
		table: [a, b],
		lengths: [length(a), length(a) + length(b)]
	};
}

function toJSArray(a)
{
	var jsArray = new Array(length(a));
	toJSArray_(jsArray, 0, a);
	return jsArray;
}

function toJSArray_(jsArray, i, a)
{
	for (var t = 0; t < a.table.length; t++)
	{
		if (a.height === 0)
		{
			jsArray[i + t] = a.table[t];
		}
		else
		{
			var inc = t === 0 ? 0 : a.lengths[t - 1];
			toJSArray_(jsArray, i + inc, a.table[t]);
		}
	}
}

function fromJSArray(jsArray)
{
	if (jsArray.length === 0)
	{
		return empty;
	}
	var h = Math.floor(Math.log(jsArray.length) / Math.log(M));
	return fromJSArray_(jsArray, h, 0, jsArray.length);
}

function fromJSArray_(jsArray, h, from, to)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: jsArray.slice(from, to)
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = fromJSArray_(jsArray, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

return {
	empty: empty,
	fromList: fromList,
	toList: toList,
	initialize: F2(initialize),
	append: F2(append),
	push: F2(push),
	slice: F3(slice),
	get: F2(get),
	set: F3(set),
	map: F2(map),
	indexedMap: F2(indexedMap),
	foldl: F3(foldl),
	foldr: F3(foldr),
	length: length,

	toJSArray: toJSArray,
	fromJSArray: fromJSArray
};

}();
//import Native.Utils //

var _elm_lang$core$Native_Basics = function() {

function div(a, b)
{
	return (a / b) | 0;
}
function rem(a, b)
{
	return a % b;
}
function mod(a, b)
{
	if (b === 0)
	{
		throw new Error('Cannot perform mod 0. Division by zero error.');
	}
	var r = a % b;
	var m = a === 0 ? 0 : (b > 0 ? (a >= 0 ? r : r + b) : -mod(-a, -b));

	return m === b ? 0 : m;
}
function logBase(base, n)
{
	return Math.log(n) / Math.log(base);
}
function negate(n)
{
	return -n;
}
function abs(n)
{
	return n < 0 ? -n : n;
}

function min(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) < 0 ? a : b;
}
function max(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) > 0 ? a : b;
}
function clamp(lo, hi, n)
{
	return _elm_lang$core$Native_Utils.cmp(n, lo) < 0
		? lo
		: _elm_lang$core$Native_Utils.cmp(n, hi) > 0
			? hi
			: n;
}

var ord = ['LT', 'EQ', 'GT'];

function compare(x, y)
{
	return { ctor: ord[_elm_lang$core$Native_Utils.cmp(x, y) + 1] };
}

function xor(a, b)
{
	return a !== b;
}
function not(b)
{
	return !b;
}
function isInfinite(n)
{
	return n === Infinity || n === -Infinity;
}

function truncate(n)
{
	return n | 0;
}

function degrees(d)
{
	return d * Math.PI / 180;
}
function turns(t)
{
	return 2 * Math.PI * t;
}
function fromPolar(point)
{
	var r = point._0;
	var t = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));
}
function toPolar(point)
{
	var x = point._0;
	var y = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y, x));
}

return {
	div: F2(div),
	rem: F2(rem),
	mod: F2(mod),

	pi: Math.PI,
	e: Math.E,
	cos: Math.cos,
	sin: Math.sin,
	tan: Math.tan,
	acos: Math.acos,
	asin: Math.asin,
	atan: Math.atan,
	atan2: F2(Math.atan2),

	degrees: degrees,
	turns: turns,
	fromPolar: fromPolar,
	toPolar: toPolar,

	sqrt: Math.sqrt,
	logBase: F2(logBase),
	negate: negate,
	abs: abs,
	min: F2(min),
	max: F2(max),
	clamp: F3(clamp),
	compare: F2(compare),

	xor: F2(xor),
	not: not,

	truncate: truncate,
	ceiling: Math.ceil,
	floor: Math.floor,
	round: Math.round,
	toFloat: function(x) { return x; },
	isNaN: isNaN,
	isInfinite: isInfinite
};

}();
//import //

var _elm_lang$core$Native_Utils = function() {

// COMPARISONS

function eq(x, y)
{
	var stack = [];
	var isEqual = eqHelp(x, y, 0, stack);
	var pair;
	while (isEqual && (pair = stack.pop()))
	{
		isEqual = eqHelp(pair.x, pair.y, 0, stack);
	}
	return isEqual;
}


function eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push({ x: x, y: y });
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object')
	{
		if (typeof x === 'function')
		{
			throw new Error(
				'Trying to use `(==)` on functions. There is no way to know if functions are "the same" in the Elm sense.'
				+ ' Read more about this at http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#=='
				+ ' which describes why it is this way and what the better version will look like.'
			);
		}
		return false;
	}

	if (x === null || y === null)
	{
		return false
	}

	if (x instanceof Date)
	{
		return x.getTime() === y.getTime();
	}

	if (!('ctor' in x))
	{
		for (var key in x)
		{
			if (!eqHelp(x[key], y[key], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	// convert Dicts and Sets to lists
	if (x.ctor === 'RBNode_elm_builtin' || x.ctor === 'RBEmpty_elm_builtin')
	{
		x = _elm_lang$core$Dict$toList(x);
		y = _elm_lang$core$Dict$toList(y);
	}
	if (x.ctor === 'Set_elm_builtin')
	{
		x = _elm_lang$core$Set$toList(x);
		y = _elm_lang$core$Set$toList(y);
	}

	// check if lists are equal without recursion
	if (x.ctor === '::')
	{
		var a = x;
		var b = y;
		while (a.ctor === '::' && b.ctor === '::')
		{
			if (!eqHelp(a._0, b._0, depth + 1, stack))
			{
				return false;
			}
			a = a._1;
			b = b._1;
		}
		return a.ctor === b.ctor;
	}

	// check if Arrays are equal
	if (x.ctor === '_Array')
	{
		var xs = _elm_lang$core$Native_Array.toJSArray(x);
		var ys = _elm_lang$core$Native_Array.toJSArray(y);
		if (xs.length !== ys.length)
		{
			return false;
		}
		for (var i = 0; i < xs.length; i++)
		{
			if (!eqHelp(xs[i], ys[i], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	if (!eqHelp(x.ctor, y.ctor, depth + 1, stack))
	{
		return false;
	}

	for (var key in x)
	{
		if (!eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

var LT = -1, EQ = 0, GT = 1;

function cmp(x, y)
{
	if (typeof x !== 'object')
	{
		return x === y ? EQ : x < y ? LT : GT;
	}

	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? EQ : a < b ? LT : GT;
	}

	if (x.ctor === '::' || x.ctor === '[]')
	{
		while (x.ctor === '::' && y.ctor === '::')
		{
			var ord = cmp(x._0, y._0);
			if (ord !== EQ)
			{
				return ord;
			}
			x = x._1;
			y = y._1;
		}
		return x.ctor === y.ctor ? EQ : x.ctor === '[]' ? LT : GT;
	}

	if (x.ctor.slice(0, 6) === '_Tuple')
	{
		var ord;
		var n = x.ctor.slice(6) - 0;
		var err = 'cannot compare tuples with more than 6 elements.';
		if (n === 0) return EQ;
		if (n >= 1) { ord = cmp(x._0, y._0); if (ord !== EQ) return ord;
		if (n >= 2) { ord = cmp(x._1, y._1); if (ord !== EQ) return ord;
		if (n >= 3) { ord = cmp(x._2, y._2); if (ord !== EQ) return ord;
		if (n >= 4) { ord = cmp(x._3, y._3); if (ord !== EQ) return ord;
		if (n >= 5) { ord = cmp(x._4, y._4); if (ord !== EQ) return ord;
		if (n >= 6) { ord = cmp(x._5, y._5); if (ord !== EQ) return ord;
		if (n >= 7) throw new Error('Comparison error: ' + err); } } } } } }
		return EQ;
	}

	throw new Error(
		'Comparison error: comparison is only defined on ints, '
		+ 'floats, times, chars, strings, lists of comparable values, '
		+ 'and tuples of comparable values.'
	);
}


// COMMON VALUES

var Tuple0 = {
	ctor: '_Tuple0'
};

function Tuple2(x, y)
{
	return {
		ctor: '_Tuple2',
		_0: x,
		_1: y
	};
}

function chr(c)
{
	return new String(c);
}


// GUID

var count = 0;
function guid(_)
{
	return count++;
}


// RECORDS

function update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


//// LIST STUFF ////

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return {
		ctor: '::',
		_0: hd,
		_1: tl
	};
}

function append(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (xs.ctor === '[]')
	{
		return ys;
	}
	var root = Cons(xs._0, Nil);
	var curr = root;
	xs = xs._1;
	while (xs.ctor !== '[]')
	{
		curr._1 = Cons(xs._0, Nil);
		xs = xs._1;
		curr = curr._1;
	}
	curr._1 = ys;
	return root;
}


// CRASHES

function crash(moduleName, region)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '` ' + regionToString(region) + '\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function crashCase(moduleName, region, value)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '`\n\n'
			+ 'This was caused by the `case` expression ' + regionToString(region) + '.\n'
			+ 'One of the branches ended with a crash and the following value got through:\n\n    ' + toString(value) + '\n\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function regionToString(region)
{
	if (region.start.line == region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'between lines ' + region.start.line + ' and ' + region.end.line;
}


// TO STRING

function toString(v)
{
	var type = typeof v;
	if (type === 'function')
	{
		return '<function>';
	}

	if (type === 'boolean')
	{
		return v ? 'True' : 'False';
	}

	if (type === 'number')
	{
		return v + '';
	}

	if (v instanceof String)
	{
		return '\'' + addSlashes(v, true) + '\'';
	}

	if (type === 'string')
	{
		return '"' + addSlashes(v, false) + '"';
	}

	if (v === null)
	{
		return 'null';
	}

	if (type === 'object' && 'ctor' in v)
	{
		var ctorStarter = v.ctor.substring(0, 5);

		if (ctorStarter === '_Tupl')
		{
			var output = [];
			for (var k in v)
			{
				if (k === 'ctor') continue;
				output.push(toString(v[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (ctorStarter === '_Task')
		{
			return '<task>'
		}

		if (v.ctor === '_Array')
		{
			var list = _elm_lang$core$Array$toList(v);
			return 'Array.fromList ' + toString(list);
		}

		if (v.ctor === '<decoder>')
		{
			return '<decoder>';
		}

		if (v.ctor === '_Process')
		{
			return '<process:' + v.id + '>';
		}

		if (v.ctor === '::')
		{
			var output = '[' + toString(v._0);
			v = v._1;
			while (v.ctor === '::')
			{
				output += ',' + toString(v._0);
				v = v._1;
			}
			return output + ']';
		}

		if (v.ctor === '[]')
		{
			return '[]';
		}

		if (v.ctor === 'Set_elm_builtin')
		{
			return 'Set.fromList ' + toString(_elm_lang$core$Set$toList(v));
		}

		if (v.ctor === 'RBNode_elm_builtin' || v.ctor === 'RBEmpty_elm_builtin')
		{
			return 'Dict.fromList ' + toString(_elm_lang$core$Dict$toList(v));
		}

		var output = '';
		for (var i in v)
		{
			if (i === 'ctor') continue;
			var str = toString(v[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return v.ctor + output;
	}

	if (type === 'object')
	{
		if (v instanceof Date)
		{
			return '<' + v.toString() + '>';
		}

		if (v.elm_web_socket)
		{
			return '<websocket>';
		}

		var output = [];
		for (var k in v)
		{
			output.push(k + ' = ' + toString(v[k]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return '<internal structure>';
}

function addSlashes(str, isChar)
{
	var s = str.replace(/\\/g, '\\\\')
			  .replace(/\n/g, '\\n')
			  .replace(/\t/g, '\\t')
			  .replace(/\r/g, '\\r')
			  .replace(/\v/g, '\\v')
			  .replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}


return {
	eq: eq,
	cmp: cmp,
	Tuple0: Tuple0,
	Tuple2: Tuple2,
	chr: chr,
	update: update,
	guid: guid,

	append: F2(append),

	crash: crash,
	crashCase: crashCase,

	toString: toString
};

}();
var _elm_lang$core$Basics$never = function (_p0) {
	never:
	while (true) {
		var _p1 = _p0;
		var _v1 = _p1._0;
		_p0 = _v1;
		continue never;
	}
};
var _elm_lang$core$Basics$uncurry = F2(
	function (f, _p2) {
		var _p3 = _p2;
		return A2(f, _p3._0, _p3._1);
	});
var _elm_lang$core$Basics$curry = F3(
	function (f, a, b) {
		return f(
			{ctor: '_Tuple2', _0: a, _1: b});
	});
var _elm_lang$core$Basics$flip = F3(
	function (f, b, a) {
		return A2(f, a, b);
	});
var _elm_lang$core$Basics$always = F2(
	function (a, _p4) {
		return a;
	});
var _elm_lang$core$Basics$identity = function (x) {
	return x;
};
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<|'] = F2(
	function (f, x) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['|>'] = F2(
	function (x, f) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>>'] = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<<'] = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['++'] = _elm_lang$core$Native_Utils.append;
var _elm_lang$core$Basics$toString = _elm_lang$core$Native_Utils.toString;
var _elm_lang$core$Basics$isInfinite = _elm_lang$core$Native_Basics.isInfinite;
var _elm_lang$core$Basics$isNaN = _elm_lang$core$Native_Basics.isNaN;
var _elm_lang$core$Basics$toFloat = _elm_lang$core$Native_Basics.toFloat;
var _elm_lang$core$Basics$ceiling = _elm_lang$core$Native_Basics.ceiling;
var _elm_lang$core$Basics$floor = _elm_lang$core$Native_Basics.floor;
var _elm_lang$core$Basics$truncate = _elm_lang$core$Native_Basics.truncate;
var _elm_lang$core$Basics$round = _elm_lang$core$Native_Basics.round;
var _elm_lang$core$Basics$not = _elm_lang$core$Native_Basics.not;
var _elm_lang$core$Basics$xor = _elm_lang$core$Native_Basics.xor;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['||'] = _elm_lang$core$Native_Basics.or;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['&&'] = _elm_lang$core$Native_Basics.and;
var _elm_lang$core$Basics$max = _elm_lang$core$Native_Basics.max;
var _elm_lang$core$Basics$min = _elm_lang$core$Native_Basics.min;
var _elm_lang$core$Basics$compare = _elm_lang$core$Native_Basics.compare;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>='] = _elm_lang$core$Native_Basics.ge;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<='] = _elm_lang$core$Native_Basics.le;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>'] = _elm_lang$core$Native_Basics.gt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<'] = _elm_lang$core$Native_Basics.lt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/='] = _elm_lang$core$Native_Basics.neq;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['=='] = _elm_lang$core$Native_Basics.eq;
var _elm_lang$core$Basics$e = _elm_lang$core$Native_Basics.e;
var _elm_lang$core$Basics$pi = _elm_lang$core$Native_Basics.pi;
var _elm_lang$core$Basics$clamp = _elm_lang$core$Native_Basics.clamp;
var _elm_lang$core$Basics$logBase = _elm_lang$core$Native_Basics.logBase;
var _elm_lang$core$Basics$abs = _elm_lang$core$Native_Basics.abs;
var _elm_lang$core$Basics$negate = _elm_lang$core$Native_Basics.negate;
var _elm_lang$core$Basics$sqrt = _elm_lang$core$Native_Basics.sqrt;
var _elm_lang$core$Basics$atan2 = _elm_lang$core$Native_Basics.atan2;
var _elm_lang$core$Basics$atan = _elm_lang$core$Native_Basics.atan;
var _elm_lang$core$Basics$asin = _elm_lang$core$Native_Basics.asin;
var _elm_lang$core$Basics$acos = _elm_lang$core$Native_Basics.acos;
var _elm_lang$core$Basics$tan = _elm_lang$core$Native_Basics.tan;
var _elm_lang$core$Basics$sin = _elm_lang$core$Native_Basics.sin;
var _elm_lang$core$Basics$cos = _elm_lang$core$Native_Basics.cos;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['^'] = _elm_lang$core$Native_Basics.exp;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['%'] = _elm_lang$core$Native_Basics.mod;
var _elm_lang$core$Basics$rem = _elm_lang$core$Native_Basics.rem;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['//'] = _elm_lang$core$Native_Basics.div;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/'] = _elm_lang$core$Native_Basics.floatDiv;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['*'] = _elm_lang$core$Native_Basics.mul;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['-'] = _elm_lang$core$Native_Basics.sub;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['+'] = _elm_lang$core$Native_Basics.add;
var _elm_lang$core$Basics$toPolar = _elm_lang$core$Native_Basics.toPolar;
var _elm_lang$core$Basics$fromPolar = _elm_lang$core$Native_Basics.fromPolar;
var _elm_lang$core$Basics$turns = _elm_lang$core$Native_Basics.turns;
var _elm_lang$core$Basics$degrees = _elm_lang$core$Native_Basics.degrees;
var _elm_lang$core$Basics$radians = function (t) {
	return t;
};
var _elm_lang$core$Basics$GT = {ctor: 'GT'};
var _elm_lang$core$Basics$EQ = {ctor: 'EQ'};
var _elm_lang$core$Basics$LT = {ctor: 'LT'};
var _elm_lang$core$Basics$JustOneMore = function (a) {
	return {ctor: 'JustOneMore', _0: a};
};

var _elm_lang$core$Maybe$withDefault = F2(
	function ($default, maybe) {
		var _p0 = maybe;
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return $default;
		}
	});
var _elm_lang$core$Maybe$Nothing = {ctor: 'Nothing'};
var _elm_lang$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		var _p1 = maybeValue;
		if (_p1.ctor === 'Just') {
			return callback(_p1._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$Just = function (a) {
	return {ctor: 'Just', _0: a};
};
var _elm_lang$core$Maybe$map = F2(
	function (f, maybe) {
		var _p2 = maybe;
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		var _p3 = {ctor: '_Tuple2', _0: ma, _1: mb};
		if (((_p3.ctor === '_Tuple2') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A2(func, _p3._0._0, _p3._1._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		var _p4 = {ctor: '_Tuple3', _0: ma, _1: mb, _2: mc};
		if ((((_p4.ctor === '_Tuple3') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === 'Just')) && (_p4._2.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A3(func, _p4._0._0, _p4._1._0, _p4._2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		var _p5 = {ctor: '_Tuple4', _0: ma, _1: mb, _2: mc, _3: md};
		if (((((_p5.ctor === '_Tuple4') && (_p5._0.ctor === 'Just')) && (_p5._1.ctor === 'Just')) && (_p5._2.ctor === 'Just')) && (_p5._3.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A4(func, _p5._0._0, _p5._1._0, _p5._2._0, _p5._3._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map5 = F6(
	function (func, ma, mb, mc, md, me) {
		var _p6 = {ctor: '_Tuple5', _0: ma, _1: mb, _2: mc, _3: md, _4: me};
		if ((((((_p6.ctor === '_Tuple5') && (_p6._0.ctor === 'Just')) && (_p6._1.ctor === 'Just')) && (_p6._2.ctor === 'Just')) && (_p6._3.ctor === 'Just')) && (_p6._4.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A5(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0, _p6._4._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});

//import Native.Utils //

var _elm_lang$core$Native_List = function() {

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return { ctor: '::', _0: hd, _1: tl };
}

function fromArray(arr)
{
	var out = Nil;
	for (var i = arr.length; i--; )
	{
		out = Cons(arr[i], out);
	}
	return out;
}

function toArray(xs)
{
	var out = [];
	while (xs.ctor !== '[]')
	{
		out.push(xs._0);
		xs = xs._1;
	}
	return out;
}

function foldr(f, b, xs)
{
	var arr = toArray(xs);
	var acc = b;
	for (var i = arr.length; i--; )
	{
		acc = A2(f, arr[i], acc);
	}
	return acc;
}

function map2(f, xs, ys)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]')
	{
		arr.push(A2(f, xs._0, ys._0));
		xs = xs._1;
		ys = ys._1;
	}
	return fromArray(arr);
}

function map3(f, xs, ys, zs)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]')
	{
		arr.push(A3(f, xs._0, ys._0, zs._0));
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map4(f, ws, xs, ys, zs)
{
	var arr = [];
	while (   ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A4(f, ws._0, xs._0, ys._0, zs._0));
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map5(f, vs, ws, xs, ys, zs)
{
	var arr = [];
	while (   vs.ctor !== '[]'
		   && ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));
		vs = vs._1;
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function sortBy(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		return _elm_lang$core$Native_Utils.cmp(f(a), f(b));
	}));
}

function sortWith(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		var ord = f(a)(b).ctor;
		return ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;
	}));
}

return {
	Nil: Nil,
	Cons: Cons,
	cons: F2(Cons),
	toArray: toArray,
	fromArray: fromArray,

	foldr: F3(foldr),

	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	sortBy: F2(sortBy),
	sortWith: F2(sortWith)
};

}();
var _elm_lang$core$List$sortWith = _elm_lang$core$Native_List.sortWith;
var _elm_lang$core$List$sortBy = _elm_lang$core$Native_List.sortBy;
var _elm_lang$core$List$sort = function (xs) {
	return A2(_elm_lang$core$List$sortBy, _elm_lang$core$Basics$identity, xs);
};
var _elm_lang$core$List$singleton = function (value) {
	return {
		ctor: '::',
		_0: value,
		_1: {ctor: '[]'}
	};
};
var _elm_lang$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return list;
			} else {
				var _p0 = list;
				if (_p0.ctor === '[]') {
					return list;
				} else {
					var _v1 = n - 1,
						_v2 = _p0._1;
					n = _v1;
					list = _v2;
					continue drop;
				}
			}
		}
	});
var _elm_lang$core$List$map5 = _elm_lang$core$Native_List.map5;
var _elm_lang$core$List$map4 = _elm_lang$core$Native_List.map4;
var _elm_lang$core$List$map3 = _elm_lang$core$Native_List.map3;
var _elm_lang$core$List$map2 = _elm_lang$core$Native_List.map2;
var _elm_lang$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			var _p1 = list;
			if (_p1.ctor === '[]') {
				return false;
			} else {
				if (isOkay(_p1._0)) {
					return true;
				} else {
					var _v4 = isOkay,
						_v5 = _p1._1;
					isOkay = _v4;
					list = _v5;
					continue any;
				}
			}
		}
	});
var _elm_lang$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			_elm_lang$core$List$any,
			function (_p2) {
				return !isOkay(_p2);
			},
			list);
	});
var _elm_lang$core$List$foldr = _elm_lang$core$Native_List.foldr;
var _elm_lang$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return acc;
			} else {
				var _v7 = func,
					_v8 = A2(func, _p3._0, acc),
					_v9 = _p3._1;
				func = _v7;
				acc = _v8;
				list = _v9;
				continue foldl;
			}
		}
	});
var _elm_lang$core$List$length = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, i) {
				return i + 1;
			}),
		0,
		xs);
};
var _elm_lang$core$List$sum = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x + y;
			}),
		0,
		numbers);
};
var _elm_lang$core$List$product = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x * y;
			}),
		1,
		numbers);
};
var _elm_lang$core$List$maximum = function (list) {
	var _p5 = list;
	if (_p5.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$max, _p5._0, _p5._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$minimum = function (list) {
	var _p6 = list;
	if (_p6.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$min, _p6._0, _p6._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$member = F2(
	function (x, xs) {
		return A2(
			_elm_lang$core$List$any,
			function (a) {
				return _elm_lang$core$Native_Utils.eq(a, x);
			},
			xs);
	});
var _elm_lang$core$List$isEmpty = function (xs) {
	var _p7 = xs;
	if (_p7.ctor === '[]') {
		return true;
	} else {
		return false;
	}
};
var _elm_lang$core$List$tail = function (list) {
	var _p8 = list;
	if (_p8.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p8._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$head = function (list) {
	var _p9 = list;
	if (_p9.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p9._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List_ops = _elm_lang$core$List_ops || {};
_elm_lang$core$List_ops['::'] = _elm_lang$core$Native_List.cons;
var _elm_lang$core$List$map = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, acc) {
					return {
						ctor: '::',
						_0: f(x),
						_1: acc
					};
				}),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$filter = F2(
	function (pred, xs) {
		var conditionalCons = F2(
			function (front, back) {
				return pred(front) ? {ctor: '::', _0: front, _1: back} : back;
			});
		return A3(
			_elm_lang$core$List$foldr,
			conditionalCons,
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _p10 = f(mx);
		if (_p10.ctor === 'Just') {
			return {ctor: '::', _0: _p10._0, _1: xs};
		} else {
			return xs;
		}
	});
var _elm_lang$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			_elm_lang$core$List$maybeCons(f),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$reverse = function (list) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			}),
		{ctor: '[]'},
		list);
};
var _elm_lang$core$List$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				var _p11 = accAcc;
				if (_p11.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, x, _p11._0),
						_1: accAcc
					};
				} else {
					return {ctor: '[]'};
				}
			});
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$foldl,
				scan1,
				{
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				},
				xs));
	});
var _elm_lang$core$List$append = F2(
	function (xs, ys) {
		var _p12 = ys;
		if (_p12.ctor === '[]') {
			return xs;
		} else {
			return A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				ys,
				xs);
		}
	});
var _elm_lang$core$List$concat = function (lists) {
	return A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$append,
		{ctor: '[]'},
		lists);
};
var _elm_lang$core$List$concatMap = F2(
	function (f, list) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$map, f, list));
	});
var _elm_lang$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _p13) {
				var _p14 = _p13;
				var _p16 = _p14._0;
				var _p15 = _p14._1;
				return pred(x) ? {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: x, _1: _p16},
					_1: _p15
				} : {
					ctor: '_Tuple2',
					_0: _p16,
					_1: {ctor: '::', _0: x, _1: _p15}
				};
			});
		return A3(
			_elm_lang$core$List$foldr,
			step,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			list);
	});
var _elm_lang$core$List$unzip = function (pairs) {
	var step = F2(
		function (_p18, _p17) {
			var _p19 = _p18;
			var _p20 = _p17;
			return {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: _p19._0, _1: _p20._0},
				_1: {ctor: '::', _0: _p19._1, _1: _p20._1}
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		step,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _elm_lang$core$List$intersperse = F2(
	function (sep, xs) {
		var _p21 = xs;
		if (_p21.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var step = F2(
				function (x, rest) {
					return {
						ctor: '::',
						_0: sep,
						_1: {ctor: '::', _0: x, _1: rest}
					};
				});
			var spersed = A3(
				_elm_lang$core$List$foldr,
				step,
				{ctor: '[]'},
				_p21._1);
			return {ctor: '::', _0: _p21._0, _1: spersed};
		}
	});
var _elm_lang$core$List$takeReverse = F3(
	function (n, list, taken) {
		takeReverse:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return taken;
			} else {
				var _p22 = list;
				if (_p22.ctor === '[]') {
					return taken;
				} else {
					var _v23 = n - 1,
						_v24 = _p22._1,
						_v25 = {ctor: '::', _0: _p22._0, _1: taken};
					n = _v23;
					list = _v24;
					taken = _v25;
					continue takeReverse;
				}
			}
		}
	});
var _elm_lang$core$List$takeTailRec = F2(
	function (n, list) {
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$takeReverse,
				n,
				list,
				{ctor: '[]'}));
	});
var _elm_lang$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
			return {ctor: '[]'};
		} else {
			var _p23 = {ctor: '_Tuple2', _0: n, _1: list};
			_v26_5:
			do {
				_v26_1:
				do {
					if (_p23.ctor === '_Tuple2') {
						if (_p23._1.ctor === '[]') {
							return list;
						} else {
							if (_p23._1._1.ctor === '::') {
								switch (_p23._0) {
									case 1:
										break _v26_1;
									case 2:
										return {
											ctor: '::',
											_0: _p23._1._0,
											_1: {
												ctor: '::',
												_0: _p23._1._1._0,
												_1: {ctor: '[]'}
											}
										};
									case 3:
										if (_p23._1._1._1.ctor === '::') {
											return {
												ctor: '::',
												_0: _p23._1._0,
												_1: {
													ctor: '::',
													_0: _p23._1._1._0,
													_1: {
														ctor: '::',
														_0: _p23._1._1._1._0,
														_1: {ctor: '[]'}
													}
												}
											};
										} else {
											break _v26_5;
										}
									default:
										if ((_p23._1._1._1.ctor === '::') && (_p23._1._1._1._1.ctor === '::')) {
											var _p28 = _p23._1._1._1._0;
											var _p27 = _p23._1._1._0;
											var _p26 = _p23._1._0;
											var _p25 = _p23._1._1._1._1._0;
											var _p24 = _p23._1._1._1._1._1;
											return (_elm_lang$core$Native_Utils.cmp(ctr, 1000) > 0) ? {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A2(_elm_lang$core$List$takeTailRec, n - 4, _p24)
														}
													}
												}
											} : {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A3(_elm_lang$core$List$takeFast, ctr + 1, n - 4, _p24)
														}
													}
												}
											};
										} else {
											break _v26_5;
										}
								}
							} else {
								if (_p23._0 === 1) {
									break _v26_1;
								} else {
									break _v26_5;
								}
							}
						}
					} else {
						break _v26_5;
					}
				} while(false);
				return {
					ctor: '::',
					_0: _p23._1._0,
					_1: {ctor: '[]'}
				};
			} while(false);
			return list;
		}
	});
var _elm_lang$core$List$take = F2(
	function (n, list) {
		return A3(_elm_lang$core$List$takeFast, 0, n, list);
	});
var _elm_lang$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return result;
			} else {
				var _v27 = {ctor: '::', _0: value, _1: result},
					_v28 = n - 1,
					_v29 = value;
				result = _v27;
				n = _v28;
				value = _v29;
				continue repeatHelp;
			}
		}
	});
var _elm_lang$core$List$repeat = F2(
	function (n, value) {
		return A3(
			_elm_lang$core$List$repeatHelp,
			{ctor: '[]'},
			n,
			value);
	});
var _elm_lang$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(lo, hi) < 1) {
				var _v30 = lo,
					_v31 = hi - 1,
					_v32 = {ctor: '::', _0: hi, _1: list};
				lo = _v30;
				hi = _v31;
				list = _v32;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var _elm_lang$core$List$range = F2(
	function (lo, hi) {
		return A3(
			_elm_lang$core$List$rangeHelp,
			lo,
			hi,
			{ctor: '[]'});
	});
var _elm_lang$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$map2,
			f,
			A2(
				_elm_lang$core$List$range,
				0,
				_elm_lang$core$List$length(xs) - 1),
			xs);
	});

var _elm_lang$core$Array$append = _elm_lang$core$Native_Array.append;
var _elm_lang$core$Array$length = _elm_lang$core$Native_Array.length;
var _elm_lang$core$Array$isEmpty = function (array) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Array$length(array),
		0);
};
var _elm_lang$core$Array$slice = _elm_lang$core$Native_Array.slice;
var _elm_lang$core$Array$set = _elm_lang$core$Native_Array.set;
var _elm_lang$core$Array$get = F2(
	function (i, array) {
		return ((_elm_lang$core$Native_Utils.cmp(0, i) < 1) && (_elm_lang$core$Native_Utils.cmp(
			i,
			_elm_lang$core$Native_Array.length(array)) < 0)) ? _elm_lang$core$Maybe$Just(
			A2(_elm_lang$core$Native_Array.get, i, array)) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_lang$core$Array$push = _elm_lang$core$Native_Array.push;
var _elm_lang$core$Array$empty = _elm_lang$core$Native_Array.empty;
var _elm_lang$core$Array$filter = F2(
	function (isOkay, arr) {
		var update = F2(
			function (x, xs) {
				return isOkay(x) ? A2(_elm_lang$core$Native_Array.push, x, xs) : xs;
			});
		return A3(_elm_lang$core$Native_Array.foldl, update, _elm_lang$core$Native_Array.empty, arr);
	});
var _elm_lang$core$Array$foldr = _elm_lang$core$Native_Array.foldr;
var _elm_lang$core$Array$foldl = _elm_lang$core$Native_Array.foldl;
var _elm_lang$core$Array$indexedMap = _elm_lang$core$Native_Array.indexedMap;
var _elm_lang$core$Array$map = _elm_lang$core$Native_Array.map;
var _elm_lang$core$Array$toIndexedList = function (array) {
	return A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		A2(
			_elm_lang$core$List$range,
			0,
			_elm_lang$core$Native_Array.length(array) - 1),
		_elm_lang$core$Native_Array.toList(array));
};
var _elm_lang$core$Array$toList = _elm_lang$core$Native_Array.toList;
var _elm_lang$core$Array$fromList = _elm_lang$core$Native_Array.fromList;
var _elm_lang$core$Array$initialize = _elm_lang$core$Native_Array.initialize;
var _elm_lang$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			_elm_lang$core$Array$initialize,
			n,
			_elm_lang$core$Basics$always(e));
	});
var _elm_lang$core$Array$Array = {ctor: 'Array'};

//import Native.Utils //

var _elm_lang$core$Native_Debug = function() {

function log(tag, value)
{
	var msg = tag + ': ' + _elm_lang$core$Native_Utils.toString(value);
	var process = process || {};
	if (process.stdout)
	{
		process.stdout.write(msg);
	}
	else
	{
		console.log(msg);
	}
	return value;
}

function crash(message)
{
	throw new Error(message);
}

return {
	crash: crash,
	log: F2(log)
};

}();
//import Maybe, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_String = function() {

function isEmpty(str)
{
	return str.length === 0;
}
function cons(chr, str)
{
	return chr + str;
}
function uncons(str)
{
	var hd = str[0];
	if (hd)
	{
		return _elm_lang$core$Maybe$Just(_elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.chr(hd), str.slice(1)));
	}
	return _elm_lang$core$Maybe$Nothing;
}
function append(a, b)
{
	return a + b;
}
function concat(strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join('');
}
function length(str)
{
	return str.length;
}
function map(f, str)
{
	var out = str.split('');
	for (var i = out.length; i--; )
	{
		out[i] = f(_elm_lang$core$Native_Utils.chr(out[i]));
	}
	return out.join('');
}
function filter(pred, str)
{
	return str.split('').map(_elm_lang$core$Native_Utils.chr).filter(pred).join('');
}
function reverse(str)
{
	return str.split('').reverse().join('');
}
function foldl(f, b, str)
{
	var len = str.length;
	for (var i = 0; i < len; ++i)
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function foldr(f, b, str)
{
	for (var i = str.length; i--; )
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function split(sep, str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(sep));
}
function join(sep, strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join(sep);
}
function repeat(n, str)
{
	var result = '';
	while (n > 0)
	{
		if (n & 1)
		{
			result += str;
		}
		n >>= 1, str += str;
	}
	return result;
}
function slice(start, end, str)
{
	return str.slice(start, end);
}
function left(n, str)
{
	return n < 1 ? '' : str.slice(0, n);
}
function right(n, str)
{
	return n < 1 ? '' : str.slice(-n);
}
function dropLeft(n, str)
{
	return n < 1 ? str : str.slice(n);
}
function dropRight(n, str)
{
	return n < 1 ? str : str.slice(0, -n);
}
function pad(n, chr, str)
{
	var half = (n - str.length) / 2;
	return repeat(Math.ceil(half), chr) + str + repeat(half | 0, chr);
}
function padRight(n, chr, str)
{
	return str + repeat(n - str.length, chr);
}
function padLeft(n, chr, str)
{
	return repeat(n - str.length, chr) + str;
}

function trim(str)
{
	return str.trim();
}
function trimLeft(str)
{
	return str.replace(/^\s+/, '');
}
function trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function words(str)
{
	return _elm_lang$core$Native_List.fromArray(str.trim().split(/\s+/g));
}
function lines(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(/\r\n|\r|\n/g));
}

function toUpper(str)
{
	return str.toUpperCase();
}
function toLower(str)
{
	return str.toLowerCase();
}

function any(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return true;
		}
	}
	return false;
}
function all(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (!pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return false;
		}
	}
	return true;
}

function contains(sub, str)
{
	return str.indexOf(sub) > -1;
}
function startsWith(sub, str)
{
	return str.indexOf(sub) === 0;
}
function endsWith(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
}
function indexes(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _elm_lang$core$Native_List.Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _elm_lang$core$Native_List.fromArray(is);
}


function toInt(s)
{
	var len = s.length;

	// if empty
	if (len === 0)
	{
		return intErr(s);
	}

	// if hex
	var c = s[0];
	if (c === '0' && s[1] === 'x')
	{
		for (var i = 2; i < len; ++i)
		{
			var c = s[i];
			if (('0' <= c && c <= '9') || ('A' <= c && c <= 'F') || ('a' <= c && c <= 'f'))
			{
				continue;
			}
			return intErr(s);
		}
		return _elm_lang$core$Result$Ok(parseInt(s, 16));
	}

	// is decimal
	if (c > '9' || (c < '0' && c !== '-' && c !== '+'))
	{
		return intErr(s);
	}
	for (var i = 1; i < len; ++i)
	{
		var c = s[i];
		if (c < '0' || '9' < c)
		{
			return intErr(s);
		}
	}

	return _elm_lang$core$Result$Ok(parseInt(s, 10));
}

function intErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to an Int");
}


function toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return floatErr(s);
	}
	var n = +s;
	// faster isNaN check
	return n === n ? _elm_lang$core$Result$Ok(n) : floatErr(s);
}

function floatErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to a Float");
}


function toList(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split('').map(_elm_lang$core$Native_Utils.chr));
}
function fromList(chars)
{
	return _elm_lang$core$Native_List.toArray(chars).join('');
}

return {
	isEmpty: isEmpty,
	cons: F2(cons),
	uncons: uncons,
	append: F2(append),
	concat: concat,
	length: length,
	map: F2(map),
	filter: F2(filter),
	reverse: reverse,
	foldl: F3(foldl),
	foldr: F3(foldr),

	split: F2(split),
	join: F2(join),
	repeat: F2(repeat),

	slice: F3(slice),
	left: F2(left),
	right: F2(right),
	dropLeft: F2(dropLeft),
	dropRight: F2(dropRight),

	pad: F3(pad),
	padLeft: F3(padLeft),
	padRight: F3(padRight),

	trim: trim,
	trimLeft: trimLeft,
	trimRight: trimRight,

	words: words,
	lines: lines,

	toUpper: toUpper,
	toLower: toLower,

	any: F2(any),
	all: F2(all),

	contains: F2(contains),
	startsWith: F2(startsWith),
	endsWith: F2(endsWith),
	indexes: F2(indexes),

	toInt: toInt,
	toFloat: toFloat,
	toList: toList,
	fromList: fromList
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Char = function() {

return {
	fromCode: function(c) { return _elm_lang$core$Native_Utils.chr(String.fromCharCode(c)); },
	toCode: function(c) { return c.charCodeAt(0); },
	toUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toUpperCase()); },
	toLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLowerCase()); },
	toLocaleUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleUpperCase()); },
	toLocaleLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleLowerCase()); }
};

}();
var _elm_lang$core$Char$fromCode = _elm_lang$core$Native_Char.fromCode;
var _elm_lang$core$Char$toCode = _elm_lang$core$Native_Char.toCode;
var _elm_lang$core$Char$toLocaleLower = _elm_lang$core$Native_Char.toLocaleLower;
var _elm_lang$core$Char$toLocaleUpper = _elm_lang$core$Native_Char.toLocaleUpper;
var _elm_lang$core$Char$toLower = _elm_lang$core$Native_Char.toLower;
var _elm_lang$core$Char$toUpper = _elm_lang$core$Native_Char.toUpper;
var _elm_lang$core$Char$isBetween = F3(
	function (low, high, $char) {
		var code = _elm_lang$core$Char$toCode($char);
		return (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(low)) > -1) && (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(high)) < 1);
	});
var _elm_lang$core$Char$isUpper = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('A'),
	_elm_lang$core$Native_Utils.chr('Z'));
var _elm_lang$core$Char$isLower = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('a'),
	_elm_lang$core$Native_Utils.chr('z'));
var _elm_lang$core$Char$isDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('9'));
var _elm_lang$core$Char$isOctDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('7'));
var _elm_lang$core$Char$isHexDigit = function ($char) {
	return _elm_lang$core$Char$isDigit($char) || (A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('a'),
		_elm_lang$core$Native_Utils.chr('f'),
		$char) || A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('A'),
		_elm_lang$core$Native_Utils.chr('F'),
		$char));
};

var _elm_lang$core$Result$toMaybe = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$Result$withDefault = F2(
	function (def, result) {
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return _p1._0;
		} else {
			return def;
		}
	});
var _elm_lang$core$Result$Err = function (a) {
	return {ctor: 'Err', _0: a};
};
var _elm_lang$core$Result$andThen = F2(
	function (callback, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return callback(_p2._0);
		} else {
			return _elm_lang$core$Result$Err(_p2._0);
		}
	});
var _elm_lang$core$Result$Ok = function (a) {
	return {ctor: 'Ok', _0: a};
};
var _elm_lang$core$Result$map = F2(
	function (func, ra) {
		var _p3 = ra;
		if (_p3.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				func(_p3._0));
		} else {
			return _elm_lang$core$Result$Err(_p3._0);
		}
	});
var _elm_lang$core$Result$map2 = F3(
	function (func, ra, rb) {
		var _p4 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p4._0.ctor === 'Ok') {
			if (_p4._1.ctor === 'Ok') {
				return _elm_lang$core$Result$Ok(
					A2(func, _p4._0._0, _p4._1._0));
			} else {
				return _elm_lang$core$Result$Err(_p4._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p4._0._0);
		}
	});
var _elm_lang$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		var _p5 = {ctor: '_Tuple3', _0: ra, _1: rb, _2: rc};
		if (_p5._0.ctor === 'Ok') {
			if (_p5._1.ctor === 'Ok') {
				if (_p5._2.ctor === 'Ok') {
					return _elm_lang$core$Result$Ok(
						A3(func, _p5._0._0, _p5._1._0, _p5._2._0));
				} else {
					return _elm_lang$core$Result$Err(_p5._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p5._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p5._0._0);
		}
	});
var _elm_lang$core$Result$map4 = F5(
	function (func, ra, rb, rc, rd) {
		var _p6 = {ctor: '_Tuple4', _0: ra, _1: rb, _2: rc, _3: rd};
		if (_p6._0.ctor === 'Ok') {
			if (_p6._1.ctor === 'Ok') {
				if (_p6._2.ctor === 'Ok') {
					if (_p6._3.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(
							A4(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0));
					} else {
						return _elm_lang$core$Result$Err(_p6._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p6._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p6._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p6._0._0);
		}
	});
var _elm_lang$core$Result$map5 = F6(
	function (func, ra, rb, rc, rd, re) {
		var _p7 = {ctor: '_Tuple5', _0: ra, _1: rb, _2: rc, _3: rd, _4: re};
		if (_p7._0.ctor === 'Ok') {
			if (_p7._1.ctor === 'Ok') {
				if (_p7._2.ctor === 'Ok') {
					if (_p7._3.ctor === 'Ok') {
						if (_p7._4.ctor === 'Ok') {
							return _elm_lang$core$Result$Ok(
								A5(func, _p7._0._0, _p7._1._0, _p7._2._0, _p7._3._0, _p7._4._0));
						} else {
							return _elm_lang$core$Result$Err(_p7._4._0);
						}
					} else {
						return _elm_lang$core$Result$Err(_p7._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p7._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p7._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p7._0._0);
		}
	});
var _elm_lang$core$Result$mapError = F2(
	function (f, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(_p8._0);
		} else {
			return _elm_lang$core$Result$Err(
				f(_p8._0));
		}
	});
var _elm_lang$core$Result$fromMaybe = F2(
	function (err, maybe) {
		var _p9 = maybe;
		if (_p9.ctor === 'Just') {
			return _elm_lang$core$Result$Ok(_p9._0);
		} else {
			return _elm_lang$core$Result$Err(err);
		}
	});

var _elm_lang$core$String$fromList = _elm_lang$core$Native_String.fromList;
var _elm_lang$core$String$toList = _elm_lang$core$Native_String.toList;
var _elm_lang$core$String$toFloat = _elm_lang$core$Native_String.toFloat;
var _elm_lang$core$String$toInt = _elm_lang$core$Native_String.toInt;
var _elm_lang$core$String$indices = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$indexes = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$endsWith = _elm_lang$core$Native_String.endsWith;
var _elm_lang$core$String$startsWith = _elm_lang$core$Native_String.startsWith;
var _elm_lang$core$String$contains = _elm_lang$core$Native_String.contains;
var _elm_lang$core$String$all = _elm_lang$core$Native_String.all;
var _elm_lang$core$String$any = _elm_lang$core$Native_String.any;
var _elm_lang$core$String$toLower = _elm_lang$core$Native_String.toLower;
var _elm_lang$core$String$toUpper = _elm_lang$core$Native_String.toUpper;
var _elm_lang$core$String$lines = _elm_lang$core$Native_String.lines;
var _elm_lang$core$String$words = _elm_lang$core$Native_String.words;
var _elm_lang$core$String$trimRight = _elm_lang$core$Native_String.trimRight;
var _elm_lang$core$String$trimLeft = _elm_lang$core$Native_String.trimLeft;
var _elm_lang$core$String$trim = _elm_lang$core$Native_String.trim;
var _elm_lang$core$String$padRight = _elm_lang$core$Native_String.padRight;
var _elm_lang$core$String$padLeft = _elm_lang$core$Native_String.padLeft;
var _elm_lang$core$String$pad = _elm_lang$core$Native_String.pad;
var _elm_lang$core$String$dropRight = _elm_lang$core$Native_String.dropRight;
var _elm_lang$core$String$dropLeft = _elm_lang$core$Native_String.dropLeft;
var _elm_lang$core$String$right = _elm_lang$core$Native_String.right;
var _elm_lang$core$String$left = _elm_lang$core$Native_String.left;
var _elm_lang$core$String$slice = _elm_lang$core$Native_String.slice;
var _elm_lang$core$String$repeat = _elm_lang$core$Native_String.repeat;
var _elm_lang$core$String$join = _elm_lang$core$Native_String.join;
var _elm_lang$core$String$split = _elm_lang$core$Native_String.split;
var _elm_lang$core$String$foldr = _elm_lang$core$Native_String.foldr;
var _elm_lang$core$String$foldl = _elm_lang$core$Native_String.foldl;
var _elm_lang$core$String$reverse = _elm_lang$core$Native_String.reverse;
var _elm_lang$core$String$filter = _elm_lang$core$Native_String.filter;
var _elm_lang$core$String$map = _elm_lang$core$Native_String.map;
var _elm_lang$core$String$length = _elm_lang$core$Native_String.length;
var _elm_lang$core$String$concat = _elm_lang$core$Native_String.concat;
var _elm_lang$core$String$append = _elm_lang$core$Native_String.append;
var _elm_lang$core$String$uncons = _elm_lang$core$Native_String.uncons;
var _elm_lang$core$String$cons = _elm_lang$core$Native_String.cons;
var _elm_lang$core$String$fromChar = function ($char) {
	return A2(_elm_lang$core$String$cons, $char, '');
};
var _elm_lang$core$String$isEmpty = _elm_lang$core$Native_String.isEmpty;

var _elm_lang$core$Dict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_elm_lang$core$Dict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _elm_lang$core$Dict$keys = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$values = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$toList = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_elm_lang$core$Dict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _elm_lang$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _p2) {
				stepState:
				while (true) {
					var _p3 = _p2;
					var _p9 = _p3._1;
					var _p8 = _p3._0;
					var _p4 = _p8;
					if (_p4.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: _p8,
							_1: A3(rightStep, rKey, rValue, _p9)
						};
					} else {
						var _p7 = _p4._1;
						var _p6 = _p4._0._1;
						var _p5 = _p4._0._0;
						if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) < 0) {
							var _v10 = rKey,
								_v11 = rValue,
								_v12 = {
								ctor: '_Tuple2',
								_0: _p7,
								_1: A3(leftStep, _p5, _p6, _p9)
							};
							rKey = _v10;
							rValue = _v11;
							_p2 = _v12;
							continue stepState;
						} else {
							if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) > 0) {
								return {
									ctor: '_Tuple2',
									_0: _p8,
									_1: A3(rightStep, rKey, rValue, _p9)
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: _p7,
									_1: A4(bothStep, _p5, _p6, rValue, _p9)
								};
							}
						}
					}
				}
			});
		var _p10 = A3(
			_elm_lang$core$Dict$foldl,
			stepState,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Dict$toList(leftDict),
				_1: initialResult
			},
			rightDict);
		var leftovers = _p10._0;
		var intermediateResult = _p10._1;
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p11, result) {
					var _p12 = _p11;
					return A3(leftStep, _p12._0, _p12._1, result);
				}),
			intermediateResult,
			leftovers);
	});
var _elm_lang$core$Dict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Debug.crash(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/core/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _elm_lang$core$Dict$isBBlack = function (dict) {
	var _p13 = dict;
	_v14_2:
	do {
		if (_p13.ctor === 'RBNode_elm_builtin') {
			if (_p13._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v14_2;
			}
		} else {
			if (_p13._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v14_2;
			}
		}
	} while(false);
	return false;
};
var _elm_lang$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p14 = dict;
			if (_p14.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v16 = A2(_elm_lang$core$Dict$sizeHelp, n + 1, _p14._4),
					_v17 = _p14._3;
				n = _v16;
				dict = _v17;
				continue sizeHelp;
			}
		}
	});
var _elm_lang$core$Dict$size = function (dict) {
	return A2(_elm_lang$core$Dict$sizeHelp, 0, dict);
};
var _elm_lang$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			var _p15 = dict;
			if (_p15.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p16 = A2(_elm_lang$core$Basics$compare, targetKey, _p15._1);
				switch (_p16.ctor) {
					case 'LT':
						var _v20 = targetKey,
							_v21 = _p15._3;
						targetKey = _v20;
						dict = _v21;
						continue get;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p15._2);
					default:
						var _v22 = targetKey,
							_v23 = _p15._4;
						targetKey = _v22;
						dict = _v23;
						continue get;
				}
			}
		}
	});
var _elm_lang$core$Dict$member = F2(
	function (key, dict) {
		var _p17 = A2(_elm_lang$core$Dict$get, key, dict);
		if (_p17.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _elm_lang$core$Dict$maxWithDefault = F3(
	function (k, v, r) {
		maxWithDefault:
		while (true) {
			var _p18 = r;
			if (_p18.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: k, _1: v};
			} else {
				var _v26 = _p18._1,
					_v27 = _p18._2,
					_v28 = _p18._4;
				k = _v26;
				v = _v27;
				r = _v28;
				continue maxWithDefault;
			}
		}
	});
var _elm_lang$core$Dict$NBlack = {ctor: 'NBlack'};
var _elm_lang$core$Dict$BBlack = {ctor: 'BBlack'};
var _elm_lang$core$Dict$Black = {ctor: 'Black'};
var _elm_lang$core$Dict$blackish = function (t) {
	var _p19 = t;
	if (_p19.ctor === 'RBNode_elm_builtin') {
		var _p20 = _p19._0;
		return _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$Black) || _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$BBlack);
	} else {
		return true;
	}
};
var _elm_lang$core$Dict$Red = {ctor: 'Red'};
var _elm_lang$core$Dict$moreBlack = function (color) {
	var _p21 = color;
	switch (_p21.ctor) {
		case 'Black':
			return _elm_lang$core$Dict$BBlack;
		case 'Red':
			return _elm_lang$core$Dict$Black;
		case 'NBlack':
			return _elm_lang$core$Dict$Red;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a double black node more black!');
	}
};
var _elm_lang$core$Dict$lessBlack = function (color) {
	var _p22 = color;
	switch (_p22.ctor) {
		case 'BBlack':
			return _elm_lang$core$Dict$Black;
		case 'Black':
			return _elm_lang$core$Dict$Red;
		case 'Red':
			return _elm_lang$core$Dict$NBlack;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a negative black node less black!');
	}
};
var _elm_lang$core$Dict$LBBlack = {ctor: 'LBBlack'};
var _elm_lang$core$Dict$LBlack = {ctor: 'LBlack'};
var _elm_lang$core$Dict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _elm_lang$core$Dict$empty = _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
var _elm_lang$core$Dict$isEmpty = function (dict) {
	return _elm_lang$core$Native_Utils.eq(dict, _elm_lang$core$Dict$empty);
};
var _elm_lang$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Dict$ensureBlackRoot = function (dict) {
	var _p23 = dict;
	if ((_p23.ctor === 'RBNode_elm_builtin') && (_p23._0.ctor === 'Red')) {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p23._1, _p23._2, _p23._3, _p23._4);
	} else {
		return dict;
	}
};
var _elm_lang$core$Dict$lessBlackTree = function (dict) {
	var _p24 = dict;
	if (_p24.ctor === 'RBNode_elm_builtin') {
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$lessBlack(_p24._0),
			_p24._1,
			_p24._2,
			_p24._3,
			_p24._4);
	} else {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	}
};
var _elm_lang$core$Dict$balancedTree = function (col) {
	return function (xk) {
		return function (xv) {
			return function (yk) {
				return function (yv) {
					return function (zk) {
						return function (zv) {
							return function (a) {
								return function (b) {
									return function (c) {
										return function (d) {
											return A5(
												_elm_lang$core$Dict$RBNode_elm_builtin,
												_elm_lang$core$Dict$lessBlack(col),
												yk,
												yv,
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, xk, xv, a, b),
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, zk, zv, c, d));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$core$Dict$blacken = function (t) {
	var _p25 = t;
	if (_p25.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p25._1, _p25._2, _p25._3, _p25._4);
	}
};
var _elm_lang$core$Dict$redden = function (t) {
	var _p26 = t;
	if (_p26.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Debug.crash('can\'t make a Leaf red');
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, _p26._1, _p26._2, _p26._3, _p26._4);
	}
};
var _elm_lang$core$Dict$balanceHelp = function (tree) {
	var _p27 = tree;
	_v36_6:
	do {
		_v36_5:
		do {
			_v36_4:
			do {
				_v36_3:
				do {
					_v36_2:
					do {
						_v36_1:
						do {
							_v36_0:
							do {
								if (_p27.ctor === 'RBNode_elm_builtin') {
									if (_p27._3.ctor === 'RBNode_elm_builtin') {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._3._0.ctor) {
												case 'Red':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																		break _v36_2;
																	} else {
																		if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																			break _v36_3;
																		} else {
																			break _v36_6;
																		}
																	}
																}
															}
														case 'NBlack':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																		break _v36_4;
																	} else {
																		break _v36_6;
																	}
																}
															}
														default:
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	break _v36_6;
																}
															}
													}
												case 'NBlack':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															}
														case 'NBlack':
															if (_p27._0.ctor === 'BBlack') {
																if ((((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																	break _v36_4;
																} else {
																	if ((((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															} else {
																break _v36_6;
															}
														default:
															if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																break _v36_5;
															} else {
																break _v36_6;
															}
													}
												default:
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	break _v36_6;
																}
															}
														case 'NBlack':
															if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																break _v36_4;
															} else {
																break _v36_6;
															}
														default:
															break _v36_6;
													}
											}
										} else {
											switch (_p27._3._0.ctor) {
												case 'Red':
													if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
														break _v36_0;
													} else {
														if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
															break _v36_1;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
														break _v36_5;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										}
									} else {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._4._0.ctor) {
												case 'Red':
													if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
														break _v36_2;
													} else {
														if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
															break _v36_3;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
														break _v36_4;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										} else {
											break _v36_6;
										}
									}
								} else {
									break _v36_6;
								}
							} while(false);
							return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._3._1)(_p27._3._3._2)(_p27._3._1)(_p27._3._2)(_p27._1)(_p27._2)(_p27._3._3._3)(_p27._3._3._4)(_p27._3._4)(_p27._4);
						} while(false);
						return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._1)(_p27._3._2)(_p27._3._4._1)(_p27._3._4._2)(_p27._1)(_p27._2)(_p27._3._3)(_p27._3._4._3)(_p27._3._4._4)(_p27._4);
					} while(false);
					return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._3._1)(_p27._4._3._2)(_p27._4._1)(_p27._4._2)(_p27._3)(_p27._4._3._3)(_p27._4._3._4)(_p27._4._4);
				} while(false);
				return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._1)(_p27._4._2)(_p27._4._4._1)(_p27._4._4._2)(_p27._3)(_p27._4._3)(_p27._4._4._3)(_p27._4._4._4);
			} while(false);
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_elm_lang$core$Dict$Black,
				_p27._4._3._1,
				_p27._4._3._2,
				A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3, _p27._4._3._3),
				A5(
					_elm_lang$core$Dict$balance,
					_elm_lang$core$Dict$Black,
					_p27._4._1,
					_p27._4._2,
					_p27._4._3._4,
					_elm_lang$core$Dict$redden(_p27._4._4)));
		} while(false);
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$Black,
			_p27._3._4._1,
			_p27._3._4._2,
			A5(
				_elm_lang$core$Dict$balance,
				_elm_lang$core$Dict$Black,
				_p27._3._1,
				_p27._3._2,
				_elm_lang$core$Dict$redden(_p27._3._3),
				_p27._3._4._3),
			A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3._4._4, _p27._4));
	} while(false);
	return tree;
};
var _elm_lang$core$Dict$balance = F5(
	function (c, k, v, l, r) {
		var tree = A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
		return _elm_lang$core$Dict$blackish(tree) ? _elm_lang$core$Dict$balanceHelp(tree) : tree;
	});
var _elm_lang$core$Dict$bubble = F5(
	function (c, k, v, l, r) {
		return (_elm_lang$core$Dict$isBBlack(l) || _elm_lang$core$Dict$isBBlack(r)) ? A5(
			_elm_lang$core$Dict$balance,
			_elm_lang$core$Dict$moreBlack(c),
			k,
			v,
			_elm_lang$core$Dict$lessBlackTree(l),
			_elm_lang$core$Dict$lessBlackTree(r)) : A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _elm_lang$core$Dict$removeMax = F5(
	function (c, k, v, l, r) {
		var _p28 = r;
		if (_p28.ctor === 'RBEmpty_elm_builtin') {
			return A3(_elm_lang$core$Dict$rem, c, l, r);
		} else {
			return A5(
				_elm_lang$core$Dict$bubble,
				c,
				k,
				v,
				l,
				A5(_elm_lang$core$Dict$removeMax, _p28._0, _p28._1, _p28._2, _p28._3, _p28._4));
		}
	});
var _elm_lang$core$Dict$rem = F3(
	function (color, left, right) {
		var _p29 = {ctor: '_Tuple2', _0: left, _1: right};
		if (_p29._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p30 = color;
				switch (_p30.ctor) {
					case 'Red':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
					case 'Black':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBBlack);
					default:
						return _elm_lang$core$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p33 = _p29._1._0;
				var _p32 = _p29._0._0;
				var _p31 = {ctor: '_Tuple3', _0: color, _1: _p32, _2: _p33};
				if ((((_p31.ctor === '_Tuple3') && (_p31._0.ctor === 'Black')) && (_p31._1.ctor === 'LBlack')) && (_p31._2.ctor === 'Red')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._1._1, _p29._1._2, _p29._1._3, _p29._1._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/LBlack/Red',
						color,
						_elm_lang$core$Basics$toString(_p32),
						_elm_lang$core$Basics$toString(_p33));
				}
			}
		} else {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p36 = _p29._1._0;
				var _p35 = _p29._0._0;
				var _p34 = {ctor: '_Tuple3', _0: color, _1: _p35, _2: _p36};
				if ((((_p34.ctor === '_Tuple3') && (_p34._0.ctor === 'Black')) && (_p34._1.ctor === 'Red')) && (_p34._2.ctor === 'LBlack')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._0._1, _p29._0._2, _p29._0._3, _p29._0._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/Red/LBlack',
						color,
						_elm_lang$core$Basics$toString(_p35),
						_elm_lang$core$Basics$toString(_p36));
				}
			} else {
				var _p40 = _p29._0._2;
				var _p39 = _p29._0._4;
				var _p38 = _p29._0._1;
				var newLeft = A5(_elm_lang$core$Dict$removeMax, _p29._0._0, _p38, _p40, _p29._0._3, _p39);
				var _p37 = A3(_elm_lang$core$Dict$maxWithDefault, _p38, _p40, _p39);
				var k = _p37._0;
				var v = _p37._1;
				return A5(_elm_lang$core$Dict$bubble, color, k, v, newLeft, right);
			}
		}
	});
var _elm_lang$core$Dict$map = F2(
	function (f, dict) {
		var _p41 = dict;
		if (_p41.ctor === 'RBEmpty_elm_builtin') {
			return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
		} else {
			var _p42 = _p41._1;
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_p41._0,
				_p42,
				A2(f, _p42, _p41._2),
				A2(_elm_lang$core$Dict$map, f, _p41._3),
				A2(_elm_lang$core$Dict$map, f, _p41._4));
		}
	});
var _elm_lang$core$Dict$Same = {ctor: 'Same'};
var _elm_lang$core$Dict$Remove = {ctor: 'Remove'};
var _elm_lang$core$Dict$Insert = {ctor: 'Insert'};
var _elm_lang$core$Dict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p43 = dict;
			if (_p43.ctor === 'RBEmpty_elm_builtin') {
				var _p44 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p44.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Dict$Same, _1: _elm_lang$core$Dict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Dict$Insert,
						_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, k, _p44._0, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty)
					};
				}
			} else {
				var _p55 = _p43._2;
				var _p54 = _p43._4;
				var _p53 = _p43._3;
				var _p52 = _p43._1;
				var _p51 = _p43._0;
				var _p45 = A2(_elm_lang$core$Basics$compare, k, _p52);
				switch (_p45.ctor) {
					case 'EQ':
						var _p46 = alter(
							_elm_lang$core$Maybe$Just(_p55));
						if (_p46.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Remove,
								_1: A3(_elm_lang$core$Dict$rem, _p51, _p53, _p54)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Same,
								_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p46._0, _p53, _p54)
							};
						}
					case 'LT':
						var _p47 = up(_p53);
						var flag = _p47._0;
						var newLeft = _p47._1;
						var _p48 = flag;
						switch (_p48.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, newLeft, _p54)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, newLeft, _p54)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, newLeft, _p54)
								};
						}
					default:
						var _p49 = up(_p54);
						var flag = _p49._0;
						var newRight = _p49._1;
						var _p50 = flag;
						switch (_p50.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, _p53, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, _p53, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, _p53, newRight)
								};
						}
				}
			}
		};
		var _p56 = up(dict);
		var flag = _p56._0;
		var updatedDict = _p56._1;
		var _p57 = flag;
		switch (_p57.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _elm_lang$core$Dict$ensureBlackRoot(updatedDict);
			default:
				return _elm_lang$core$Dict$blacken(updatedDict);
		}
	});
var _elm_lang$core$Dict$insert = F3(
	function (key, value, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _elm_lang$core$Dict$singleton = F2(
	function (key, value) {
		return A3(_elm_lang$core$Dict$insert, key, value, _elm_lang$core$Dict$empty);
	});
var _elm_lang$core$Dict$union = F2(
	function (t1, t2) {
		return A3(_elm_lang$core$Dict$foldl, _elm_lang$core$Dict$insert, t2, t1);
	});
var _elm_lang$core$Dict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_elm_lang$core$Dict$insert, key, value, dict) : dict;
			});
		return A3(_elm_lang$core$Dict$foldl, add, _elm_lang$core$Dict$empty, dictionary);
	});
var _elm_lang$core$Dict$intersect = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Dict$filter,
			F2(
				function (k, _p58) {
					return A2(_elm_lang$core$Dict$member, k, t2);
				}),
			t1);
	});
var _elm_lang$core$Dict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p59) {
				var _p60 = _p59;
				var _p62 = _p60._1;
				var _p61 = _p60._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_elm_lang$core$Dict$insert, key, value, _p61),
					_1: _p62
				} : {
					ctor: '_Tuple2',
					_0: _p61,
					_1: A3(_elm_lang$core$Dict$insert, key, value, _p62)
				};
			});
		return A3(
			_elm_lang$core$Dict$foldl,
			add,
			{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _elm_lang$core$Dict$empty},
			dict);
	});
var _elm_lang$core$Dict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p63, dict) {
				var _p64 = _p63;
				return A3(_elm_lang$core$Dict$insert, _p64._0, _p64._1, dict);
			}),
		_elm_lang$core$Dict$empty,
		assocs);
};
var _elm_lang$core$Dict$remove = F2(
	function (key, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _elm_lang$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2(_elm_lang$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});

//import Maybe, Native.Array, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_Json = function() {


// CORE DECODERS

function succeed(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'succeed',
		msg: msg
	};
}

function fail(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'fail',
		msg: msg
	};
}

function decodePrimitive(tag)
{
	return {
		ctor: '<decoder>',
		tag: tag
	};
}

function decodeContainer(tag, decoder)
{
	return {
		ctor: '<decoder>',
		tag: tag,
		decoder: decoder
	};
}

function decodeNull(value)
{
	return {
		ctor: '<decoder>',
		tag: 'null',
		value: value
	};
}

function decodeField(field, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'field',
		field: field,
		decoder: decoder
	};
}

function decodeIndex(index, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'index',
		index: index,
		decoder: decoder
	};
}

function decodeKeyValuePairs(decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'key-value',
		decoder: decoder
	};
}

function mapMany(f, decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'map-many',
		func: f,
		decoders: decoders
	};
}

function andThen(callback, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'andThen',
		decoder: decoder,
		callback: callback
	};
}

function oneOf(decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'oneOf',
		decoders: decoders
	};
}


// DECODING OBJECTS

function map1(f, d1)
{
	return mapMany(f, [d1]);
}

function map2(f, d1, d2)
{
	return mapMany(f, [d1, d2]);
}

function map3(f, d1, d2, d3)
{
	return mapMany(f, [d1, d2, d3]);
}

function map4(f, d1, d2, d3, d4)
{
	return mapMany(f, [d1, d2, d3, d4]);
}

function map5(f, d1, d2, d3, d4, d5)
{
	return mapMany(f, [d1, d2, d3, d4, d5]);
}

function map6(f, d1, d2, d3, d4, d5, d6)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6]);
}

function map7(f, d1, d2, d3, d4, d5, d6, d7)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
}

function map8(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
}


// DECODE HELPERS

function ok(value)
{
	return { tag: 'ok', value: value };
}

function badPrimitive(type, value)
{
	return { tag: 'primitive', type: type, value: value };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badField(field, nestedProblems)
{
	return { tag: 'field', field: field, rest: nestedProblems };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badOneOf(problems)
{
	return { tag: 'oneOf', problems: problems };
}

function bad(msg)
{
	return { tag: 'fail', msg: msg };
}

function badToString(problem)
{
	var context = '_';
	while (problem)
	{
		switch (problem.tag)
		{
			case 'primitive':
				return 'Expecting ' + problem.type
					+ (context === '_' ? '' : ' at ' + context)
					+ ' but instead got: ' + jsToString(problem.value);

			case 'index':
				context += '[' + problem.index + ']';
				problem = problem.rest;
				break;

			case 'field':
				context += '.' + problem.field;
				problem = problem.rest;
				break;

			case 'oneOf':
				var problems = problem.problems;
				for (var i = 0; i < problems.length; i++)
				{
					problems[i] = badToString(problems[i]);
				}
				return 'I ran into the following problems'
					+ (context === '_' ? '' : ' at ' + context)
					+ ':\n\n' + problems.join('\n');

			case 'fail':
				return 'I ran into a `fail` decoder'
					+ (context === '_' ? '' : ' at ' + context)
					+ ': ' + problem.msg;
		}
	}
}

function jsToString(value)
{
	return value === undefined
		? 'undefined'
		: JSON.stringify(value);
}


// DECODE

function runOnString(decoder, string)
{
	var json;
	try
	{
		json = JSON.parse(string);
	}
	catch (e)
	{
		return _elm_lang$core$Result$Err('Given an invalid JSON: ' + e.message);
	}
	return run(decoder, json);
}

function run(decoder, value)
{
	var result = runHelp(decoder, value);
	return (result.tag === 'ok')
		? _elm_lang$core$Result$Ok(result.value)
		: _elm_lang$core$Result$Err(badToString(result));
}

function runHelp(decoder, value)
{
	switch (decoder.tag)
	{
		case 'bool':
			return (typeof value === 'boolean')
				? ok(value)
				: badPrimitive('a Bool', value);

		case 'int':
			if (typeof value !== 'number') {
				return badPrimitive('an Int', value);
			}

			if (-2147483647 < value && value < 2147483647 && (value | 0) === value) {
				return ok(value);
			}

			if (isFinite(value) && !(value % 1)) {
				return ok(value);
			}

			return badPrimitive('an Int', value);

		case 'float':
			return (typeof value === 'number')
				? ok(value)
				: badPrimitive('a Float', value);

		case 'string':
			return (typeof value === 'string')
				? ok(value)
				: (value instanceof String)
					? ok(value + '')
					: badPrimitive('a String', value);

		case 'null':
			return (value === null)
				? ok(decoder.value)
				: badPrimitive('null', value);

		case 'value':
			return ok(value);

		case 'list':
			if (!(value instanceof Array))
			{
				return badPrimitive('a List', value);
			}

			var list = _elm_lang$core$Native_List.Nil;
			for (var i = value.length; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result)
				}
				list = _elm_lang$core$Native_List.Cons(result.value, list);
			}
			return ok(list);

		case 'array':
			if (!(value instanceof Array))
			{
				return badPrimitive('an Array', value);
			}

			var len = value.length;
			var array = new Array(len);
			for (var i = len; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result);
				}
				array[i] = result.value;
			}
			return ok(_elm_lang$core$Native_Array.fromJSArray(array));

		case 'maybe':
			var result = runHelp(decoder.decoder, value);
			return (result.tag === 'ok')
				? ok(_elm_lang$core$Maybe$Just(result.value))
				: ok(_elm_lang$core$Maybe$Nothing);

		case 'field':
			var field = decoder.field;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return badPrimitive('an object with a field named `' + field + '`', value);
			}

			var result = runHelp(decoder.decoder, value[field]);
			return (result.tag === 'ok') ? result : badField(field, result);

		case 'index':
			var index = decoder.index;
			if (!(value instanceof Array))
			{
				return badPrimitive('an array', value);
			}
			if (index >= value.length)
			{
				return badPrimitive('a longer array. Need index ' + index + ' but there are only ' + value.length + ' entries', value);
			}

			var result = runHelp(decoder.decoder, value[index]);
			return (result.tag === 'ok') ? result : badIndex(index, result);

		case 'key-value':
			if (typeof value !== 'object' || value === null || value instanceof Array)
			{
				return badPrimitive('an object', value);
			}

			var keyValuePairs = _elm_lang$core$Native_List.Nil;
			for (var key in value)
			{
				var result = runHelp(decoder.decoder, value[key]);
				if (result.tag !== 'ok')
				{
					return badField(key, result);
				}
				var pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);
				keyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);
			}
			return ok(keyValuePairs);

		case 'map-many':
			var answer = decoder.func;
			var decoders = decoder.decoders;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = runHelp(decoders[i], value);
				if (result.tag !== 'ok')
				{
					return result;
				}
				answer = answer(result.value);
			}
			return ok(answer);

		case 'andThen':
			var result = runHelp(decoder.decoder, value);
			return (result.tag !== 'ok')
				? result
				: runHelp(decoder.callback(result.value), value);

		case 'oneOf':
			var errors = [];
			var temp = decoder.decoders;
			while (temp.ctor !== '[]')
			{
				var result = runHelp(temp._0, value);

				if (result.tag === 'ok')
				{
					return result;
				}

				errors.push(result);

				temp = temp._1;
			}
			return badOneOf(errors);

		case 'fail':
			return bad(decoder.msg);

		case 'succeed':
			return ok(decoder.msg);
	}
}


// EQUALITY

function equality(a, b)
{
	if (a === b)
	{
		return true;
	}

	if (a.tag !== b.tag)
	{
		return false;
	}

	switch (a.tag)
	{
		case 'succeed':
		case 'fail':
			return a.msg === b.msg;

		case 'bool':
		case 'int':
		case 'float':
		case 'string':
		case 'value':
			return true;

		case 'null':
			return a.value === b.value;

		case 'list':
		case 'array':
		case 'maybe':
		case 'key-value':
			return equality(a.decoder, b.decoder);

		case 'field':
			return a.field === b.field && equality(a.decoder, b.decoder);

		case 'index':
			return a.index === b.index && equality(a.decoder, b.decoder);

		case 'map-many':
			if (a.func !== b.func)
			{
				return false;
			}
			return listEquality(a.decoders, b.decoders);

		case 'andThen':
			return a.callback === b.callback && equality(a.decoder, b.decoder);

		case 'oneOf':
			return listEquality(a.decoders, b.decoders);
	}
}

function listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

function encode(indentLevel, value)
{
	return JSON.stringify(value, null, indentLevel);
}

function identity(value)
{
	return value;
}

function encodeObject(keyValuePairs)
{
	var obj = {};
	while (keyValuePairs.ctor !== '[]')
	{
		var pair = keyValuePairs._0;
		obj[pair._0] = pair._1;
		keyValuePairs = keyValuePairs._1;
	}
	return obj;
}

return {
	encode: F2(encode),
	runOnString: F2(runOnString),
	run: F2(run),

	decodeNull: decodeNull,
	decodePrimitive: decodePrimitive,
	decodeContainer: F2(decodeContainer),

	decodeField: F2(decodeField),
	decodeIndex: F2(decodeIndex),

	map1: F2(map1),
	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	map6: F7(map6),
	map7: F8(map7),
	map8: F9(map8),
	decodeKeyValuePairs: decodeKeyValuePairs,

	andThen: F2(andThen),
	fail: fail,
	succeed: succeed,
	oneOf: oneOf,

	identity: identity,
	encodeNull: null,
	encodeArray: _elm_lang$core$Native_Array.toJSArray,
	encodeList: _elm_lang$core$Native_List.toArray,
	encodeObject: encodeObject,

	equality: equality
};

}();

var _elm_lang$core$Json_Encode$list = _elm_lang$core$Native_Json.encodeList;
var _elm_lang$core$Json_Encode$array = _elm_lang$core$Native_Json.encodeArray;
var _elm_lang$core$Json_Encode$object = _elm_lang$core$Native_Json.encodeObject;
var _elm_lang$core$Json_Encode$null = _elm_lang$core$Native_Json.encodeNull;
var _elm_lang$core$Json_Encode$bool = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$float = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$int = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$string = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$encode = _elm_lang$core$Native_Json.encode;
var _elm_lang$core$Json_Encode$Value = {ctor: 'Value'};

var _elm_lang$core$Json_Decode$null = _elm_lang$core$Native_Json.decodeNull;
var _elm_lang$core$Json_Decode$value = _elm_lang$core$Native_Json.decodePrimitive('value');
var _elm_lang$core$Json_Decode$andThen = _elm_lang$core$Native_Json.andThen;
var _elm_lang$core$Json_Decode$fail = _elm_lang$core$Native_Json.fail;
var _elm_lang$core$Json_Decode$succeed = _elm_lang$core$Native_Json.succeed;
var _elm_lang$core$Json_Decode$lazy = function (thunk) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		thunk,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Json_Decode$decodeValue = _elm_lang$core$Native_Json.run;
var _elm_lang$core$Json_Decode$decodeString = _elm_lang$core$Native_Json.runOnString;
var _elm_lang$core$Json_Decode$map8 = _elm_lang$core$Native_Json.map8;
var _elm_lang$core$Json_Decode$map7 = _elm_lang$core$Native_Json.map7;
var _elm_lang$core$Json_Decode$map6 = _elm_lang$core$Native_Json.map6;
var _elm_lang$core$Json_Decode$map5 = _elm_lang$core$Native_Json.map5;
var _elm_lang$core$Json_Decode$map4 = _elm_lang$core$Native_Json.map4;
var _elm_lang$core$Json_Decode$map3 = _elm_lang$core$Native_Json.map3;
var _elm_lang$core$Json_Decode$map2 = _elm_lang$core$Native_Json.map2;
var _elm_lang$core$Json_Decode$map = _elm_lang$core$Native_Json.map1;
var _elm_lang$core$Json_Decode$oneOf = _elm_lang$core$Native_Json.oneOf;
var _elm_lang$core$Json_Decode$maybe = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'maybe', decoder);
};
var _elm_lang$core$Json_Decode$index = _elm_lang$core$Native_Json.decodeIndex;
var _elm_lang$core$Json_Decode$field = _elm_lang$core$Native_Json.decodeField;
var _elm_lang$core$Json_Decode$at = F2(
	function (fields, decoder) {
		return A3(_elm_lang$core$List$foldr, _elm_lang$core$Json_Decode$field, decoder, fields);
	});
var _elm_lang$core$Json_Decode$keyValuePairs = _elm_lang$core$Native_Json.decodeKeyValuePairs;
var _elm_lang$core$Json_Decode$dict = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Dict$fromList,
		_elm_lang$core$Json_Decode$keyValuePairs(decoder));
};
var _elm_lang$core$Json_Decode$array = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'array', decoder);
};
var _elm_lang$core$Json_Decode$list = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'list', decoder);
};
var _elm_lang$core$Json_Decode$nullable = function (decoder) {
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, decoder),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$core$Json_Decode$float = _elm_lang$core$Native_Json.decodePrimitive('float');
var _elm_lang$core$Json_Decode$int = _elm_lang$core$Native_Json.decodePrimitive('int');
var _elm_lang$core$Json_Decode$bool = _elm_lang$core$Native_Json.decodePrimitive('bool');
var _elm_lang$core$Json_Decode$string = _elm_lang$core$Native_Json.decodePrimitive('string');
var _elm_lang$core$Json_Decode$Decoder = {ctor: 'Decoder'};

var _elm_lang$core$Debug$crash = _elm_lang$core$Native_Debug.crash;
var _elm_lang$core$Debug$log = _elm_lang$core$Native_Debug.log;

var _elm_lang$core$Tuple$mapSecond = F2(
	function (func, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _p1._0,
			_1: func(_p1._1)
		};
	});
var _elm_lang$core$Tuple$mapFirst = F2(
	function (func, _p2) {
		var _p3 = _p2;
		return {
			ctor: '_Tuple2',
			_0: func(_p3._0),
			_1: _p3._1
		};
	});
var _elm_lang$core$Tuple$second = function (_p4) {
	var _p5 = _p4;
	return _p5._1;
};
var _elm_lang$core$Tuple$first = function (_p6) {
	var _p7 = _p6;
	return _p7._0;
};

//import //

var _elm_lang$core$Native_Platform = function() {


// PROGRAMS

function program(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flags !== 'undefined')
				{
					throw new Error(
						'The `' + moduleName + '` module does not need flags.\n'
						+ 'Call ' + moduleName + '.worker() with no arguments and you should be all set!'
					);
				}

				return initialize(
					impl.init,
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function programWithFlags(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flagDecoder === 'undefined')
				{
					throw new Error(
						'Are you trying to sneak a Never value into Elm? Trickster!\n'
						+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
						+ 'Use `program` instead if you do not want flags.'
					);
				}

				var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
				if (result.ctor === 'Err')
				{
					throw new Error(
						moduleName + '.worker(...) was called with an unexpected argument.\n'
						+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
						+ result._0
					);
				}

				return initialize(
					impl.init(result._0),
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function renderer(enqueue, _)
{
	return function(_) {};
}


// HTML TO PROGRAM

function htmlToProgram(vnode)
{
	var emptyBag = batch(_elm_lang$core$Native_List.Nil);
	var noChange = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		emptyBag
	);

	return _elm_lang$virtual_dom$VirtualDom$program({
		init: noChange,
		view: function(model) { return main; },
		update: F2(function(msg, model) { return noChange; }),
		subscriptions: function (model) { return emptyBag; }
	});
}


// INITIALIZE A PROGRAM

function initialize(init, update, subscriptions, renderer)
{
	// ambient state
	var managers = {};
	var updateView;

	// init and update state in main process
	var initApp = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		var model = init._0;
		updateView = renderer(enqueue, model);
		var cmds = init._1;
		var subs = subscriptions(model);
		dispatchEffects(managers, cmds, subs);
		callback(_elm_lang$core$Native_Scheduler.succeed(model));
	});

	function onMessage(msg, model)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
			var results = A2(update, msg, model);
			model = results._0;
			updateView(model);
			var cmds = results._1;
			var subs = subscriptions(model);
			dispatchEffects(managers, cmds, subs);
			callback(_elm_lang$core$Native_Scheduler.succeed(model));
		});
	}

	var mainProcess = spawnLoop(initApp, onMessage);

	function enqueue(msg)
	{
		_elm_lang$core$Native_Scheduler.rawSend(mainProcess, msg);
	}

	var ports = setupEffects(managers, enqueue);

	return ports ? { ports: ports } : {};
}


// EFFECT MANAGERS

var effectManagers = {};

function setupEffects(managers, callback)
{
	var ports;

	// setup all necessary effect managers
	for (var key in effectManagers)
	{
		var manager = effectManagers[key];

		if (manager.isForeign)
		{
			ports = ports || {};
			ports[key] = manager.tag === 'cmd'
				? setupOutgoingPort(key)
				: setupIncomingPort(key, callback);
		}

		managers[key] = makeManager(manager, callback);
	}

	return ports;
}

function makeManager(info, callback)
{
	var router = {
		main: callback,
		self: undefined
	};

	var tag = info.tag;
	var onEffects = info.onEffects;
	var onSelfMsg = info.onSelfMsg;

	function onMessage(msg, state)
	{
		if (msg.ctor === 'self')
		{
			return A3(onSelfMsg, router, msg._0, state);
		}

		var fx = msg._0;
		switch (tag)
		{
			case 'cmd':
				return A3(onEffects, router, fx.cmds, state);

			case 'sub':
				return A3(onEffects, router, fx.subs, state);

			case 'fx':
				return A4(onEffects, router, fx.cmds, fx.subs, state);
		}
	}

	var process = spawnLoop(info.init, onMessage);
	router.self = process;
	return process;
}

function sendToApp(router, msg)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		router.main(msg);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sendToSelf(router, msg)
{
	return A2(_elm_lang$core$Native_Scheduler.send, router.self, {
		ctor: 'self',
		_0: msg
	});
}


// HELPER for STATEFUL LOOPS

function spawnLoop(init, onMessage)
{
	var andThen = _elm_lang$core$Native_Scheduler.andThen;

	function loop(state)
	{
		var handleMsg = _elm_lang$core$Native_Scheduler.receive(function(msg) {
			return onMessage(msg, state);
		});
		return A2(andThen, loop, handleMsg);
	}

	var task = A2(andThen, loop, init);

	return _elm_lang$core$Native_Scheduler.rawSpawn(task);
}


// BAGS

function leaf(home)
{
	return function(value)
	{
		return {
			type: 'leaf',
			home: home,
			value: value
		};
	};
}

function batch(list)
{
	return {
		type: 'node',
		branches: list
	};
}

function map(tagger, bag)
{
	return {
		type: 'map',
		tagger: tagger,
		tree: bag
	}
}


// PIPE BAGS INTO EFFECT MANAGERS

function dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	gatherEffects(true, cmdBag, effectsDict, null);
	gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		var fx = home in effectsDict
			? effectsDict[home]
			: {
				cmds: _elm_lang$core$Native_List.Nil,
				subs: _elm_lang$core$Native_List.Nil
			};

		_elm_lang$core$Native_Scheduler.rawSend(managers[home], { ctor: 'fx', _0: fx });
	}
}

function gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.type)
	{
		case 'leaf':
			var home = bag.home;
			var effect = toEffect(isCmd, home, taggers, bag.value);
			effectsDict[home] = insert(isCmd, effect, effectsDict[home]);
			return;

		case 'node':
			var list = bag.branches;
			while (list.ctor !== '[]')
			{
				gatherEffects(isCmd, list._0, effectsDict, taggers);
				list = list._1;
			}
			return;

		case 'map':
			gatherEffects(isCmd, bag.tree, effectsDict, {
				tagger: bag.tagger,
				rest: taggers
			});
			return;
	}
}

function toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		var temp = taggers;
		while (temp)
		{
			x = temp.tagger(x);
			temp = temp.rest;
		}
		return x;
	}

	var map = isCmd
		? effectManagers[home].cmdMap
		: effectManagers[home].subMap;

	return A2(map, applyTaggers, value)
}

function insert(isCmd, newEffect, effects)
{
	effects = effects || {
		cmds: _elm_lang$core$Native_List.Nil,
		subs: _elm_lang$core$Native_List.Nil
	};
	if (isCmd)
	{
		effects.cmds = _elm_lang$core$Native_List.Cons(newEffect, effects.cmds);
		return effects;
	}
	effects.subs = _elm_lang$core$Native_List.Cons(newEffect, effects.subs);
	return effects;
}


// PORTS

function checkPortName(name)
{
	if (name in effectManagers)
	{
		throw new Error('There can only be one port named `' + name + '`, but your program has multiple.');
	}
}


// OUTGOING PORTS

function outgoingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'cmd',
		cmdMap: outgoingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var outgoingPortMap = F2(function cmdMap(tagger, value) {
	return value;
});

function setupOutgoingPort(name)
{
	var subs = [];
	var converter = effectManagers[name].converter;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function onEffects(router, cmdList, state)
	{
		while (cmdList.ctor !== '[]')
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = converter(cmdList._0);
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
			cmdList = cmdList._1;
		}
		return init;
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}


// INCOMING PORTS

function incomingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'sub',
		subMap: incomingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var incomingPortMap = F2(function subMap(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});

function setupIncomingPort(name, callback)
{
	var sentBeforeInit = [];
	var subs = _elm_lang$core$Native_List.Nil;
	var converter = effectManagers[name].converter;
	var currentOnEffects = preInitOnEffects;
	var currentSend = preInitSend;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function preInitOnEffects(router, subList, state)
	{
		var postInitResult = postInitOnEffects(router, subList, state);

		for(var i = 0; i < sentBeforeInit.length; i++)
		{
			postInitSend(sentBeforeInit[i]);
		}

		sentBeforeInit = null; // to release objects held in queue
		currentSend = postInitSend;
		currentOnEffects = postInitOnEffects;
		return postInitResult;
	}

	function postInitOnEffects(router, subList, state)
	{
		subs = subList;
		return init;
	}

	function onEffects(router, subList, state)
	{
		return currentOnEffects(router, subList, state);
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function preInitSend(value)
	{
		sentBeforeInit.push(value);
	}

	function postInitSend(value)
	{
		var temp = subs;
		while (temp.ctor !== '[]')
		{
			callback(temp._0(value));
			temp = temp._1;
		}
	}

	function send(incomingValue)
	{
		var result = A2(_elm_lang$core$Json_Decode$decodeValue, converter, incomingValue);
		if (result.ctor === 'Err')
		{
			throw new Error('Trying to send an unexpected type of value through port `' + name + '`:\n' + result._0);
		}

		currentSend(result._0);
	}

	return { send: send };
}

return {
	// routers
	sendToApp: F2(sendToApp),
	sendToSelf: F2(sendToSelf),

	// global setup
	effectManagers: effectManagers,
	outgoingPort: outgoingPort,
	incomingPort: incomingPort,

	htmlToProgram: htmlToProgram,
	program: program,
	programWithFlags: programWithFlags,
	initialize: initialize,

	// effect bags
	leaf: leaf,
	batch: batch,
	map: F2(map)
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Scheduler = function() {

var MAX_STEPS = 10000;


// TASKS

function succeed(value)
{
	return {
		ctor: '_Task_succeed',
		value: value
	};
}

function fail(error)
{
	return {
		ctor: '_Task_fail',
		value: error
	};
}

function nativeBinding(callback)
{
	return {
		ctor: '_Task_nativeBinding',
		callback: callback,
		cancel: null
	};
}

function andThen(callback, task)
{
	return {
		ctor: '_Task_andThen',
		callback: callback,
		task: task
	};
}

function onError(callback, task)
{
	return {
		ctor: '_Task_onError',
		callback: callback,
		task: task
	};
}

function receive(callback)
{
	return {
		ctor: '_Task_receive',
		callback: callback
	};
}


// PROCESSES

function rawSpawn(task)
{
	var process = {
		ctor: '_Process',
		id: _elm_lang$core$Native_Utils.guid(),
		root: task,
		stack: null,
		mailbox: []
	};

	enqueue(process);

	return process;
}

function spawn(task)
{
	return nativeBinding(function(callback) {
		var process = rawSpawn(task);
		callback(succeed(process));
	});
}

function rawSend(process, msg)
{
	process.mailbox.push(msg);
	enqueue(process);
}

function send(process, msg)
{
	return nativeBinding(function(callback) {
		rawSend(process, msg);
		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function kill(process)
{
	return nativeBinding(function(callback) {
		var root = process.root;
		if (root.ctor === '_Task_nativeBinding' && root.cancel)
		{
			root.cancel();
		}

		process.root = null;

		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sleep(time)
{
	return nativeBinding(function(callback) {
		var id = setTimeout(function() {
			callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}


// STEP PROCESSES

function step(numSteps, process)
{
	while (numSteps < MAX_STEPS)
	{
		var ctor = process.root.ctor;

		if (ctor === '_Task_succeed')
		{
			while (process.stack && process.stack.ctor === '_Task_onError')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_fail')
		{
			while (process.stack && process.stack.ctor === '_Task_andThen')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_andThen')
		{
			process.stack = {
				ctor: '_Task_andThen',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_onError')
		{
			process.stack = {
				ctor: '_Task_onError',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_nativeBinding')
		{
			process.root.cancel = process.root.callback(function(newRoot) {
				process.root = newRoot;
				enqueue(process);
			});

			break;
		}

		if (ctor === '_Task_receive')
		{
			var mailbox = process.mailbox;
			if (mailbox.length === 0)
			{
				break;
			}

			process.root = process.root.callback(mailbox.shift());
			++numSteps;
			continue;
		}

		throw new Error(ctor);
	}

	if (numSteps < MAX_STEPS)
	{
		return numSteps + 1;
	}
	enqueue(process);

	return numSteps;
}


// WORK QUEUE

var working = false;
var workQueue = [];

function enqueue(process)
{
	workQueue.push(process);

	if (!working)
	{
		setTimeout(work, 0);
		working = true;
	}
}

function work()
{
	var numSteps = 0;
	var process;
	while (numSteps < MAX_STEPS && (process = workQueue.shift()))
	{
		if (process.root)
		{
			numSteps = step(numSteps, process);
		}
	}
	if (!process)
	{
		working = false;
		return;
	}
	setTimeout(work, 0);
}


return {
	succeed: succeed,
	fail: fail,
	nativeBinding: nativeBinding,
	andThen: F2(andThen),
	onError: F2(onError),
	receive: receive,

	spawn: spawn,
	kill: kill,
	sleep: sleep,
	send: F2(send),

	rawSpawn: rawSpawn,
	rawSend: rawSend
};

}();
var _elm_lang$core$Platform_Cmd$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Cmd$none = _elm_lang$core$Platform_Cmd$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Cmd_ops = _elm_lang$core$Platform_Cmd_ops || {};
_elm_lang$core$Platform_Cmd_ops['!'] = F2(
	function (model, commands) {
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(commands)
		};
	});
var _elm_lang$core$Platform_Cmd$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Cmd$Cmd = {ctor: 'Cmd'};

var _elm_lang$core$Platform_Sub$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Sub$none = _elm_lang$core$Platform_Sub$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Sub$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Sub$Sub = {ctor: 'Sub'};

var _elm_lang$core$Platform$hack = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Platform$sendToSelf = _elm_lang$core$Native_Platform.sendToSelf;
var _elm_lang$core$Platform$sendToApp = _elm_lang$core$Native_Platform.sendToApp;
var _elm_lang$core$Platform$programWithFlags = _elm_lang$core$Native_Platform.programWithFlags;
var _elm_lang$core$Platform$program = _elm_lang$core$Native_Platform.program;
var _elm_lang$core$Platform$Program = {ctor: 'Program'};
var _elm_lang$core$Platform$Task = {ctor: 'Task'};
var _elm_lang$core$Platform$ProcessId = {ctor: 'ProcessId'};
var _elm_lang$core$Platform$Router = {ctor: 'Router'};

var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode = _elm_lang$core$Json_Decode$succeed;
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$resolve = _elm_lang$core$Json_Decode$andThen(_elm_lang$core$Basics$identity);
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom = F2(
	function (decoder, wrapped) {
		return A3(
			_elm_lang$core$Json_Decode$map2,
			F2(
				function (x, y) {
					return x(y);
				}),
			wrapped,
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded = function (_p0) {
	return _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom(
		_elm_lang$core$Json_Decode$succeed(_p0));
};
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder = F3(
	function (pathDecoder, valDecoder, fallback) {
		var nullOr = function (decoder) {
			return _elm_lang$core$Json_Decode$oneOf(
				{
					ctor: '::',
					_0: decoder,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Json_Decode$null(fallback),
						_1: {ctor: '[]'}
					}
				});
		};
		var handleResult = function (input) {
			var _p1 = A2(_elm_lang$core$Json_Decode$decodeValue, pathDecoder, input);
			if (_p1.ctor === 'Ok') {
				var _p2 = A2(
					_elm_lang$core$Json_Decode$decodeValue,
					nullOr(valDecoder),
					_p1._0);
				if (_p2.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(_p2._0);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p2._0);
				}
			} else {
				var _p3 = A2(
					_elm_lang$core$Json_Decode$decodeValue,
					_elm_lang$core$Json_Decode$keyValuePairs(_elm_lang$core$Json_Decode$value),
					input);
				if (_p3.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(fallback);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p3._0);
				}
			}
		};
		return A2(_elm_lang$core$Json_Decode$andThen, handleResult, _elm_lang$core$Json_Decode$value);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalAt = F4(
	function (path, valDecoder, fallback, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder,
				A2(_elm_lang$core$Json_Decode$at, path, _elm_lang$core$Json_Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional = F4(
	function (key, valDecoder, fallback, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder,
				A2(_elm_lang$core$Json_Decode$field, key, _elm_lang$core$Json_Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt = F3(
	function (path, valDecoder, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A2(_elm_lang$core$Json_Decode$at, path, valDecoder),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A2(_elm_lang$core$Json_Decode$field, key, valDecoder),
			decoder);
	});

var _elm_lang$core$Task$onError = _elm_lang$core$Native_Scheduler.onError;
var _elm_lang$core$Task$andThen = _elm_lang$core$Native_Scheduler.andThen;
var _elm_lang$core$Task$spawnCmd = F2(
	function (router, _p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Scheduler.spawn(
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Platform$sendToApp(router),
				_p1._0));
	});
var _elm_lang$core$Task$fail = _elm_lang$core$Native_Scheduler.fail;
var _elm_lang$core$Task$mapError = F2(
	function (convert, task) {
		return A2(
			_elm_lang$core$Task$onError,
			function (_p2) {
				return _elm_lang$core$Task$fail(
					convert(_p2));
			},
			task);
	});
var _elm_lang$core$Task$succeed = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return _elm_lang$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var _elm_lang$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return _elm_lang$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map3 = F4(
	function (func, taskA, taskB, taskC) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return _elm_lang$core$Task$succeed(
									A3(func, a, b, c));
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map4 = F5(
	function (func, taskA, taskB, taskC, taskD) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return _elm_lang$core$Task$succeed(
											A4(func, a, b, c, d));
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map5 = F6(
	function (func, taskA, taskB, taskC, taskD, taskE) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return A2(
											_elm_lang$core$Task$andThen,
											function (e) {
												return _elm_lang$core$Task$succeed(
													A5(func, a, b, c, d, e));
											},
											taskE);
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$sequence = function (tasks) {
	var _p3 = tasks;
	if (_p3.ctor === '[]') {
		return _elm_lang$core$Task$succeed(
			{ctor: '[]'});
	} else {
		return A3(
			_elm_lang$core$Task$map2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p3._0,
			_elm_lang$core$Task$sequence(_p3._1));
	}
};
var _elm_lang$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			_elm_lang$core$Task$map,
			function (_p4) {
				return {ctor: '_Tuple0'};
			},
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Task$spawnCmd(router),
					commands)));
	});
var _elm_lang$core$Task$init = _elm_lang$core$Task$succeed(
	{ctor: '_Tuple0'});
var _elm_lang$core$Task$onSelfMsg = F3(
	function (_p7, _p6, _p5) {
		return _elm_lang$core$Task$succeed(
			{ctor: '_Tuple0'});
	});
var _elm_lang$core$Task$command = _elm_lang$core$Native_Platform.leaf('Task');
var _elm_lang$core$Task$Perform = function (a) {
	return {ctor: 'Perform', _0: a};
};
var _elm_lang$core$Task$perform = F2(
	function (toMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(_elm_lang$core$Task$map, toMessage, task)));
	});
var _elm_lang$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(
					_elm_lang$core$Task$onError,
					function (_p8) {
						return _elm_lang$core$Task$succeed(
							resultToMessage(
								_elm_lang$core$Result$Err(_p8)));
					},
					A2(
						_elm_lang$core$Task$andThen,
						function (_p9) {
							return _elm_lang$core$Task$succeed(
								resultToMessage(
									_elm_lang$core$Result$Ok(_p9)));
						},
						task))));
	});
var _elm_lang$core$Task$cmdMap = F2(
	function (tagger, _p10) {
		var _p11 = _p10;
		return _elm_lang$core$Task$Perform(
			A2(_elm_lang$core$Task$map, tagger, _p11._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Task'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Task$init, onEffects: _elm_lang$core$Task$onEffects, onSelfMsg: _elm_lang$core$Task$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Task$cmdMap};

//import Native.Scheduler //

var _elm_lang$core$Native_Time = function() {

var now = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
{
	callback(_elm_lang$core$Native_Scheduler.succeed(Date.now()));
});

function setInterval_(interval, task)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var id = setInterval(function() {
			_elm_lang$core$Native_Scheduler.rawSpawn(task);
		}, interval);

		return function() { clearInterval(id); };
	});
}

return {
	now: now,
	setInterval_: F2(setInterval_)
};

}();
var _elm_lang$core$Time$setInterval = _elm_lang$core$Native_Time.setInterval_;
var _elm_lang$core$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		var _p0 = intervals;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Task$succeed(processes);
		} else {
			var _p1 = _p0._0;
			var spawnRest = function (id) {
				return A3(
					_elm_lang$core$Time$spawnHelp,
					router,
					_p0._1,
					A3(_elm_lang$core$Dict$insert, _p1, id, processes));
			};
			var spawnTimer = _elm_lang$core$Native_Scheduler.spawn(
				A2(
					_elm_lang$core$Time$setInterval,
					_p1,
					A2(_elm_lang$core$Platform$sendToSelf, router, _p1)));
			return A2(_elm_lang$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var _elm_lang$core$Time$addMySub = F2(
	function (_p2, state) {
		var _p3 = _p2;
		var _p6 = _p3._1;
		var _p5 = _p3._0;
		var _p4 = A2(_elm_lang$core$Dict$get, _p5, state);
		if (_p4.ctor === 'Nothing') {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{
					ctor: '::',
					_0: _p6,
					_1: {ctor: '[]'}
				},
				state);
		} else {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{ctor: '::', _0: _p6, _1: _p4._0},
				state);
		}
	});
var _elm_lang$core$Time$inMilliseconds = function (t) {
	return t;
};
var _elm_lang$core$Time$millisecond = 1;
var _elm_lang$core$Time$second = 1000 * _elm_lang$core$Time$millisecond;
var _elm_lang$core$Time$minute = 60 * _elm_lang$core$Time$second;
var _elm_lang$core$Time$hour = 60 * _elm_lang$core$Time$minute;
var _elm_lang$core$Time$inHours = function (t) {
	return t / _elm_lang$core$Time$hour;
};
var _elm_lang$core$Time$inMinutes = function (t) {
	return t / _elm_lang$core$Time$minute;
};
var _elm_lang$core$Time$inSeconds = function (t) {
	return t / _elm_lang$core$Time$second;
};
var _elm_lang$core$Time$now = _elm_lang$core$Native_Time.now;
var _elm_lang$core$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _p7 = A2(_elm_lang$core$Dict$get, interval, state.taggers);
		if (_p7.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var tellTaggers = function (time) {
				return _elm_lang$core$Task$sequence(
					A2(
						_elm_lang$core$List$map,
						function (tagger) {
							return A2(
								_elm_lang$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						_p7._0));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p8) {
					return _elm_lang$core$Task$succeed(state);
				},
				A2(_elm_lang$core$Task$andThen, tellTaggers, _elm_lang$core$Time$now));
		}
	});
var _elm_lang$core$Time$subscription = _elm_lang$core$Native_Platform.leaf('Time');
var _elm_lang$core$Time$State = F2(
	function (a, b) {
		return {taggers: a, processes: b};
	});
var _elm_lang$core$Time$init = _elm_lang$core$Task$succeed(
	A2(_elm_lang$core$Time$State, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty));
var _elm_lang$core$Time$onEffects = F3(
	function (router, subs, _p9) {
		var _p10 = _p9;
		var rightStep = F3(
			function (_p12, id, _p11) {
				var _p13 = _p11;
				return {
					ctor: '_Tuple3',
					_0: _p13._0,
					_1: _p13._1,
					_2: A2(
						_elm_lang$core$Task$andThen,
						function (_p14) {
							return _p13._2;
						},
						_elm_lang$core$Native_Scheduler.kill(id))
				};
			});
		var bothStep = F4(
			function (interval, taggers, id, _p15) {
				var _p16 = _p15;
				return {
					ctor: '_Tuple3',
					_0: _p16._0,
					_1: A3(_elm_lang$core$Dict$insert, interval, id, _p16._1),
					_2: _p16._2
				};
			});
		var leftStep = F3(
			function (interval, taggers, _p17) {
				var _p18 = _p17;
				return {
					ctor: '_Tuple3',
					_0: {ctor: '::', _0: interval, _1: _p18._0},
					_1: _p18._1,
					_2: _p18._2
				};
			});
		var newTaggers = A3(_elm_lang$core$List$foldl, _elm_lang$core$Time$addMySub, _elm_lang$core$Dict$empty, subs);
		var _p19 = A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			_p10.processes,
			{
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Dict$empty,
				_2: _elm_lang$core$Task$succeed(
					{ctor: '_Tuple0'})
			});
		var spawnList = _p19._0;
		var existingDict = _p19._1;
		var killTask = _p19._2;
		return A2(
			_elm_lang$core$Task$andThen,
			function (newProcesses) {
				return _elm_lang$core$Task$succeed(
					A2(_elm_lang$core$Time$State, newTaggers, newProcesses));
			},
			A2(
				_elm_lang$core$Task$andThen,
				function (_p20) {
					return A3(_elm_lang$core$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var _elm_lang$core$Time$Every = F2(
	function (a, b) {
		return {ctor: 'Every', _0: a, _1: b};
	});
var _elm_lang$core$Time$every = F2(
	function (interval, tagger) {
		return _elm_lang$core$Time$subscription(
			A2(_elm_lang$core$Time$Every, interval, tagger));
	});
var _elm_lang$core$Time$subMap = F2(
	function (f, _p21) {
		var _p22 = _p21;
		return A2(
			_elm_lang$core$Time$Every,
			_p22._0,
			function (_p23) {
				return f(
					_p22._1(_p23));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Time'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Time$init, onEffects: _elm_lang$core$Time$onEffects, onSelfMsg: _elm_lang$core$Time$onSelfMsg, tag: 'sub', subMap: _elm_lang$core$Time$subMap};

var _elm_lang$core$Process$kill = _elm_lang$core$Native_Scheduler.kill;
var _elm_lang$core$Process$sleep = _elm_lang$core$Native_Scheduler.sleep;
var _elm_lang$core$Process$spawn = _elm_lang$core$Native_Scheduler.spawn;

var _elm_lang$dom$Native_Dom = function() {

var fakeNode = {
	addEventListener: function() {},
	removeEventListener: function() {}
};

var onDocument = on(typeof document !== 'undefined' ? document : fakeNode);
var onWindow = on(typeof window !== 'undefined' ? window : fakeNode);

function on(node)
{
	return function(eventName, decoder, toTask)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {

			function performTask(event)
			{
				var result = A2(_elm_lang$core$Json_Decode$decodeValue, decoder, event);
				if (result.ctor === 'Ok')
				{
					_elm_lang$core$Native_Scheduler.rawSpawn(toTask(result._0));
				}
			}

			node.addEventListener(eventName, performTask);

			return function()
			{
				node.removeEventListener(eventName, performTask);
			};
		});
	};
}

var rAF = typeof requestAnimationFrame !== 'undefined'
	? requestAnimationFrame
	: function(callback) { callback(); };

function withNode(id, doStuff)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		rAF(function()
		{
			var node = document.getElementById(id);
			if (node === null)
			{
				callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NotFound', _0: id }));
				return;
			}
			callback(_elm_lang$core$Native_Scheduler.succeed(doStuff(node)));
		});
	});
}


// FOCUS

function focus(id)
{
	return withNode(id, function(node) {
		node.focus();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function blur(id)
{
	return withNode(id, function(node) {
		node.blur();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SCROLLING

function getScrollTop(id)
{
	return withNode(id, function(node) {
		return node.scrollTop;
	});
}

function setScrollTop(id, desiredScrollTop)
{
	return withNode(id, function(node) {
		node.scrollTop = desiredScrollTop;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toBottom(id)
{
	return withNode(id, function(node) {
		node.scrollTop = node.scrollHeight;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function getScrollLeft(id)
{
	return withNode(id, function(node) {
		return node.scrollLeft;
	});
}

function setScrollLeft(id, desiredScrollLeft)
{
	return withNode(id, function(node) {
		node.scrollLeft = desiredScrollLeft;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toRight(id)
{
	return withNode(id, function(node) {
		node.scrollLeft = node.scrollWidth;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SIZE

function width(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollWidth;
			case 'VisibleContent':
				return node.clientWidth;
			case 'VisibleContentWithBorders':
				return node.offsetWidth;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.right - rect.left;
		}
	});
}

function height(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollHeight;
			case 'VisibleContent':
				return node.clientHeight;
			case 'VisibleContentWithBorders':
				return node.offsetHeight;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.bottom - rect.top;
		}
	});
}

return {
	onDocument: F3(onDocument),
	onWindow: F3(onWindow),

	focus: focus,
	blur: blur,

	getScrollTop: getScrollTop,
	setScrollTop: F2(setScrollTop),
	getScrollLeft: getScrollLeft,
	setScrollLeft: F2(setScrollLeft),
	toBottom: toBottom,
	toRight: toRight,

	height: F2(height),
	width: F2(width)
};

}();

var _elm_lang$dom$Dom_LowLevel$onWindow = _elm_lang$dom$Native_Dom.onWindow;
var _elm_lang$dom$Dom_LowLevel$onDocument = _elm_lang$dom$Native_Dom.onDocument;

var _elm_lang$virtual_dom$VirtualDom_Debug$wrap;
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags;

var _elm_lang$virtual_dom$Native_VirtualDom = function() {

var STYLE_KEY = 'STYLE';
var EVENT_KEY = 'EVENT';
var ATTR_KEY = 'ATTR';
var ATTR_NS_KEY = 'ATTR_NS';

var localDoc = typeof document !== 'undefined' ? document : {};


////////////  VIRTUAL DOM NODES  ////////////


function text(string)
{
	return {
		type: 'text',
		text: string
	};
}


function node(tag)
{
	return F2(function(factList, kidList) {
		return nodeHelp(tag, factList, kidList);
	});
}


function nodeHelp(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function keyedNode(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid._1.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'keyed-node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function custom(factList, model, impl)
{
	var facts = organizeFacts(factList).facts;

	return {
		type: 'custom',
		facts: facts,
		model: model,
		impl: impl
	};
}


function map(tagger, node)
{
	return {
		type: 'tagger',
		tagger: tagger,
		node: node,
		descendantsCount: 1 + (node.descendantsCount || 0)
	};
}


function thunk(func, args, thunk)
{
	return {
		type: 'thunk',
		func: func,
		args: args,
		thunk: thunk,
		node: undefined
	};
}

function lazy(fn, a)
{
	return thunk(fn, [a], function() {
		return fn(a);
	});
}

function lazy2(fn, a, b)
{
	return thunk(fn, [a,b], function() {
		return A2(fn, a, b);
	});
}

function lazy3(fn, a, b, c)
{
	return thunk(fn, [a,b,c], function() {
		return A3(fn, a, b, c);
	});
}



// FACTS


function organizeFacts(factList)
{
	var namespace, facts = {};

	while (factList.ctor !== '[]')
	{
		var entry = factList._0;
		var key = entry.key;

		if (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY)
		{
			var subFacts = facts[key] || {};
			subFacts[entry.realKey] = entry.value;
			facts[key] = subFacts;
		}
		else if (key === STYLE_KEY)
		{
			var styles = facts[key] || {};
			var styleList = entry.value;
			while (styleList.ctor !== '[]')
			{
				var style = styleList._0;
				styles[style._0] = style._1;
				styleList = styleList._1;
			}
			facts[key] = styles;
		}
		else if (key === 'namespace')
		{
			namespace = entry.value;
		}
		else if (key === 'className')
		{
			var classes = facts[key];
			facts[key] = typeof classes === 'undefined'
				? entry.value
				: classes + ' ' + entry.value;
		}
 		else
		{
			facts[key] = entry.value;
		}
		factList = factList._1;
	}

	return {
		facts: facts,
		namespace: namespace
	};
}



////////////  PROPERTIES AND ATTRIBUTES  ////////////


function style(value)
{
	return {
		key: STYLE_KEY,
		value: value
	};
}


function property(key, value)
{
	return {
		key: key,
		value: value
	};
}


function attribute(key, value)
{
	return {
		key: ATTR_KEY,
		realKey: key,
		value: value
	};
}


function attributeNS(namespace, key, value)
{
	return {
		key: ATTR_NS_KEY,
		realKey: key,
		value: {
			value: value,
			namespace: namespace
		}
	};
}


function on(name, options, decoder)
{
	return {
		key: EVENT_KEY,
		realKey: name,
		value: {
			options: options,
			decoder: decoder
		}
	};
}


function equalEvents(a, b)
{
	if (a.options !== b.options)
	{
		if (a.options.stopPropagation !== b.options.stopPropagation || a.options.preventDefault !== b.options.preventDefault)
		{
			return false;
		}
	}
	return _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);
}


function mapProperty(func, property)
{
	if (property.key !== EVENT_KEY)
	{
		return property;
	}
	return on(
		property.realKey,
		property.value.options,
		A2(_elm_lang$core$Json_Decode$map, func, property.value.decoder)
	);
}


////////////  RENDER  ////////////


function render(vNode, eventNode)
{
	switch (vNode.type)
	{
		case 'thunk':
			if (!vNode.node)
			{
				vNode.node = vNode.thunk();
			}
			return render(vNode.node, eventNode);

		case 'tagger':
			var subNode = vNode.node;
			var tagger = vNode.tagger;

			while (subNode.type === 'tagger')
			{
				typeof tagger !== 'object'
					? tagger = [tagger, subNode.tagger]
					: tagger.push(subNode.tagger);

				subNode = subNode.node;
			}

			var subEventRoot = { tagger: tagger, parent: eventNode };
			var domNode = render(subNode, subEventRoot);
			domNode.elm_event_node_ref = subEventRoot;
			return domNode;

		case 'text':
			return localDoc.createTextNode(vNode.text);

		case 'node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i], eventNode));
			}

			return domNode;

		case 'keyed-node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i]._1, eventNode));
			}

			return domNode;

		case 'custom':
			var domNode = vNode.impl.render(vNode.model);
			applyFacts(domNode, eventNode, vNode.facts);
			return domNode;
	}
}



////////////  APPLY FACTS  ////////////


function applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		switch (key)
		{
			case STYLE_KEY:
				applyStyles(domNode, value);
				break;

			case EVENT_KEY:
				applyEvents(domNode, eventNode, value);
				break;

			case ATTR_KEY:
				applyAttrs(domNode, value);
				break;

			case ATTR_NS_KEY:
				applyAttrsNS(domNode, value);
				break;

			case 'value':
				if (domNode[key] !== value)
				{
					domNode[key] = value;
				}
				break;

			default:
				domNode[key] = value;
				break;
		}
	}
}

function applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}

function applyEvents(domNode, eventNode, events)
{
	var allHandlers = domNode.elm_handlers || {};

	for (var key in events)
	{
		var handler = allHandlers[key];
		var value = events[key];

		if (typeof value === 'undefined')
		{
			domNode.removeEventListener(key, handler);
			allHandlers[key] = undefined;
		}
		else if (typeof handler === 'undefined')
		{
			var handler = makeEventHandler(eventNode, value);
			domNode.addEventListener(key, handler);
			allHandlers[key] = handler;
		}
		else
		{
			handler.info = value;
		}
	}

	domNode.elm_handlers = allHandlers;
}

function makeEventHandler(eventNode, info)
{
	function eventHandler(event)
	{
		var info = eventHandler.info;

		var value = A2(_elm_lang$core$Native_Json.run, info.decoder, event);

		if (value.ctor === 'Ok')
		{
			var options = info.options;
			if (options.stopPropagation)
			{
				event.stopPropagation();
			}
			if (options.preventDefault)
			{
				event.preventDefault();
			}

			var message = value._0;

			var currentEventNode = eventNode;
			while (currentEventNode)
			{
				var tagger = currentEventNode.tagger;
				if (typeof tagger === 'function')
				{
					message = tagger(message);
				}
				else
				{
					for (var i = tagger.length; i--; )
					{
						message = tagger[i](message);
					}
				}
				currentEventNode = currentEventNode.parent;
			}
		}
	};

	eventHandler.info = info;

	return eventHandler;
}

function applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		if (typeof value === 'undefined')
		{
			domNode.removeAttribute(key);
		}
		else
		{
			domNode.setAttribute(key, value);
		}
	}
}

function applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.namespace;
		var value = pair.value;

		if (typeof value === 'undefined')
		{
			domNode.removeAttributeNS(namespace, key);
		}
		else
		{
			domNode.setAttributeNS(namespace, key, value);
		}
	}
}



////////////  DIFF  ////////////


function diff(a, b)
{
	var patches = [];
	diffHelp(a, b, patches, 0);
	return patches;
}


function makePatch(type, index, data)
{
	return {
		index: index,
		type: type,
		data: data,
		domNode: undefined,
		eventNode: undefined
	};
}


function diffHelp(a, b, patches, index)
{
	if (a === b)
	{
		return;
	}

	var aType = a.type;
	var bType = b.type;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (aType !== bType)
	{
		patches.push(makePatch('p-redraw', index, b));
		return;
	}

	// Now we know that both nodes are the same type.
	switch (bType)
	{
		case 'thunk':
			var aArgs = a.args;
			var bArgs = b.args;
			var i = aArgs.length;
			var same = a.func === b.func && i === bArgs.length;
			while (same && i--)
			{
				same = aArgs[i] === bArgs[i];
			}
			if (same)
			{
				b.node = a.node;
				return;
			}
			b.node = b.thunk();
			var subPatches = [];
			diffHelp(a.node, b.node, subPatches, 0);
			if (subPatches.length > 0)
			{
				patches.push(makePatch('p-thunk', index, subPatches));
			}
			return;

		case 'tagger':
			// gather nested taggers
			var aTaggers = a.tagger;
			var bTaggers = b.tagger;
			var nesting = false;

			var aSubNode = a.node;
			while (aSubNode.type === 'tagger')
			{
				nesting = true;

				typeof aTaggers !== 'object'
					? aTaggers = [aTaggers, aSubNode.tagger]
					: aTaggers.push(aSubNode.tagger);

				aSubNode = aSubNode.node;
			}

			var bSubNode = b.node;
			while (bSubNode.type === 'tagger')
			{
				nesting = true;

				typeof bTaggers !== 'object'
					? bTaggers = [bTaggers, bSubNode.tagger]
					: bTaggers.push(bSubNode.tagger);

				bSubNode = bSubNode.node;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && aTaggers.length !== bTaggers.length)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers)
			{
				patches.push(makePatch('p-tagger', index, bTaggers));
			}

			// diff everything below the taggers
			diffHelp(aSubNode, bSubNode, patches, index + 1);
			return;

		case 'text':
			if (a.text !== b.text)
			{
				patches.push(makePatch('p-text', index, b.text));
				return;
			}

			return;

		case 'node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffChildren(a, b, patches, index);
			return;

		case 'keyed-node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffKeyedChildren(a, b, patches, index);
			return;

		case 'custom':
			if (a.impl !== b.impl)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);
			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			var patch = b.impl.diff(a,b);
			if (patch)
			{
				patches.push(makePatch('p-custom', index, patch));
				return;
			}

			return;
	}
}


// assumes the incoming arrays are the same length
function pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function diffFacts(a, b, category)
{
	var diff;

	// look for changes and removals
	for (var aKey in a)
	{
		if (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY)
		{
			var subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[aKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(aKey in b))
		{
			diff = diff || {};
			diff[aKey] =
				(typeof category === 'undefined')
					? (typeof a[aKey] === 'string' ? '' : null)
					:
				(category === STYLE_KEY)
					? ''
					:
				(category === EVENT_KEY || category === ATTR_KEY)
					? undefined
					:
				{ namespace: a[aKey].namespace, value: undefined };

			continue;
		}

		var aValue = a[aKey];
		var bValue = b[aKey];

		// reference equal, so don't worry about it
		if (aValue === bValue && aKey !== 'value'
			|| category === EVENT_KEY && equalEvents(aValue, bValue))
		{
			continue;
		}

		diff = diff || {};
		diff[aKey] = bValue;
	}

	// add new stuff
	for (var bKey in b)
	{
		if (!(bKey in a))
		{
			diff = diff || {};
			diff[bKey] = b[bKey];
		}
	}

	return diff;
}


function diffChildren(aParent, bParent, patches, rootIndex)
{
	var aChildren = aParent.children;
	var bChildren = bParent.children;

	var aLen = aChildren.length;
	var bLen = bChildren.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (aLen > bLen)
	{
		patches.push(makePatch('p-remove-last', rootIndex, aLen - bLen));
	}
	else if (aLen < bLen)
	{
		patches.push(makePatch('p-append', rootIndex, bChildren.slice(aLen)));
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	var index = rootIndex;
	var minLen = aLen < bLen ? aLen : bLen;
	for (var i = 0; i < minLen; i++)
	{
		index++;
		var aChild = aChildren[i];
		diffHelp(aChild, bChildren[i], patches, index);
		index += aChild.descendantsCount || 0;
	}
}



////////////  KEYED DIFF  ////////////


function diffKeyedChildren(aParent, bParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var aChildren = aParent.children;
	var bChildren = bParent.children;
	var aLen = aChildren.length;
	var bLen = bChildren.length;
	var aIndex = 0;
	var bIndex = 0;

	var index = rootIndex;

	while (aIndex < aLen && bIndex < bLen)
	{
		var a = aChildren[aIndex];
		var b = bChildren[bIndex];

		var aKey = a._0;
		var bKey = b._0;
		var aNode = a._1;
		var bNode = b._1;

		// check if keys match

		if (aKey === bKey)
		{
			index++;
			diffHelp(aNode, bNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex++;
			bIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var aLookAhead = aIndex + 1 < aLen;
		var bLookAhead = bIndex + 1 < bLen;

		if (aLookAhead)
		{
			var aNext = aChildren[aIndex + 1];
			var aNextKey = aNext._0;
			var aNextNode = aNext._1;
			var oldMatch = bKey === aNextKey;
		}

		if (bLookAhead)
		{
			var bNext = bChildren[bIndex + 1];
			var bNextKey = bNext._0;
			var bNextNode = bNext._1;
			var newMatch = aKey === bNextKey;
		}


		// swap a and b
		if (aLookAhead && bLookAhead && newMatch && oldMatch)
		{
			index++;
			diffHelp(aNode, bNextNode, localPatches, index);
			insertNode(changes, localPatches, aKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			removeNode(changes, localPatches, aKey, aNextNode, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		// insert b
		if (bLookAhead && newMatch)
		{
			index++;
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			diffHelp(aNode, bNextNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex += 1;
			bIndex += 2;
			continue;
		}

		// remove a
		if (aLookAhead && oldMatch)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 1;
			continue;
		}

		// remove a, insert b
		if (aLookAhead && bLookAhead && aNextKey === bNextKey)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNextNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (aIndex < aLen)
	{
		index++;
		var a = aChildren[aIndex];
		var aNode = a._1;
		removeNode(changes, localPatches, a._0, aNode, index);
		index += aNode.descendantsCount || 0;
		aIndex++;
	}

	var endInserts;
	while (bIndex < bLen)
	{
		endInserts = endInserts || [];
		var b = bChildren[bIndex];
		insertNode(changes, localPatches, b._0, b._1, undefined, endInserts);
		bIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== 'undefined')
	{
		patches.push(makePatch('p-reorder', rootIndex, {
			patches: localPatches,
			inserts: inserts,
			endInserts: endInserts
		}));
	}
}



////////////  CHANGES FROM KEYED DIFF  ////////////


var POSTFIX = '_elmW6BL';


function insertNode(changes, localPatches, key, vnode, bIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		entry = {
			tag: 'insert',
			vnode: vnode,
			index: bIndex,
			data: undefined
		};

		inserts.push({ index: bIndex, entry: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.tag === 'remove')
	{
		inserts.push({ index: bIndex, entry: entry });

		entry.tag = 'move';
		var subPatches = [];
		diffHelp(entry.vnode, vnode, subPatches, entry.index);
		entry.index = bIndex;
		entry.data.data = {
			patches: subPatches,
			entry: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	insertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);
}


function removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		var patch = makePatch('p-remove', index, undefined);
		localPatches.push(patch);

		changes[key] = {
			tag: 'remove',
			vnode: vnode,
			index: index,
			data: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.tag === 'insert')
	{
		entry.tag = 'move';
		var subPatches = [];
		diffHelp(vnode, entry.vnode, subPatches, index);

		var patch = makePatch('p-remove', index, {
			patches: subPatches,
			entry: entry
		});
		localPatches.push(patch);

		return;
	}

	// this key has already been removed or moved, a duplicate!
	removeNode(changes, localPatches, key + POSTFIX, vnode, index);
}



////////////  ADD DOM NODES  ////////////
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function addDomNodes(domNode, vNode, patches, eventNode)
{
	addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.index;

	while (index === low)
	{
		var patchType = patch.type;

		if (patchType === 'p-thunk')
		{
			addDomNodes(domNode, vNode.node, patch.data, eventNode);
		}
		else if (patchType === 'p-reorder')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var subPatches = patch.data.patches;
			if (subPatches.length > 0)
			{
				addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 'p-remove')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var data = patch.data;
			if (typeof data !== 'undefined')
			{
				data.entry.data = domNode;
				var subPatches = data.patches;
				if (subPatches.length > 0)
				{
					addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.index) > high)
		{
			return i;
		}
	}

	switch (vNode.type)
	{
		case 'tagger':
			var subNode = vNode.node;

			while (subNode.type === "tagger")
			{
				subNode = subNode.node;
			}

			return addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);

		case 'node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j];
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'keyed-node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j]._1;
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'text':
		case 'thunk':
			throw new Error('should never traverse `text` or `thunk` nodes like this');
	}
}



////////////  APPLY PATCHES  ////////////


function applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return applyPatchesHelp(rootDomNode, patches);
}

function applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.domNode
		var newNode = applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function applyPatch(domNode, patch)
{
	switch (patch.type)
	{
		case 'p-redraw':
			return applyPatchRedraw(domNode, patch.data, patch.eventNode);

		case 'p-facts':
			applyFacts(domNode, patch.eventNode, patch.data);
			return domNode;

		case 'p-text':
			domNode.replaceData(0, domNode.length, patch.data);
			return domNode;

		case 'p-thunk':
			return applyPatchesHelp(domNode, patch.data);

		case 'p-tagger':
			if (typeof domNode.elm_event_node_ref !== 'undefined')
			{
				domNode.elm_event_node_ref.tagger = patch.data;
			}
			else
			{
				domNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };
			}
			return domNode;

		case 'p-remove-last':
			var i = patch.data;
			while (i--)
			{
				domNode.removeChild(domNode.lastChild);
			}
			return domNode;

		case 'p-append':
			var newNodes = patch.data;
			for (var i = 0; i < newNodes.length; i++)
			{
				domNode.appendChild(render(newNodes[i], patch.eventNode));
			}
			return domNode;

		case 'p-remove':
			var data = patch.data;
			if (typeof data === 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.entry;
			if (typeof entry.index !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.data = applyPatchesHelp(domNode, data.patches);
			return domNode;

		case 'p-reorder':
			return applyPatchReorder(domNode, patch);

		case 'p-custom':
			var impl = patch.data;
			return impl.applyPatch(domNode, impl.data);

		default:
			throw new Error('Ran into an unknown patch!');
	}
}


function applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = render(vNode, eventNode);

	if (typeof newNode.elm_event_node_ref === 'undefined')
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function applyPatchReorder(domNode, patch)
{
	var data = patch.data;

	// remove end inserts
	var frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);

	// removals
	domNode = applyPatchesHelp(domNode, data.patches);

	// inserts
	var inserts = data.inserts;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.entry;
		var node = entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode);
		domNode.insertBefore(node, domNode.childNodes[insert.index]);
	}

	// add end inserts
	if (typeof frag !== 'undefined')
	{
		domNode.appendChild(frag);
	}

	return domNode;
}


function applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (typeof endInserts === 'undefined')
	{
		return;
	}

	var frag = localDoc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.entry;
		frag.appendChild(entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode)
		);
	}
	return frag;
}


// PROGRAMS

var program = makeProgram(checkNoFlags);
var programWithFlags = makeProgram(checkYesFlags);

function makeProgram(flagChecker)
{
	return F2(function(debugWrap, impl)
	{
		return function(flagDecoder)
		{
			return function(object, moduleName, debugMetadata)
			{
				var checker = flagChecker(flagDecoder, moduleName);
				if (typeof debugMetadata === 'undefined')
				{
					normalSetup(impl, object, moduleName, checker);
				}
				else
				{
					debugSetup(A2(debugWrap, debugMetadata, impl), object, moduleName, checker);
				}
			};
		};
	});
}

function staticProgram(vNode)
{
	var nothing = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		_elm_lang$core$Platform_Cmd$none
	);
	return A2(program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, {
		init: nothing,
		view: function() { return vNode; },
		update: F2(function() { return nothing; }),
		subscriptions: function() { return _elm_lang$core$Platform_Sub$none; }
	})();
}


// FLAG CHECKERS

function checkNoFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flags === 'undefined')
		{
			return init;
		}

		var errorMessage =
			'The `' + moduleName + '` module does not need flags.\n'
			+ 'Initialize it with no arguments and you should be all set!';

		crash(errorMessage, domNode);
	};
}

function checkYesFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flagDecoder === 'undefined')
		{
			var errorMessage =
				'Are you trying to sneak a Never value into Elm? Trickster!\n'
				+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
				+ 'Use `program` instead if you do not want flags.'

			crash(errorMessage, domNode);
		}

		var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
		if (result.ctor === 'Ok')
		{
			return init(result._0);
		}

		var errorMessage =
			'Trying to initialize the `' + moduleName + '` module with an unexpected flag.\n'
			+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
			+ result._0;

		crash(errorMessage, domNode);
	};
}

function crash(errorMessage, domNode)
{
	if (domNode)
	{
		domNode.innerHTML =
			'<div style="padding-left:1em;">'
			+ '<h2 style="font-weight:normal;"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>'
			+ '<pre style="padding-left:1em;">' + errorMessage + '</pre>'
			+ '</div>';
	}

	throw new Error(errorMessage);
}


//  NORMAL SETUP

function normalSetup(impl, object, moduleName, flagChecker)
{
	object['embed'] = function embed(node, flags)
	{
		while (node.lastChild)
		{
			node.removeChild(node.lastChild);
		}

		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update,
			impl.subscriptions,
			normalRenderer(node, impl.view)
		);
	};

	object['fullscreen'] = function fullscreen(flags)
	{
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update,
			impl.subscriptions,
			normalRenderer(document.body, impl.view)
		);
	};
}

function normalRenderer(parentNode, view)
{
	return function(tagger, initialModel)
	{
		var eventNode = { tagger: tagger, parent: undefined };
		var initialVirtualNode = view(initialModel);
		var domNode = render(initialVirtualNode, eventNode);
		parentNode.appendChild(domNode);
		return makeStepper(domNode, view, initialVirtualNode, eventNode);
	};
}


// STEPPER

var rAF =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { setTimeout(callback, 1000 / 60); };

function makeStepper(domNode, view, initialVirtualNode, eventNode)
{
	var state = 'NO_REQUEST';
	var currNode = initialVirtualNode;
	var nextModel;

	function updateIfNeeded()
	{
		switch (state)
		{
			case 'NO_REQUEST':
				throw new Error(
					'Unexpected draw callback.\n' +
					'Please report this to <https://github.com/elm-lang/virtual-dom/issues>.'
				);

			case 'PENDING_REQUEST':
				rAF(updateIfNeeded);
				state = 'EXTRA_REQUEST';

				var nextNode = view(nextModel);
				var patches = diff(currNode, nextNode);
				domNode = applyPatches(domNode, currNode, patches, eventNode);
				currNode = nextNode;

				return;

			case 'EXTRA_REQUEST':
				state = 'NO_REQUEST';
				return;
		}
	}

	return function stepper(model)
	{
		if (state === 'NO_REQUEST')
		{
			rAF(updateIfNeeded);
		}
		state = 'PENDING_REQUEST';
		nextModel = model;
	};
}


// DEBUG SETUP

function debugSetup(impl, object, moduleName, flagChecker)
{
	object['fullscreen'] = function fullscreen(flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, document.body, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};

	object['embed'] = function fullscreen(node, flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, node, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};
}

function scrollTask(popoutRef)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var doc = popoutRef.doc;
		if (doc)
		{
			var msgs = doc.getElementsByClassName('debugger-sidebar-messages')[0];
			if (msgs)
			{
				msgs.scrollTop = msgs.scrollHeight;
			}
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


function debugRenderer(moduleName, parentNode, popoutRef, view, viewIn, viewOut)
{
	return function(tagger, initialModel)
	{
		var appEventNode = { tagger: tagger, parent: undefined };
		var eventNode = { tagger: tagger, parent: undefined };

		// make normal stepper
		var appVirtualNode = view(initialModel);
		var appNode = render(appVirtualNode, appEventNode);
		parentNode.appendChild(appNode);
		var appStepper = makeStepper(appNode, view, appVirtualNode, appEventNode);

		// make overlay stepper
		var overVirtualNode = viewIn(initialModel)._1;
		var overNode = render(overVirtualNode, eventNode);
		parentNode.appendChild(overNode);
		var wrappedViewIn = wrapViewIn(appEventNode, overNode, viewIn);
		var overStepper = makeStepper(overNode, wrappedViewIn, overVirtualNode, eventNode);

		// make debugger stepper
		var debugStepper = makeDebugStepper(initialModel, viewOut, eventNode, parentNode, moduleName, popoutRef);

		return function stepper(model)
		{
			appStepper(model);
			overStepper(model);
			debugStepper(model);
		}
	};
}

function makeDebugStepper(initialModel, view, eventNode, parentNode, moduleName, popoutRef)
{
	var curr;
	var domNode;

	return function stepper(model)
	{
		if (!model.isDebuggerOpen)
		{
			return;
		}

		if (!popoutRef.doc)
		{
			curr = view(model);
			domNode = openDebugWindow(moduleName, popoutRef, curr, eventNode);
			return;
		}

		// switch to document of popout
		localDoc = popoutRef.doc;

		var next = view(model);
		var patches = diff(curr, next);
		domNode = applyPatches(domNode, curr, patches, eventNode);
		curr = next;

		// switch back to normal document
		localDoc = document;
	};
}

function openDebugWindow(moduleName, popoutRef, virtualNode, eventNode)
{
	var w = 900;
	var h = 360;
	var x = screen.width - w;
	var y = screen.height - h;
	var debugWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);

	// switch to window document
	localDoc = debugWindow.document;

	popoutRef.doc = localDoc;
	localDoc.title = 'Debugger - ' + moduleName;
	localDoc.body.style.margin = '0';
	localDoc.body.style.padding = '0';
	var domNode = render(virtualNode, eventNode);
	localDoc.body.appendChild(domNode);

	localDoc.addEventListener('keydown', function(event) {
		if (event.metaKey && event.which === 82)
		{
			window.location.reload();
		}
		if (event.which === 38)
		{
			eventNode.tagger({ ctor: 'Up' });
			event.preventDefault();
		}
		if (event.which === 40)
		{
			eventNode.tagger({ ctor: 'Down' });
			event.preventDefault();
		}
	});

	function close()
	{
		popoutRef.doc = undefined;
		debugWindow.close();
	}
	window.addEventListener('unload', close);
	debugWindow.addEventListener('unload', function() {
		popoutRef.doc = undefined;
		window.removeEventListener('unload', close);
		eventNode.tagger({ ctor: 'Close' });
	});

	// switch back to the normal document
	localDoc = document;

	return domNode;
}


// BLOCK EVENTS

function wrapViewIn(appEventNode, overlayNode, viewIn)
{
	var ignorer = makeIgnorer(overlayNode);
	var blocking = 'Normal';
	var overflow;

	var normalTagger = appEventNode.tagger;
	var blockTagger = function() {};

	return function(model)
	{
		var tuple = viewIn(model);
		var newBlocking = tuple._0.ctor;
		appEventNode.tagger = newBlocking === 'Normal' ? normalTagger : blockTagger;
		if (blocking !== newBlocking)
		{
			traverse('removeEventListener', ignorer, blocking);
			traverse('addEventListener', ignorer, newBlocking);

			if (blocking === 'Normal')
			{
				overflow = document.body.style.overflow;
				document.body.style.overflow = 'hidden';
			}

			if (newBlocking === 'Normal')
			{
				document.body.style.overflow = overflow;
			}

			blocking = newBlocking;
		}
		return tuple._1;
	}
}

function traverse(verbEventListener, ignorer, blocking)
{
	switch(blocking)
	{
		case 'Normal':
			return;

		case 'Pause':
			return traverseHelp(verbEventListener, ignorer, mostEvents);

		case 'Message':
			return traverseHelp(verbEventListener, ignorer, allEvents);
	}
}

function traverseHelp(verbEventListener, handler, eventNames)
{
	for (var i = 0; i < eventNames.length; i++)
	{
		document.body[verbEventListener](eventNames[i], handler, true);
	}
}

function makeIgnorer(overlayNode)
{
	return function(event)
	{
		if (event.type === 'keydown' && event.metaKey && event.which === 82)
		{
			return;
		}

		var isScroll = event.type === 'scroll' || event.type === 'wheel';

		var node = event.target;
		while (node !== null)
		{
			if (node.className === 'elm-overlay-message-details' && isScroll)
			{
				return;
			}

			if (node === overlayNode && !isScroll)
			{
				return;
			}
			node = node.parentNode;
		}

		event.stopPropagation();
		event.preventDefault();
	}
}

var mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var allEvents = mostEvents.concat('wheel', 'scroll');


return {
	node: node,
	text: text,
	custom: custom,
	map: F2(map),

	on: F3(on),
	style: style,
	property: F2(property),
	attribute: F2(attribute),
	attributeNS: F3(attributeNS),
	mapProperty: F2(mapProperty),

	lazy: F2(lazy),
	lazy2: F3(lazy2),
	lazy3: F4(lazy3),
	keyedNode: F3(keyedNode),

	program: program,
	programWithFlags: programWithFlags,
	staticProgram: staticProgram
};

}();

var _elm_lang$virtual_dom$VirtualDom$programWithFlags = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.programWithFlags, _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags, impl);
};
var _elm_lang$virtual_dom$VirtualDom$program = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, impl);
};
var _elm_lang$virtual_dom$VirtualDom$keyedNode = _elm_lang$virtual_dom$Native_VirtualDom.keyedNode;
var _elm_lang$virtual_dom$VirtualDom$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;
var _elm_lang$virtual_dom$VirtualDom$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;
var _elm_lang$virtual_dom$VirtualDom$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;
var _elm_lang$virtual_dom$VirtualDom$defaultOptions = {stopPropagation: false, preventDefault: false};
var _elm_lang$virtual_dom$VirtualDom$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;
var _elm_lang$virtual_dom$VirtualDom$on = F2(
	function (eventName, decoder) {
		return A3(_elm_lang$virtual_dom$VirtualDom$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom$defaultOptions, decoder);
	});
var _elm_lang$virtual_dom$VirtualDom$style = _elm_lang$virtual_dom$Native_VirtualDom.style;
var _elm_lang$virtual_dom$VirtualDom$mapProperty = _elm_lang$virtual_dom$Native_VirtualDom.mapProperty;
var _elm_lang$virtual_dom$VirtualDom$attributeNS = _elm_lang$virtual_dom$Native_VirtualDom.attributeNS;
var _elm_lang$virtual_dom$VirtualDom$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;
var _elm_lang$virtual_dom$VirtualDom$property = _elm_lang$virtual_dom$Native_VirtualDom.property;
var _elm_lang$virtual_dom$VirtualDom$map = _elm_lang$virtual_dom$Native_VirtualDom.map;
var _elm_lang$virtual_dom$VirtualDom$text = _elm_lang$virtual_dom$Native_VirtualDom.text;
var _elm_lang$virtual_dom$VirtualDom$node = _elm_lang$virtual_dom$Native_VirtualDom.node;
var _elm_lang$virtual_dom$VirtualDom$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});
var _elm_lang$virtual_dom$VirtualDom$Node = {ctor: 'Node'};
var _elm_lang$virtual_dom$VirtualDom$Property = {ctor: 'Property'};

var _elm_lang$html$Html$programWithFlags = _elm_lang$virtual_dom$VirtualDom$programWithFlags;
var _elm_lang$html$Html$program = _elm_lang$virtual_dom$VirtualDom$program;
var _elm_lang$html$Html$beginnerProgram = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$html$Html$program(
		{
			init: A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_p1.model,
				{ctor: '[]'}),
			update: F2(
				function (msg, model) {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						A2(_p1.update, msg, model),
						{ctor: '[]'});
				}),
			view: _p1.view,
			subscriptions: function (_p2) {
				return _elm_lang$core$Platform_Sub$none;
			}
		});
};
var _elm_lang$html$Html$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$html$Html$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$html$Html$node = _elm_lang$virtual_dom$VirtualDom$node;
var _elm_lang$html$Html$body = _elm_lang$html$Html$node('body');
var _elm_lang$html$Html$section = _elm_lang$html$Html$node('section');
var _elm_lang$html$Html$nav = _elm_lang$html$Html$node('nav');
var _elm_lang$html$Html$article = _elm_lang$html$Html$node('article');
var _elm_lang$html$Html$aside = _elm_lang$html$Html$node('aside');
var _elm_lang$html$Html$h1 = _elm_lang$html$Html$node('h1');
var _elm_lang$html$Html$h2 = _elm_lang$html$Html$node('h2');
var _elm_lang$html$Html$h3 = _elm_lang$html$Html$node('h3');
var _elm_lang$html$Html$h4 = _elm_lang$html$Html$node('h4');
var _elm_lang$html$Html$h5 = _elm_lang$html$Html$node('h5');
var _elm_lang$html$Html$h6 = _elm_lang$html$Html$node('h6');
var _elm_lang$html$Html$header = _elm_lang$html$Html$node('header');
var _elm_lang$html$Html$footer = _elm_lang$html$Html$node('footer');
var _elm_lang$html$Html$address = _elm_lang$html$Html$node('address');
var _elm_lang$html$Html$main_ = _elm_lang$html$Html$node('main');
var _elm_lang$html$Html$p = _elm_lang$html$Html$node('p');
var _elm_lang$html$Html$hr = _elm_lang$html$Html$node('hr');
var _elm_lang$html$Html$pre = _elm_lang$html$Html$node('pre');
var _elm_lang$html$Html$blockquote = _elm_lang$html$Html$node('blockquote');
var _elm_lang$html$Html$ol = _elm_lang$html$Html$node('ol');
var _elm_lang$html$Html$ul = _elm_lang$html$Html$node('ul');
var _elm_lang$html$Html$li = _elm_lang$html$Html$node('li');
var _elm_lang$html$Html$dl = _elm_lang$html$Html$node('dl');
var _elm_lang$html$Html$dt = _elm_lang$html$Html$node('dt');
var _elm_lang$html$Html$dd = _elm_lang$html$Html$node('dd');
var _elm_lang$html$Html$figure = _elm_lang$html$Html$node('figure');
var _elm_lang$html$Html$figcaption = _elm_lang$html$Html$node('figcaption');
var _elm_lang$html$Html$div = _elm_lang$html$Html$node('div');
var _elm_lang$html$Html$a = _elm_lang$html$Html$node('a');
var _elm_lang$html$Html$em = _elm_lang$html$Html$node('em');
var _elm_lang$html$Html$strong = _elm_lang$html$Html$node('strong');
var _elm_lang$html$Html$small = _elm_lang$html$Html$node('small');
var _elm_lang$html$Html$s = _elm_lang$html$Html$node('s');
var _elm_lang$html$Html$cite = _elm_lang$html$Html$node('cite');
var _elm_lang$html$Html$q = _elm_lang$html$Html$node('q');
var _elm_lang$html$Html$dfn = _elm_lang$html$Html$node('dfn');
var _elm_lang$html$Html$abbr = _elm_lang$html$Html$node('abbr');
var _elm_lang$html$Html$time = _elm_lang$html$Html$node('time');
var _elm_lang$html$Html$code = _elm_lang$html$Html$node('code');
var _elm_lang$html$Html$var = _elm_lang$html$Html$node('var');
var _elm_lang$html$Html$samp = _elm_lang$html$Html$node('samp');
var _elm_lang$html$Html$kbd = _elm_lang$html$Html$node('kbd');
var _elm_lang$html$Html$sub = _elm_lang$html$Html$node('sub');
var _elm_lang$html$Html$sup = _elm_lang$html$Html$node('sup');
var _elm_lang$html$Html$i = _elm_lang$html$Html$node('i');
var _elm_lang$html$Html$b = _elm_lang$html$Html$node('b');
var _elm_lang$html$Html$u = _elm_lang$html$Html$node('u');
var _elm_lang$html$Html$mark = _elm_lang$html$Html$node('mark');
var _elm_lang$html$Html$ruby = _elm_lang$html$Html$node('ruby');
var _elm_lang$html$Html$rt = _elm_lang$html$Html$node('rt');
var _elm_lang$html$Html$rp = _elm_lang$html$Html$node('rp');
var _elm_lang$html$Html$bdi = _elm_lang$html$Html$node('bdi');
var _elm_lang$html$Html$bdo = _elm_lang$html$Html$node('bdo');
var _elm_lang$html$Html$span = _elm_lang$html$Html$node('span');
var _elm_lang$html$Html$br = _elm_lang$html$Html$node('br');
var _elm_lang$html$Html$wbr = _elm_lang$html$Html$node('wbr');
var _elm_lang$html$Html$ins = _elm_lang$html$Html$node('ins');
var _elm_lang$html$Html$del = _elm_lang$html$Html$node('del');
var _elm_lang$html$Html$img = _elm_lang$html$Html$node('img');
var _elm_lang$html$Html$iframe = _elm_lang$html$Html$node('iframe');
var _elm_lang$html$Html$embed = _elm_lang$html$Html$node('embed');
var _elm_lang$html$Html$object = _elm_lang$html$Html$node('object');
var _elm_lang$html$Html$param = _elm_lang$html$Html$node('param');
var _elm_lang$html$Html$video = _elm_lang$html$Html$node('video');
var _elm_lang$html$Html$audio = _elm_lang$html$Html$node('audio');
var _elm_lang$html$Html$source = _elm_lang$html$Html$node('source');
var _elm_lang$html$Html$track = _elm_lang$html$Html$node('track');
var _elm_lang$html$Html$canvas = _elm_lang$html$Html$node('canvas');
var _elm_lang$html$Html$math = _elm_lang$html$Html$node('math');
var _elm_lang$html$Html$table = _elm_lang$html$Html$node('table');
var _elm_lang$html$Html$caption = _elm_lang$html$Html$node('caption');
var _elm_lang$html$Html$colgroup = _elm_lang$html$Html$node('colgroup');
var _elm_lang$html$Html$col = _elm_lang$html$Html$node('col');
var _elm_lang$html$Html$tbody = _elm_lang$html$Html$node('tbody');
var _elm_lang$html$Html$thead = _elm_lang$html$Html$node('thead');
var _elm_lang$html$Html$tfoot = _elm_lang$html$Html$node('tfoot');
var _elm_lang$html$Html$tr = _elm_lang$html$Html$node('tr');
var _elm_lang$html$Html$td = _elm_lang$html$Html$node('td');
var _elm_lang$html$Html$th = _elm_lang$html$Html$node('th');
var _elm_lang$html$Html$form = _elm_lang$html$Html$node('form');
var _elm_lang$html$Html$fieldset = _elm_lang$html$Html$node('fieldset');
var _elm_lang$html$Html$legend = _elm_lang$html$Html$node('legend');
var _elm_lang$html$Html$label = _elm_lang$html$Html$node('label');
var _elm_lang$html$Html$input = _elm_lang$html$Html$node('input');
var _elm_lang$html$Html$button = _elm_lang$html$Html$node('button');
var _elm_lang$html$Html$select = _elm_lang$html$Html$node('select');
var _elm_lang$html$Html$datalist = _elm_lang$html$Html$node('datalist');
var _elm_lang$html$Html$optgroup = _elm_lang$html$Html$node('optgroup');
var _elm_lang$html$Html$option = _elm_lang$html$Html$node('option');
var _elm_lang$html$Html$textarea = _elm_lang$html$Html$node('textarea');
var _elm_lang$html$Html$keygen = _elm_lang$html$Html$node('keygen');
var _elm_lang$html$Html$output = _elm_lang$html$Html$node('output');
var _elm_lang$html$Html$progress = _elm_lang$html$Html$node('progress');
var _elm_lang$html$Html$meter = _elm_lang$html$Html$node('meter');
var _elm_lang$html$Html$details = _elm_lang$html$Html$node('details');
var _elm_lang$html$Html$summary = _elm_lang$html$Html$node('summary');
var _elm_lang$html$Html$menuitem = _elm_lang$html$Html$node('menuitem');
var _elm_lang$html$Html$menu = _elm_lang$html$Html$node('menu');

var _elm_lang$html$Html_Attributes$map = _elm_lang$virtual_dom$VirtualDom$mapProperty;
var _elm_lang$html$Html_Attributes$attribute = _elm_lang$virtual_dom$VirtualDom$attribute;
var _elm_lang$html$Html_Attributes$contextmenu = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'contextmenu', value);
};
var _elm_lang$html$Html_Attributes$draggable = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'draggable', value);
};
var _elm_lang$html$Html_Attributes$itemprop = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'itemprop', value);
};
var _elm_lang$html$Html_Attributes$tabindex = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'tabIndex',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$charset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'charset', value);
};
var _elm_lang$html$Html_Attributes$height = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'height',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$width = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'width',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$formaction = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'formAction', value);
};
var _elm_lang$html$Html_Attributes$list = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'list', value);
};
var _elm_lang$html$Html_Attributes$minlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'minLength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$maxlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'maxlength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$size = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'size',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$form = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'form', value);
};
var _elm_lang$html$Html_Attributes$cols = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'cols',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rows = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rows',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$challenge = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'challenge', value);
};
var _elm_lang$html$Html_Attributes$media = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'media', value);
};
var _elm_lang$html$Html_Attributes$rel = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'rel', value);
};
var _elm_lang$html$Html_Attributes$datetime = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'datetime', value);
};
var _elm_lang$html$Html_Attributes$pubdate = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'pubdate', value);
};
var _elm_lang$html$Html_Attributes$colspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'colspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rowspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rowspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$manifest = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'manifest', value);
};
var _elm_lang$html$Html_Attributes$property = _elm_lang$virtual_dom$VirtualDom$property;
var _elm_lang$html$Html_Attributes$stringProperty = F2(
	function (name, string) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$string(string));
	});
var _elm_lang$html$Html_Attributes$class = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'className', name);
};
var _elm_lang$html$Html_Attributes$id = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'id', name);
};
var _elm_lang$html$Html_Attributes$title = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'title', name);
};
var _elm_lang$html$Html_Attributes$accesskey = function ($char) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'accessKey',
		_elm_lang$core$String$fromChar($char));
};
var _elm_lang$html$Html_Attributes$dir = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dir', value);
};
var _elm_lang$html$Html_Attributes$dropzone = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dropzone', value);
};
var _elm_lang$html$Html_Attributes$lang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'lang', value);
};
var _elm_lang$html$Html_Attributes$content = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'content', value);
};
var _elm_lang$html$Html_Attributes$httpEquiv = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'httpEquiv', value);
};
var _elm_lang$html$Html_Attributes$language = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'language', value);
};
var _elm_lang$html$Html_Attributes$src = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'src', value);
};
var _elm_lang$html$Html_Attributes$alt = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'alt', value);
};
var _elm_lang$html$Html_Attributes$preload = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'preload', value);
};
var _elm_lang$html$Html_Attributes$poster = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'poster', value);
};
var _elm_lang$html$Html_Attributes$kind = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'kind', value);
};
var _elm_lang$html$Html_Attributes$srclang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srclang', value);
};
var _elm_lang$html$Html_Attributes$sandbox = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'sandbox', value);
};
var _elm_lang$html$Html_Attributes$srcdoc = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srcdoc', value);
};
var _elm_lang$html$Html_Attributes$type_ = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'type', value);
};
var _elm_lang$html$Html_Attributes$value = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'value', value);
};
var _elm_lang$html$Html_Attributes$defaultValue = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'defaultValue', value);
};
var _elm_lang$html$Html_Attributes$placeholder = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'placeholder', value);
};
var _elm_lang$html$Html_Attributes$accept = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'accept', value);
};
var _elm_lang$html$Html_Attributes$acceptCharset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'acceptCharset', value);
};
var _elm_lang$html$Html_Attributes$action = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'action', value);
};
var _elm_lang$html$Html_Attributes$autocomplete = function (bool) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'autocomplete',
		bool ? 'on' : 'off');
};
var _elm_lang$html$Html_Attributes$enctype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'enctype', value);
};
var _elm_lang$html$Html_Attributes$method = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'method', value);
};
var _elm_lang$html$Html_Attributes$name = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'name', value);
};
var _elm_lang$html$Html_Attributes$pattern = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'pattern', value);
};
var _elm_lang$html$Html_Attributes$for = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'htmlFor', value);
};
var _elm_lang$html$Html_Attributes$max = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'max', value);
};
var _elm_lang$html$Html_Attributes$min = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'min', value);
};
var _elm_lang$html$Html_Attributes$step = function (n) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'step', n);
};
var _elm_lang$html$Html_Attributes$wrap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'wrap', value);
};
var _elm_lang$html$Html_Attributes$usemap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'useMap', value);
};
var _elm_lang$html$Html_Attributes$shape = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'shape', value);
};
var _elm_lang$html$Html_Attributes$coords = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'coords', value);
};
var _elm_lang$html$Html_Attributes$keytype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'keytype', value);
};
var _elm_lang$html$Html_Attributes$align = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'align', value);
};
var _elm_lang$html$Html_Attributes$cite = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'cite', value);
};
var _elm_lang$html$Html_Attributes$href = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'href', value);
};
var _elm_lang$html$Html_Attributes$target = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'target', value);
};
var _elm_lang$html$Html_Attributes$downloadAs = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'download', value);
};
var _elm_lang$html$Html_Attributes$hreflang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'hreflang', value);
};
var _elm_lang$html$Html_Attributes$ping = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'ping', value);
};
var _elm_lang$html$Html_Attributes$start = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'start',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$headers = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'headers', value);
};
var _elm_lang$html$Html_Attributes$scope = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'scope', value);
};
var _elm_lang$html$Html_Attributes$boolProperty = F2(
	function (name, bool) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$bool(bool));
	});
var _elm_lang$html$Html_Attributes$hidden = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'hidden', bool);
};
var _elm_lang$html$Html_Attributes$contenteditable = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'contentEditable', bool);
};
var _elm_lang$html$Html_Attributes$spellcheck = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'spellcheck', bool);
};
var _elm_lang$html$Html_Attributes$async = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'async', bool);
};
var _elm_lang$html$Html_Attributes$defer = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'defer', bool);
};
var _elm_lang$html$Html_Attributes$scoped = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'scoped', bool);
};
var _elm_lang$html$Html_Attributes$autoplay = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autoplay', bool);
};
var _elm_lang$html$Html_Attributes$controls = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'controls', bool);
};
var _elm_lang$html$Html_Attributes$loop = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'loop', bool);
};
var _elm_lang$html$Html_Attributes$default = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'default', bool);
};
var _elm_lang$html$Html_Attributes$seamless = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'seamless', bool);
};
var _elm_lang$html$Html_Attributes$checked = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'checked', bool);
};
var _elm_lang$html$Html_Attributes$selected = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'selected', bool);
};
var _elm_lang$html$Html_Attributes$autofocus = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autofocus', bool);
};
var _elm_lang$html$Html_Attributes$disabled = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'disabled', bool);
};
var _elm_lang$html$Html_Attributes$multiple = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'multiple', bool);
};
var _elm_lang$html$Html_Attributes$novalidate = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'noValidate', bool);
};
var _elm_lang$html$Html_Attributes$readonly = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'readOnly', bool);
};
var _elm_lang$html$Html_Attributes$required = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'required', bool);
};
var _elm_lang$html$Html_Attributes$ismap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'isMap', value);
};
var _elm_lang$html$Html_Attributes$download = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'download', bool);
};
var _elm_lang$html$Html_Attributes$reversed = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'reversed', bool);
};
var _elm_lang$html$Html_Attributes$classList = function (list) {
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$second, list))));
};
var _elm_lang$html$Html_Attributes$style = _elm_lang$virtual_dom$VirtualDom$style;

var _elm_lang$html$Html_Events$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$html$Html_Events$targetChecked = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'checked',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$bool);
var _elm_lang$html$Html_Events$targetValue = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'value',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$string);
var _elm_lang$html$Html_Events$defaultOptions = _elm_lang$virtual_dom$VirtualDom$defaultOptions;
var _elm_lang$html$Html_Events$onWithOptions = _elm_lang$virtual_dom$VirtualDom$onWithOptions;
var _elm_lang$html$Html_Events$on = _elm_lang$virtual_dom$VirtualDom$on;
var _elm_lang$html$Html_Events$onFocus = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'focus',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onBlur = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'blur',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onSubmitOptions = _elm_lang$core$Native_Utils.update(
	_elm_lang$html$Html_Events$defaultOptions,
	{preventDefault: true});
var _elm_lang$html$Html_Events$onSubmit = function (msg) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'submit',
		_elm_lang$html$Html_Events$onSubmitOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onCheck = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetChecked));
};
var _elm_lang$html$Html_Events$onInput = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'input',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetValue));
};
var _elm_lang$html$Html_Events$onMouseOut = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseout',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseOver = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseover',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseLeave = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseleave',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseEnter = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseenter',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseUp = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseup',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseDown = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mousedown',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onDoubleClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'dblclick',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'click',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});

var _elm_lang$http$Native_Http = function() {


// ENCODING AND DECODING

function encodeUri(string)
{
	return encodeURIComponent(string);
}

function decodeUri(string)
{
	try
	{
		return _elm_lang$core$Maybe$Just(decodeURIComponent(string));
	}
	catch(e)
	{
		return _elm_lang$core$Maybe$Nothing;
	}
}


// SEND REQUEST

function toTask(request, maybeProgress)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var xhr = new XMLHttpRequest();

		configureProgress(xhr, maybeProgress);

		xhr.addEventListener('error', function() {
			callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NetworkError' }));
		});
		xhr.addEventListener('timeout', function() {
			callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'Timeout' }));
		});
		xhr.addEventListener('load', function() {
			callback(handleResponse(xhr, request.expect.responseToResult));
		});

		try
		{
			xhr.open(request.method, request.url, true);
		}
		catch (e)
		{
			return callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'BadUrl', _0: request.url }));
		}

		configureRequest(xhr, request);
		send(xhr, request.body);

		return function() { xhr.abort(); };
	});
}

function configureProgress(xhr, maybeProgress)
{
	if (maybeProgress.ctor === 'Nothing')
	{
		return;
	}

	xhr.addEventListener('progress', function(event) {
		if (!event.lengthComputable)
		{
			return;
		}
		_elm_lang$core$Native_Scheduler.rawSpawn(maybeProgress._0({
			bytes: event.loaded,
			bytesExpected: event.total
		}));
	});
}

function configureRequest(xhr, request)
{
	function setHeader(pair)
	{
		xhr.setRequestHeader(pair._0, pair._1);
	}

	A2(_elm_lang$core$List$map, setHeader, request.headers);
	xhr.responseType = request.expect.responseType;
	xhr.withCredentials = request.withCredentials;

	if (request.timeout.ctor === 'Just')
	{
		xhr.timeout = request.timeout._0;
	}
}

function send(xhr, body)
{
	switch (body.ctor)
	{
		case 'EmptyBody':
			xhr.send();
			return;

		case 'StringBody':
			xhr.setRequestHeader('Content-Type', body._0);
			xhr.send(body._1);
			return;

		case 'FormDataBody':
			xhr.send(body._0);
			return;
	}
}


// RESPONSES

function handleResponse(xhr, responseToResult)
{
	var response = toResponse(xhr);

	if (xhr.status < 200 || 300 <= xhr.status)
	{
		response.body = xhr.responseText;
		return _elm_lang$core$Native_Scheduler.fail({
			ctor: 'BadStatus',
			_0: response
		});
	}

	var result = responseToResult(response);

	if (result.ctor === 'Ok')
	{
		return _elm_lang$core$Native_Scheduler.succeed(result._0);
	}
	else
	{
		response.body = xhr.responseText;
		return _elm_lang$core$Native_Scheduler.fail({
			ctor: 'BadPayload',
			_0: result._0,
			_1: response
		});
	}
}

function toResponse(xhr)
{
	return {
		status: { code: xhr.status, message: xhr.statusText },
		headers: parseHeaders(xhr.getAllResponseHeaders()),
		url: xhr.responseURL,
		body: xhr.response
	};
}

function parseHeaders(rawHeaders)
{
	var headers = _elm_lang$core$Dict$empty;

	if (!rawHeaders)
	{
		return headers;
	}

	var headerPairs = rawHeaders.split('\u000d\u000a');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf('\u003a\u0020');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3(_elm_lang$core$Dict$update, key, function(oldValue) {
				if (oldValue.ctor === 'Just')
				{
					return _elm_lang$core$Maybe$Just(value + ', ' + oldValue._0);
				}
				return _elm_lang$core$Maybe$Just(value);
			}, headers);
		}
	}

	return headers;
}


// EXPECTORS

function expectStringResponse(responseToResult)
{
	return {
		responseType: 'text',
		responseToResult: responseToResult
	};
}

function mapExpect(func, expect)
{
	return {
		responseType: expect.responseType,
		responseToResult: function(response) {
			var convertedResponse = expect.responseToResult(response);
			return A2(_elm_lang$core$Result$map, func, convertedResponse);
		}
	};
}


// BODY

function multipart(parts)
{
	var formData = new FormData();

	while (parts.ctor !== '[]')
	{
		var part = parts._0;
		formData.append(part._0, part._1);
		parts = parts._1;
	}

	return { ctor: 'FormDataBody', _0: formData };
}

return {
	toTask: F2(toTask),
	expectStringResponse: expectStringResponse,
	mapExpect: F2(mapExpect),
	multipart: multipart,
	encodeUri: encodeUri,
	decodeUri: decodeUri
};

}();

var _elm_lang$http$Http_Internal$map = F2(
	function (func, request) {
		return _elm_lang$core$Native_Utils.update(
			request,
			{
				expect: A2(_elm_lang$http$Native_Http.mapExpect, func, request.expect)
			});
	});
var _elm_lang$http$Http_Internal$RawRequest = F7(
	function (a, b, c, d, e, f, g) {
		return {method: a, headers: b, url: c, body: d, expect: e, timeout: f, withCredentials: g};
	});
var _elm_lang$http$Http_Internal$Request = function (a) {
	return {ctor: 'Request', _0: a};
};
var _elm_lang$http$Http_Internal$Expect = {ctor: 'Expect'};
var _elm_lang$http$Http_Internal$FormDataBody = {ctor: 'FormDataBody'};
var _elm_lang$http$Http_Internal$StringBody = F2(
	function (a, b) {
		return {ctor: 'StringBody', _0: a, _1: b};
	});
var _elm_lang$http$Http_Internal$EmptyBody = {ctor: 'EmptyBody'};
var _elm_lang$http$Http_Internal$Header = F2(
	function (a, b) {
		return {ctor: 'Header', _0: a, _1: b};
	});

var _elm_lang$http$Http$decodeUri = _elm_lang$http$Native_Http.decodeUri;
var _elm_lang$http$Http$encodeUri = _elm_lang$http$Native_Http.encodeUri;
var _elm_lang$http$Http$expectStringResponse = _elm_lang$http$Native_Http.expectStringResponse;
var _elm_lang$http$Http$expectJson = function (decoder) {
	return _elm_lang$http$Http$expectStringResponse(
		function (response) {
			return A2(_elm_lang$core$Json_Decode$decodeString, decoder, response.body);
		});
};
var _elm_lang$http$Http$expectString = _elm_lang$http$Http$expectStringResponse(
	function (response) {
		return _elm_lang$core$Result$Ok(response.body);
	});
var _elm_lang$http$Http$multipartBody = _elm_lang$http$Native_Http.multipart;
var _elm_lang$http$Http$stringBody = _elm_lang$http$Http_Internal$StringBody;
var _elm_lang$http$Http$jsonBody = function (value) {
	return A2(
		_elm_lang$http$Http_Internal$StringBody,
		'application/json',
		A2(_elm_lang$core$Json_Encode$encode, 0, value));
};
var _elm_lang$http$Http$emptyBody = _elm_lang$http$Http_Internal$EmptyBody;
var _elm_lang$http$Http$header = _elm_lang$http$Http_Internal$Header;
var _elm_lang$http$Http$request = _elm_lang$http$Http_Internal$Request;
var _elm_lang$http$Http$post = F3(
	function (url, body, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {ctor: '[]'},
				url: url,
				body: body,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _elm_lang$http$Http$get = F2(
	function (url, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'GET',
				headers: {ctor: '[]'},
				url: url,
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _elm_lang$http$Http$getString = function (url) {
	return _elm_lang$http$Http$request(
		{
			method: 'GET',
			headers: {ctor: '[]'},
			url: url,
			body: _elm_lang$http$Http$emptyBody,
			expect: _elm_lang$http$Http$expectString,
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false
		});
};
var _elm_lang$http$Http$toTask = function (_p0) {
	var _p1 = _p0;
	return A2(_elm_lang$http$Native_Http.toTask, _p1._0, _elm_lang$core$Maybe$Nothing);
};
var _elm_lang$http$Http$send = F2(
	function (resultToMessage, request) {
		return A2(
			_elm_lang$core$Task$attempt,
			resultToMessage,
			_elm_lang$http$Http$toTask(request));
	});
var _elm_lang$http$Http$Response = F4(
	function (a, b, c, d) {
		return {url: a, status: b, headers: c, body: d};
	});
var _elm_lang$http$Http$BadPayload = F2(
	function (a, b) {
		return {ctor: 'BadPayload', _0: a, _1: b};
	});
var _elm_lang$http$Http$BadStatus = function (a) {
	return {ctor: 'BadStatus', _0: a};
};
var _elm_lang$http$Http$NetworkError = {ctor: 'NetworkError'};
var _elm_lang$http$Http$Timeout = {ctor: 'Timeout'};
var _elm_lang$http$Http$BadUrl = function (a) {
	return {ctor: 'BadUrl', _0: a};
};
var _elm_lang$http$Http$StringPart = F2(
	function (a, b) {
		return {ctor: 'StringPart', _0: a, _1: b};
	});
var _elm_lang$http$Http$stringPart = _elm_lang$http$Http$StringPart;

var _elm_lang$navigation$Native_Navigation = function() {


// FAKE NAVIGATION

function go(n)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		if (n !== 0)
		{
			history.go(n);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function pushState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.pushState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}

function replaceState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.replaceState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}


// REAL NAVIGATION

function reloadPage(skipCache)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		document.location.reload(skipCache);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function setLocation(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		try
		{
			window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			document.location.reload(false);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


// GET LOCATION

function getLocation()
{
	var location = document.location;

	return {
		href: location.href,
		host: location.host,
		hostname: location.hostname,
		protocol: location.protocol,
		origin: location.origin,
		port_: location.port,
		pathname: location.pathname,
		search: location.search,
		hash: location.hash,
		username: location.username,
		password: location.password
	};
}


// DETECT IE11 PROBLEMS

function isInternetExplorer11()
{
	return window.navigator.userAgent.indexOf('Trident') !== -1;
}


return {
	go: go,
	setLocation: setLocation,
	reloadPage: reloadPage,
	pushState: pushState,
	replaceState: replaceState,
	getLocation: getLocation,
	isInternetExplorer11: isInternetExplorer11
};

}();

var _elm_lang$navigation$Navigation$replaceState = _elm_lang$navigation$Native_Navigation.replaceState;
var _elm_lang$navigation$Navigation$pushState = _elm_lang$navigation$Native_Navigation.pushState;
var _elm_lang$navigation$Navigation$go = _elm_lang$navigation$Native_Navigation.go;
var _elm_lang$navigation$Navigation$reloadPage = _elm_lang$navigation$Native_Navigation.reloadPage;
var _elm_lang$navigation$Navigation$setLocation = _elm_lang$navigation$Native_Navigation.setLocation;
var _elm_lang$navigation$Navigation_ops = _elm_lang$navigation$Navigation_ops || {};
_elm_lang$navigation$Navigation_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return task2;
			},
			task1);
	});
var _elm_lang$navigation$Navigation$notify = F3(
	function (router, subs, location) {
		var send = function (_p1) {
			var _p2 = _p1;
			return A2(
				_elm_lang$core$Platform$sendToApp,
				router,
				_p2._0(location));
		};
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(_elm_lang$core$List$map, send, subs)),
			_elm_lang$core$Task$succeed(
				{ctor: '_Tuple0'}));
	});
var _elm_lang$navigation$Navigation$cmdHelp = F3(
	function (router, subs, cmd) {
		var _p3 = cmd;
		switch (_p3.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$go(_p3._0);
			case 'New':
				return A2(
					_elm_lang$core$Task$andThen,
					A2(_elm_lang$navigation$Navigation$notify, router, subs),
					_elm_lang$navigation$Navigation$pushState(_p3._0));
			case 'Modify':
				return A2(
					_elm_lang$core$Task$andThen,
					A2(_elm_lang$navigation$Navigation$notify, router, subs),
					_elm_lang$navigation$Navigation$replaceState(_p3._0));
			case 'Visit':
				return _elm_lang$navigation$Navigation$setLocation(_p3._0);
			default:
				return _elm_lang$navigation$Navigation$reloadPage(_p3._0);
		}
	});
var _elm_lang$navigation$Navigation$killPopWatcher = function (popWatcher) {
	var _p4 = popWatcher;
	if (_p4.ctor === 'Normal') {
		return _elm_lang$core$Process$kill(_p4._0);
	} else {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Process$kill(_p4._0),
			_elm_lang$core$Process$kill(_p4._1));
	}
};
var _elm_lang$navigation$Navigation$onSelfMsg = F3(
	function (router, location, state) {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			A3(_elm_lang$navigation$Navigation$notify, router, state.subs, location),
			_elm_lang$core$Task$succeed(state));
	});
var _elm_lang$navigation$Navigation$subscription = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$command = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$Location = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {href: a, host: b, hostname: c, protocol: d, origin: e, port_: f, pathname: g, search: h, hash: i, username: j, password: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$navigation$Navigation$State = F2(
	function (a, b) {
		return {subs: a, popWatcher: b};
	});
var _elm_lang$navigation$Navigation$init = _elm_lang$core$Task$succeed(
	A2(
		_elm_lang$navigation$Navigation$State,
		{ctor: '[]'},
		_elm_lang$core$Maybe$Nothing));
var _elm_lang$navigation$Navigation$Reload = function (a) {
	return {ctor: 'Reload', _0: a};
};
var _elm_lang$navigation$Navigation$reload = _elm_lang$navigation$Navigation$command(
	_elm_lang$navigation$Navigation$Reload(false));
var _elm_lang$navigation$Navigation$reloadAndSkipCache = _elm_lang$navigation$Navigation$command(
	_elm_lang$navigation$Navigation$Reload(true));
var _elm_lang$navigation$Navigation$Visit = function (a) {
	return {ctor: 'Visit', _0: a};
};
var _elm_lang$navigation$Navigation$load = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Visit(url));
};
var _elm_lang$navigation$Navigation$Modify = function (a) {
	return {ctor: 'Modify', _0: a};
};
var _elm_lang$navigation$Navigation$modifyUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Modify(url));
};
var _elm_lang$navigation$Navigation$New = function (a) {
	return {ctor: 'New', _0: a};
};
var _elm_lang$navigation$Navigation$newUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$New(url));
};
var _elm_lang$navigation$Navigation$Jump = function (a) {
	return {ctor: 'Jump', _0: a};
};
var _elm_lang$navigation$Navigation$back = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(0 - n));
};
var _elm_lang$navigation$Navigation$forward = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(n));
};
var _elm_lang$navigation$Navigation$cmdMap = F2(
	function (_p5, myCmd) {
		var _p6 = myCmd;
		switch (_p6.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$Jump(_p6._0);
			case 'New':
				return _elm_lang$navigation$Navigation$New(_p6._0);
			case 'Modify':
				return _elm_lang$navigation$Navigation$Modify(_p6._0);
			case 'Visit':
				return _elm_lang$navigation$Navigation$Visit(_p6._0);
			default:
				return _elm_lang$navigation$Navigation$Reload(_p6._0);
		}
	});
var _elm_lang$navigation$Navigation$Monitor = function (a) {
	return {ctor: 'Monitor', _0: a};
};
var _elm_lang$navigation$Navigation$program = F2(
	function (locationToMessage, stuff) {
		var init = stuff.init(
			_elm_lang$navigation$Native_Navigation.getLocation(
				{ctor: '_Tuple0'}));
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(locationToMessage)),
					_1: {
						ctor: '::',
						_0: stuff.subscriptions(model),
						_1: {ctor: '[]'}
					}
				});
		};
		return _elm_lang$html$Html$program(
			{init: init, view: stuff.view, update: stuff.update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$programWithFlags = F2(
	function (locationToMessage, stuff) {
		var init = function (flags) {
			return A2(
				stuff.init,
				flags,
				_elm_lang$navigation$Native_Navigation.getLocation(
					{ctor: '_Tuple0'}));
		};
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(locationToMessage)),
					_1: {
						ctor: '::',
						_0: stuff.subscriptions(model),
						_1: {ctor: '[]'}
					}
				});
		};
		return _elm_lang$html$Html$programWithFlags(
			{init: init, view: stuff.view, update: stuff.update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$subMap = F2(
	function (func, _p7) {
		var _p8 = _p7;
		return _elm_lang$navigation$Navigation$Monitor(
			function (_p9) {
				return func(
					_p8._0(_p9));
			});
	});
var _elm_lang$navigation$Navigation$InternetExplorer = F2(
	function (a, b) {
		return {ctor: 'InternetExplorer', _0: a, _1: b};
	});
var _elm_lang$navigation$Navigation$Normal = function (a) {
	return {ctor: 'Normal', _0: a};
};
var _elm_lang$navigation$Navigation$spawnPopWatcher = function (router) {
	var reportLocation = function (_p10) {
		return A2(
			_elm_lang$core$Platform$sendToSelf,
			router,
			_elm_lang$navigation$Native_Navigation.getLocation(
				{ctor: '_Tuple0'}));
	};
	return _elm_lang$navigation$Native_Navigation.isInternetExplorer11(
		{ctor: '_Tuple0'}) ? A3(
		_elm_lang$core$Task$map2,
		_elm_lang$navigation$Navigation$InternetExplorer,
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'popstate', _elm_lang$core$Json_Decode$value, reportLocation)),
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'hashchange', _elm_lang$core$Json_Decode$value, reportLocation))) : A2(
		_elm_lang$core$Task$map,
		_elm_lang$navigation$Navigation$Normal,
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'popstate', _elm_lang$core$Json_Decode$value, reportLocation)));
};
var _elm_lang$navigation$Navigation$onEffects = F4(
	function (router, cmds, subs, _p11) {
		var _p12 = _p11;
		var _p15 = _p12.popWatcher;
		var stepState = function () {
			var _p13 = {ctor: '_Tuple2', _0: subs, _1: _p15};
			_v6_2:
			do {
				if (_p13._0.ctor === '[]') {
					if (_p13._1.ctor === 'Just') {
						return A2(
							_elm_lang$navigation$Navigation_ops['&>'],
							_elm_lang$navigation$Navigation$killPopWatcher(_p13._1._0),
							_elm_lang$core$Task$succeed(
								A2(_elm_lang$navigation$Navigation$State, subs, _elm_lang$core$Maybe$Nothing)));
					} else {
						break _v6_2;
					}
				} else {
					if (_p13._1.ctor === 'Nothing') {
						return A2(
							_elm_lang$core$Task$map,
							function (_p14) {
								return A2(
									_elm_lang$navigation$Navigation$State,
									subs,
									_elm_lang$core$Maybe$Just(_p14));
							},
							_elm_lang$navigation$Navigation$spawnPopWatcher(router));
					} else {
						break _v6_2;
					}
				}
			} while(false);
			return _elm_lang$core$Task$succeed(
				A2(_elm_lang$navigation$Navigation$State, subs, _p15));
		}();
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					A2(_elm_lang$navigation$Navigation$cmdHelp, router, subs),
					cmds)),
			stepState);
	});
_elm_lang$core$Native_Platform.effectManagers['Navigation'] = {pkg: 'elm-lang/navigation', init: _elm_lang$navigation$Navigation$init, onEffects: _elm_lang$navigation$Navigation$onEffects, onSelfMsg: _elm_lang$navigation$Navigation$onSelfMsg, tag: 'fx', cmdMap: _elm_lang$navigation$Navigation$cmdMap, subMap: _elm_lang$navigation$Navigation$subMap};

var _evancz$url_parser$UrlParser$toKeyValuePair = function (segment) {
	var _p0 = A2(_elm_lang$core$String$split, '=', segment);
	if (((_p0.ctor === '::') && (_p0._1.ctor === '::')) && (_p0._1._1.ctor === '[]')) {
		return A3(
			_elm_lang$core$Maybe$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			_elm_lang$http$Http$decodeUri(_p0._0),
			_elm_lang$http$Http$decodeUri(_p0._1._0));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _evancz$url_parser$UrlParser$parseParams = function (queryString) {
	return _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$filterMap,
			_evancz$url_parser$UrlParser$toKeyValuePair,
			A2(
				_elm_lang$core$String$split,
				'&',
				A2(_elm_lang$core$String$dropLeft, 1, queryString))));
};
var _evancz$url_parser$UrlParser$splitUrl = function (url) {
	var _p1 = A2(_elm_lang$core$String$split, '/', url);
	if ((_p1.ctor === '::') && (_p1._0 === '')) {
		return _p1._1;
	} else {
		return _p1;
	}
};
var _evancz$url_parser$UrlParser$parseHelp = function (states) {
	parseHelp:
	while (true) {
		var _p2 = states;
		if (_p2.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p4 = _p2._0;
			var _p3 = _p4.unvisited;
			if (_p3.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p4.value);
			} else {
				if ((_p3._0 === '') && (_p3._1.ctor === '[]')) {
					return _elm_lang$core$Maybe$Just(_p4.value);
				} else {
					var _v4 = _p2._1;
					states = _v4;
					continue parseHelp;
				}
			}
		}
	}
};
var _evancz$url_parser$UrlParser$parse = F3(
	function (_p5, url, params) {
		var _p6 = _p5;
		return _evancz$url_parser$UrlParser$parseHelp(
			_p6._0(
				{
					visited: {ctor: '[]'},
					unvisited: _evancz$url_parser$UrlParser$splitUrl(url),
					params: params,
					value: _elm_lang$core$Basics$identity
				}));
	});
var _evancz$url_parser$UrlParser$parseHash = F2(
	function (parser, location) {
		return A3(
			_evancz$url_parser$UrlParser$parse,
			parser,
			A2(_elm_lang$core$String$dropLeft, 1, location.hash),
			_evancz$url_parser$UrlParser$parseParams(location.search));
	});
var _evancz$url_parser$UrlParser$parsePath = F2(
	function (parser, location) {
		return A3(
			_evancz$url_parser$UrlParser$parse,
			parser,
			location.pathname,
			_evancz$url_parser$UrlParser$parseParams(location.search));
	});
var _evancz$url_parser$UrlParser$intParamHelp = function (maybeValue) {
	var _p7 = maybeValue;
	if (_p7.ctor === 'Nothing') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Result$toMaybe(
			_elm_lang$core$String$toInt(_p7._0));
	}
};
var _evancz$url_parser$UrlParser$mapHelp = F2(
	function (func, _p8) {
		var _p9 = _p8;
		return {
			visited: _p9.visited,
			unvisited: _p9.unvisited,
			params: _p9.params,
			value: func(_p9.value)
		};
	});
var _evancz$url_parser$UrlParser$State = F4(
	function (a, b, c, d) {
		return {visited: a, unvisited: b, params: c, value: d};
	});
var _evancz$url_parser$UrlParser$Parser = function (a) {
	return {ctor: 'Parser', _0: a};
};
var _evancz$url_parser$UrlParser$s = function (str) {
	return _evancz$url_parser$UrlParser$Parser(
		function (_p10) {
			var _p11 = _p10;
			var _p12 = _p11.unvisited;
			if (_p12.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				var _p13 = _p12._0;
				return _elm_lang$core$Native_Utils.eq(_p13, str) ? {
					ctor: '::',
					_0: A4(
						_evancz$url_parser$UrlParser$State,
						{ctor: '::', _0: _p13, _1: _p11.visited},
						_p12._1,
						_p11.params,
						_p11.value),
					_1: {ctor: '[]'}
				} : {ctor: '[]'};
			}
		});
};
var _evancz$url_parser$UrlParser$custom = F2(
	function (tipe, stringToSomething) {
		return _evancz$url_parser$UrlParser$Parser(
			function (_p14) {
				var _p15 = _p14;
				var _p16 = _p15.unvisited;
				if (_p16.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					var _p18 = _p16._0;
					var _p17 = stringToSomething(_p18);
					if (_p17.ctor === 'Ok') {
						return {
							ctor: '::',
							_0: A4(
								_evancz$url_parser$UrlParser$State,
								{ctor: '::', _0: _p18, _1: _p15.visited},
								_p16._1,
								_p15.params,
								_p15.value(_p17._0)),
							_1: {ctor: '[]'}
						};
					} else {
						return {ctor: '[]'};
					}
				}
			});
	});
var _evancz$url_parser$UrlParser$string = A2(_evancz$url_parser$UrlParser$custom, 'STRING', _elm_lang$core$Result$Ok);
var _evancz$url_parser$UrlParser$int = A2(_evancz$url_parser$UrlParser$custom, 'NUMBER', _elm_lang$core$String$toInt);
var _evancz$url_parser$UrlParser_ops = _evancz$url_parser$UrlParser_ops || {};
_evancz$url_parser$UrlParser_ops['</>'] = F2(
	function (_p20, _p19) {
		var _p21 = _p20;
		var _p22 = _p19;
		return _evancz$url_parser$UrlParser$Parser(
			function (state) {
				return A2(
					_elm_lang$core$List$concatMap,
					_p22._0,
					_p21._0(state));
			});
	});
var _evancz$url_parser$UrlParser$map = F2(
	function (subValue, _p23) {
		var _p24 = _p23;
		return _evancz$url_parser$UrlParser$Parser(
			function (_p25) {
				var _p26 = _p25;
				return A2(
					_elm_lang$core$List$map,
					_evancz$url_parser$UrlParser$mapHelp(_p26.value),
					_p24._0(
						{visited: _p26.visited, unvisited: _p26.unvisited, params: _p26.params, value: subValue}));
			});
	});
var _evancz$url_parser$UrlParser$oneOf = function (parsers) {
	return _evancz$url_parser$UrlParser$Parser(
		function (state) {
			return A2(
				_elm_lang$core$List$concatMap,
				function (_p27) {
					var _p28 = _p27;
					return _p28._0(state);
				},
				parsers);
		});
};
var _evancz$url_parser$UrlParser$top = _evancz$url_parser$UrlParser$Parser(
	function (state) {
		return {
			ctor: '::',
			_0: state,
			_1: {ctor: '[]'}
		};
	});
var _evancz$url_parser$UrlParser_ops = _evancz$url_parser$UrlParser_ops || {};
_evancz$url_parser$UrlParser_ops['<?>'] = F2(
	function (_p30, _p29) {
		var _p31 = _p30;
		var _p32 = _p29;
		return _evancz$url_parser$UrlParser$Parser(
			function (state) {
				return A2(
					_elm_lang$core$List$concatMap,
					_p32._0,
					_p31._0(state));
			});
	});
var _evancz$url_parser$UrlParser$QueryParser = function (a) {
	return {ctor: 'QueryParser', _0: a};
};
var _evancz$url_parser$UrlParser$customParam = F2(
	function (key, func) {
		return _evancz$url_parser$UrlParser$QueryParser(
			function (_p33) {
				var _p34 = _p33;
				var _p35 = _p34.params;
				return {
					ctor: '::',
					_0: A4(
						_evancz$url_parser$UrlParser$State,
						_p34.visited,
						_p34.unvisited,
						_p35,
						_p34.value(
							func(
								A2(_elm_lang$core$Dict$get, key, _p35)))),
					_1: {ctor: '[]'}
				};
			});
	});
var _evancz$url_parser$UrlParser$stringParam = function (name) {
	return A2(_evancz$url_parser$UrlParser$customParam, name, _elm_lang$core$Basics$identity);
};
var _evancz$url_parser$UrlParser$intParam = function (name) {
	return A2(_evancz$url_parser$UrlParser$customParam, name, _evancz$url_parser$UrlParser$intParamHelp);
};

var _user$project$Routes$NotFoundRoute = {ctor: 'NotFoundRoute'};
var _user$project$Routes$DashboardRoute = {ctor: 'DashboardRoute'};
var _user$project$Routes$AdminRoute = {ctor: 'AdminRoute'};
var _user$project$Routes$HomeRoute = {ctor: 'HomeRoute'};
var _user$project$Routes$matchers = _evancz$url_parser$UrlParser$oneOf(
	{
		ctor: '::',
		_0: A2(_evancz$url_parser$UrlParser$map, _user$project$Routes$HomeRoute, _evancz$url_parser$UrlParser$top),
		_1: {
			ctor: '::',
			_0: A2(
				_evancz$url_parser$UrlParser$map,
				_user$project$Routes$HomeRoute,
				_evancz$url_parser$UrlParser$s('innovators')),
			_1: {
				ctor: '::',
				_0: A2(
					_evancz$url_parser$UrlParser$map,
					_user$project$Routes$HomeRoute,
					_evancz$url_parser$UrlParser$s('organizations')),
				_1: {
					ctor: '::',
					_0: A2(
						_evancz$url_parser$UrlParser$map,
						_user$project$Routes$HomeRoute,
						_evancz$url_parser$UrlParser$s('innovators-pricing')),
					_1: {
						ctor: '::',
						_0: A2(
							_evancz$url_parser$UrlParser$map,
							_user$project$Routes$HomeRoute,
							_evancz$url_parser$UrlParser$s('organizations-pricing')),
						_1: {
							ctor: '::',
							_0: A2(
								_evancz$url_parser$UrlParser$map,
								_user$project$Routes$HomeRoute,
								_evancz$url_parser$UrlParser$s('about-us')),
							_1: {
								ctor: '::',
								_0: A2(
									_evancz$url_parser$UrlParser$map,
									_user$project$Routes$HomeRoute,
									_evancz$url_parser$UrlParser$s('contacts')),
								_1: {
									ctor: '::',
									_0: A2(
										_evancz$url_parser$UrlParser$map,
										_user$project$Routes$HomeRoute,
										_evancz$url_parser$UrlParser$s('faq')),
									_1: {
										ctor: '::',
										_0: A2(
											_evancz$url_parser$UrlParser$map,
											_user$project$Routes$HomeRoute,
											_evancz$url_parser$UrlParser$s('innovators-t')),
										_1: {
											ctor: '::',
											_0: A2(
												_evancz$url_parser$UrlParser$map,
												_user$project$Routes$HomeRoute,
												_evancz$url_parser$UrlParser$s('organizations-t')),
											_1: {
												ctor: '::',
												_0: A2(
													_evancz$url_parser$UrlParser$map,
													_user$project$Routes$HomeRoute,
													_evancz$url_parser$UrlParser$s('innovators-pricing-t')),
												_1: {
													ctor: '::',
													_0: A2(
														_evancz$url_parser$UrlParser$map,
														_user$project$Routes$HomeRoute,
														_evancz$url_parser$UrlParser$s('organizations-pricing-t')),
													_1: {
														ctor: '::',
														_0: A2(
															_evancz$url_parser$UrlParser$map,
															_user$project$Routes$HomeRoute,
															_evancz$url_parser$UrlParser$s('about-us-t')),
														_1: {
															ctor: '::',
															_0: A2(
																_evancz$url_parser$UrlParser$map,
																_user$project$Routes$HomeRoute,
																_evancz$url_parser$UrlParser$s('contacts-t')),
															_1: {
																ctor: '::',
																_0: A2(
																	_evancz$url_parser$UrlParser$map,
																	_user$project$Routes$HomeRoute,
																	_evancz$url_parser$UrlParser$s('faq-t')),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_evancz$url_parser$UrlParser$map,
																		_user$project$Routes$AdminRoute,
																		_evancz$url_parser$UrlParser$s('admin_panel')),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_evancz$url_parser$UrlParser$map,
																			_user$project$Routes$HomeRoute,
																			_evancz$url_parser$UrlParser$s('menu-m')),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_evancz$url_parser$UrlParser$map,
																				_user$project$Routes$HomeRoute,
																				_evancz$url_parser$UrlParser$s('innovators-m')),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_evancz$url_parser$UrlParser$map,
																					_user$project$Routes$HomeRoute,
																					_evancz$url_parser$UrlParser$s('organizations-m')),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_evancz$url_parser$UrlParser$map,
																						_user$project$Routes$HomeRoute,
																						_evancz$url_parser$UrlParser$s('tarrif-plans-m')),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_evancz$url_parser$UrlParser$map,
																							_user$project$Routes$HomeRoute,
																							_evancz$url_parser$UrlParser$s('innovators-pricing-m')),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_evancz$url_parser$UrlParser$map,
																								_user$project$Routes$HomeRoute,
																								_evancz$url_parser$UrlParser$s('organizations-pricing-m')),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_evancz$url_parser$UrlParser$map,
																									_user$project$Routes$HomeRoute,
																									_evancz$url_parser$UrlParser$s('about-us-m')),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_evancz$url_parser$UrlParser$map,
																										_user$project$Routes$HomeRoute,
																										_evancz$url_parser$UrlParser$s('contacts-m')),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_evancz$url_parser$UrlParser$map,
																											_user$project$Routes$HomeRoute,
																											_evancz$url_parser$UrlParser$s('faq-m')),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_evancz$url_parser$UrlParser$map,
																												_user$project$Routes$DashboardRoute,
																												_evancz$url_parser$UrlParser$s('dashboard')),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													_evancz$url_parser$UrlParser$map,
																													_user$project$Routes$DashboardRoute,
																													_evancz$url_parser$UrlParser$s('profile')),
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$Routes$parseLocation = function (location) {
	var _p0 = A2(_evancz$url_parser$UrlParser$parseHash, _user$project$Routes$matchers, location);
	if (_p0.ctor === 'Just') {
		return _p0._0;
	} else {
		return _user$project$Routes$NotFoundRoute;
	}
};

var _user$project$Models$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return function (u) {
																					return function (v) {
																						return function (w) {
																							return function (x) {
																								return function (y) {
																									return function (z) {
																										return function (_1) {
																											return function (_2) {
																												return function (_3) {
																													return function (_4) {
																														return function (_5) {
																															return function (_6) {
																																return function (_7) {
																																	return function (_8) {
																																		return function (_9) {
																																			return function (_10) {
																																				return function (_11) {
																																					return function (_12) {
																																						return function (_13) {
																																							return function (_14) {
																																								return function (_15) {
																																									return function (_16) {
																																										return function (_17) {
																																											return function (_18) {
																																												return function (_19) {
																																													return function (_20) {
																																														return function (_21) {
																																															return function (_22) {
																																																return function (_23) {
																																																	return function (_24) {
																																																		return function (_25) {
																																																			return function (_26) {
																																																				return function (_27) {
																																																					return function (_28) {
																																																						return function (_29) {
																																																							return function (_30) {
																																																								return function (_31) {
																																																									return function (_32) {
																																																										return function (_33) {
																																																											return function (_34) {
																																																												return function (_35) {
																																																													return function (_36) {
																																																														return function (_37) {
																																																															return function (_38) {
																																																																return function (_39) {
																																																																	return function (_40) {
																																																																		return function (_41) {
																																																																			return function (_42) {
																																																																				return function (_43) {
																																																																					return function (_44) {
																																																																						return function (_45) {
																																																																							return function (_46) {
																																																																								return function (_47) {
																																																																									return function (_48) {
																																																																										return function (_49) {
																																																																											return function (_50) {
																																																																												return function (_51) {
																																																																													return function (_52) {
																																																																														return function (_53) {
																																																																															return function (_54) {
																																																																																return function (_55) {
																																																																																	return function (_56) {
																																																																																		return function (_57) {
																																																																																			return {route: a, pricingOpened: b, getStartedOpened: c, loginOpened: d, registerIdeaGeneratorOpened: e, registerCompanyOpened: f, landingUsername: g, landingEmail: h, landingCompany: i, landingShortIdea: j, landingSignUpMobileVisible: k, landingUsernameError: l, landingEmailError: m, landingCompanyError: n, landingShortIdeaError: o, landingPromoRegisterError: p, landingInputFieldsVisible: q, adminPanelSignInError: r, adminPanelRegDataList: s, adminPanelFirstPassword: t, adminPanelSecondPassword: u, adminPanelSignInError: v, adminPanelSignedIn: w, mobileGetStartedOpened: x, mobileRegisterCompanyOpened: y, mobileRegisterIdeaGeneratorOpened: z, mobileDefaultView: _1, mobileMenuView: _2, mobileIdeaGeneratorsView: _3, mobileOrganizationsView: _4, mobilePricingToggleOpen: _5, mobilePricingIdeaGeneratorsView: _6, mobilePricingOrganizationsView: _7, mobileAboutUsView: _8, mobileContactView: _9, mobileFaqView: _10, mobileTarrifPlansView: _11, companyUnderRegistration: _12, innovatorUnderRegistration: _13, loggedInData: _14, topInnovators: _15, topOrganizations: _16, loggingInMember: _17, loggedInMember: _18, dashboardOptionsVisible: _19, dashboardMobilePage: _20, currentInnovatorExtended: _21, currentOrganizationExtended: _22, selectedInnovatorsPlan: _23, selectedOrganizationsPlan: _24, contactUsData: _25, postData: _26, postList: _27, newIdeaData: _28, newChatMessageData: _29, chatWindowOpened: _30, currentChatHistory: _31, pendingUnredMessages: _32, newMessagesNotifsVisible: _33, suggestedUsers: _34, innovatorSettingsFieldsEditable: _35, innovatorSettingsFields: _36, tariffPlanSubError: _37, organizationSettingsFields: _38, organizationSettingsFieldsEditable: _39, notifications: _40, newNotificationsVisible: _41, language: _42, currentPostComments: _43, currentCommentData: _44, currentPostWithComments: _45, searchedData: _46, searchProgress: _47, desktopPage: _48, seeOtherInnovator: _49, seeOtherOrganization: _50, connections: _51, mobileSearchVisible: _52, viewingCurrentIdea: _53, viewingCurrentFullIdea: _54, mobilePageHistory: _55, pageHistory: _56, signedNDAs: _57};
																																																																																		};
																																																																																	};
																																																																																};
																																																																															};
																																																																														};
																																																																													};
																																																																												};
																																																																											};
																																																																										};
																																																																									};
																																																																								};
																																																																							};
																																																																						};
																																																																					};
																																																																				};
																																																																			};
																																																																		};
																																																																	};
																																																																};
																																																															};
																																																														};
																																																													};
																																																												};
																																																											};
																																																										};
																																																									};
																																																								};
																																																							};
																																																						};
																																																					};
																																																				};
																																																			};
																																																		};
																																																	};
																																																};
																																															};
																																														};
																																													};
																																												};
																																											};
																																										};
																																									};
																																								};
																																							};
																																						};
																																					};
																																				};
																																			};
																																		};
																																	};
																																};
																															};
																														};
																													};
																												};
																											};
																										};
																									};
																								};
																							};
																						};
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Models$SignedNDA = F5(
	function (a, b, c, d, e) {
		return {idea_id: a, idea_name: b, idea_industry: c, idea_price: d, signing_date: e};
	});
var _user$project$Models$UserIdentifierWrapper = F3(
	function (a, b, c) {
		return {id: a, is_org: b, token: c};
	});
var _user$project$Models$CacheDataWrapper = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return {loggedInMember: a, dashboardMobilePage: b, currentInnovatorExtended: c, currentOrganizationExtended: d, postList: e, currentChatHistory: f, pendingUnredMessages: g, suggestedUsers: h, notifications: i, language: j, desktopPage: k, seeOtherInnovator: l, seeOtherOrganization: m, viewingCurrentIdea: n, viewingCurrentFullIdea: o, mobilePageHistory: p, pageHistory: q, signedNDAs: r};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Models$NDAFullDataWrapper = F6(
	function (a, b, c, d, e, f) {
		return {author_id: a, author_is_org: b, idea_id: c, recipient_id: d, recipient_is_org: e, token: f};
	});
var _user$project$Models$AcceptRejectFullDescWrapper = F3(
	function (a, b, c) {
		return {notif_id: a, res_code: b, token: c};
	});
var _user$project$Models$FullDescReqWrapper = F7(
	function (a, b, c, d, e, f, g) {
		return {notification_type_code: a, requested_idea_id: b, addressed_to: c, addressed_to_is_org: d, requested_from: e, requested_from_is_org: f, token: g};
	});
var _user$project$Models$SearchProgress = F2(
	function (a, b) {
		return {typedSearch: a, progressStatus: b};
	});
var _user$project$Models$ProcessedSearchDataWrapper = F4(
	function (a, b, c, d) {
		return {innovators: a, organizations: b, ideas: c, posts: d};
	});
var _user$project$Models$SearchData = F2(
	function (a, b) {
		return {query: a, token: b};
	});
var _user$project$Models$IdeaData = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {id: a, short_description: b, idea_name: c, industry: d, tags: e, price: f, picture_uris: g, video_uri: h, innovator_id: i, innovator_name: j, innovator_pic: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Models$FullIdeaData = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return {id: a, short_description: b, idea_name: c, industry: d, tags: e, price: f, picture_uris: g, video_uri: h, innovator_id: i, innovator_name: j, innovator_pic: k, long_description: l};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Models$PostCommentData = F7(
	function (a, b, c, d, e, f, g) {
		return {author_id: a, author_is_org: b, author_name: c, body: d, input_date: e, post_id: f, token: g};
	});
var _user$project$Models$MapItem = F2(
	function (a, b) {
		return {key: a, value: b};
	});
var _user$project$Models$NotificationItem = F5(
	function (a, b, c, d, e) {
		return {id: a, title: b, body: c, notificationType: d, requestedIdeaId: e};
	});
var _user$project$Models$OrganizationSettingsFields = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return {id: a, name: b, pic_uri: c, country: d, email: e, complete_ideas_count: f, organizations_plan_id: g, description: h, webpage: i, about_us: j, industry: k, interested_industries: l, username: m, phone: n, changePassword: o, pic_name: p, error: q, token: r};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Models$OrganizationSettingsFieldsEditable = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {name: a, country: b, email: c, description: d, webpage: e, about_us: f, industry: g, interested_industries: h, username: i, phone: j, changePassword: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Models$TariffPlanSubscriptionData = F4(
	function (a, b, c, d) {
		return {id: a, is_organization: b, tariff_plan_name: c, token: d};
	});
var _user$project$Models$InnovatorSettingsFields = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return {id: a, name: b, surname: c, pic_uri: d, rating: e, country: f, email: g, ideas_count: h, innovators_plan_id: i, description: j, about_me: k, education: l, experience: m, username: n, phone: o, changePassword: p, pic_name: q, error: r, token: s};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Models$InnovatorSettingsFieldsEditable = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {username: a, name: b, surname: c, phone: d, email: e, about: f, education: g, experience: h, country: i, changePassword: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Models$ConnectionData = F5(
	function (a, b, c, d, e) {
		return {sender_id: a, sender_is_organization: b, receiver_id: c, receiver_is_organization: d, token: e};
	});
var _user$project$Models$SuggestedUser = F4(
	function (a, b, c, d) {
		return {id: a, name: b, description: c, picture: d};
	});
var _user$project$Models$UnredChatMessagesRequestWrapper = F3(
	function (a, b, c) {
		return {receiver_id: a, receiver_is_organization: b, token: c};
	});
var _user$project$Models$ChatHistoryRequestWrapper = F5(
	function (a, b, c, d, e) {
		return {to_id: a, from_id: b, to_is_organization: c, from_is_organization: d, token: e};
	});
var _user$project$Models$NewChatMessageData = F8(
	function (a, b, c, d, e, f, g, h) {
		return {to_id: a, from_id: b, sender_is_organization: c, receiver_is_organization: d, body: e, receiver_name: f, error: g, token: h};
	});
var _user$project$Models$NewIdeaData = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {ideaName: a, industry: b, tags: c, shortDescription: d, ideaPrice: e, longDescription: f, pictureUris: g, videoUri: h, error: i, token: j, innovator_id: k, videoName: l, pictureNames: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Models$ExtendedPostData = F8(
	function (a, b, c, d, e, f, g, h) {
		return {author_name: a, author_desc: b, author_pic: c, author_id: d, post_id: e, post_media_file: f, post_message: g, post_likes: h};
	});
var _user$project$Models$PostData = F7(
	function (a, b, c, d, e, f, g) {
		return {innovator_id: a, organization_id: b, message: c, mediaFileName: d, mediaFileUri: e, error: f, token: g};
	});
var _user$project$Models$SimpleResponse = F2(
	function (a, b) {
		return {success: a, error: b};
	});
var _user$project$Models$ContactUsData = F4(
	function (a, b, c, d) {
		return {name: a, email: b, message: c, error: d};
	});
var _user$project$Models$InnovatorExtended = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return {id: a, name: b, pic_uri: c, rating: d, country: e, email: f, ideas_count: g, innovators_plan_id: h, description: i, about_me: j, education: k, experience: l, username: m, phone: n, connections_count: o};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Models$OrganizationExtended = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return {id: a, name: b, pic_uri: c, country: d, email: e, complete_ideas_count: f, organizations_plan_id: g, description: h, webpage: i, about_us: j, industry: k, interested_industries: l, username: m, phone: n, rating: o, connections_count: p};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Models$GetInnovatorDataResponseWrapper = F2(
	function (a, b) {
		return {innovator_data: a, token: b};
	});
var _user$project$Models$GetOrganizationDataResponseWrapper = F2(
	function (a, b) {
		return {organization_data: a, token: b};
	});
var _user$project$Models$GetDataRequestStruct = F2(
	function (a, b) {
		return {id: a, token: b};
	});
var _user$project$Models$LoggedInMemberWrapper = F2(
	function (a, b) {
		return {login_data: a, error: b};
	});
var _user$project$Models$LoggedInMember = F5(
	function (a, b, c, d, e) {
		return {id: a, name: b, email: c, isOrganization: d, token: e};
	});
var _user$project$Models$LoggingInMember = F3(
	function (a, b, c) {
		return {email: a, password: b, loginError: c};
	});
var _user$project$Models$TopMembers = F2(
	function (a, b) {
		return {organizations: a, innovators: b};
	});
var _user$project$Models$ChatMessageReceiverData = F3(
	function (a, b, c) {
		return {id: a, name: b, is_organization: c};
	});
var _user$project$Models$TopInnovator = F5(
	function (a, b, c, d, e) {
		return {id: a, name: b, pic_uri: c, rating: d, country: e};
	});
var _user$project$Models$TopOrganization = F4(
	function (a, b, c, d) {
		return {id: a, name: b, pic_uri: c, country: d};
	});
var _user$project$Models$DataRegisteredWrapper = F2(
	function (a, b) {
		return {reg_data: a, error: b};
	});
var _user$project$Models$DataRegistered = F4(
	function (a, b, c, d) {
		return {id: a, name: b, email: c, token: d};
	});
var _user$project$Models$CompanyRegistration = F7(
	function (a, b, c, d, e, f, g) {
		return {name: a, email: b, password: c, country: d, termsOfServiceAgreemant: e, receiveNewsletterAgreement: f, registrationError: g};
	});
var _user$project$Models$InnovatorRegistration = F7(
	function (a, b, c, d, e, f, g) {
		return {full_name: a, email: b, password: c, country: d, termsOfServiceAgreemant: e, receiveNewsletterAgreement: f, registrationError: g};
	});
var _user$project$Models$AdminPanelSignInData = F2(
	function (a, b) {
		return {first_password: a, second_password: b};
	});
var _user$project$Models$RegisteredDataList = F2(
	function (a, b) {
		return {reg_data: a, error: b};
	});
var _user$project$Models$PromoRegData = F7(
	function (a, b, c, d, e, f, g) {
		return {id: a, full_name: b, email: c, prefered_organization: d, idea_id: e, short_description: f, register_date: g};
	});
var _user$project$Models$PromoRegistration = F5(
	function (a, b, c, d, e) {
		return {full_name: a, email: b, prefered_organization: c, short_description: d, error: e};
	});
var _user$project$Models$IncomingChatMessage = F7(
	function (a, b, c, d, e, f, g) {
		return {id: a, sender_id: b, receiver_id: c, body: d, sender_is_organization: e, receiver_is_organization: f, inserted_at: g};
	});
var _user$project$Models$IncomingUnredChatMessage = F8(
	function (a, b, c, d, e, f, g, h) {
		return {id: a, sender_id: b, receiver_id: c, body: d, sender_is_organization: e, receiver_is_organization: f, inserted_at: g, sender_picture_uri: h};
	});
var _user$project$Models$SignOutResponse = function (a) {
	return {response: a};
};
var _user$project$Models$Loaded = {ctor: 'Loaded'};
var _user$project$Models$Loading = {ctor: 'Loading'};
var _user$project$Models$Idle = {ctor: 'Idle'};
var _user$project$Models$Arm = {ctor: 'Arm'};
var _user$project$Models$Eng = {ctor: 'Eng'};
var _user$project$Models$PremiumInnovator = {ctor: 'PremiumInnovator'};
var _user$project$Models$PlusInnovator = {ctor: 'PlusInnovator'};
var _user$project$Models$BasicInnovator = {ctor: 'BasicInnovator'};
var _user$project$Models$FreeInnovator = {ctor: 'FreeInnovator'};
var _user$project$Models$NotSelectedForInnovators = {ctor: 'NotSelectedForInnovators'};
var _user$project$Models$MaxOrganization = {ctor: 'MaxOrganization'};
var _user$project$Models$PremiumOrganization = {ctor: 'PremiumOrganization'};
var _user$project$Models$PlusOrganization = {ctor: 'PlusOrganization'};
var _user$project$Models$BasicOrganization = {ctor: 'BasicOrganization'};
var _user$project$Models$NotSelectedForOrganizations = {ctor: 'NotSelectedForOrganizations'};
var _user$project$Models$NDAsPage = {ctor: 'NDAsPage'};
var _user$project$Models$ViewFullIdeaPage = {ctor: 'ViewFullIdeaPage'};
var _user$project$Models$ViewIdeaPage = {ctor: 'ViewIdeaPage'};
var _user$project$Models$SeeOtherOrganizationPage = {ctor: 'SeeOtherOrganizationPage'};
var _user$project$Models$SeeOtherInnovatorPage = {ctor: 'SeeOtherInnovatorPage'};
var _user$project$Models$SearchPage = {ctor: 'SearchPage'};
var _user$project$Models$TariffPlansPage = {ctor: 'TariffPlansPage'};
var _user$project$Models$SettingsPage = {ctor: 'SettingsPage'};
var _user$project$Models$NewIdeaPage = {ctor: 'NewIdeaPage'};
var _user$project$Models$ProfilePage = {ctor: 'ProfilePage'};
var _user$project$Models$NewsfeedPage = {ctor: 'NewsfeedPage'};
var _user$project$Models$HomePage = {ctor: 'HomePage'};
var _user$project$Models$MobileNDAsPage = {ctor: 'MobileNDAsPage'};
var _user$project$Models$MobileViewFullIdeaPage = {ctor: 'MobileViewFullIdeaPage'};
var _user$project$Models$MobileViewIdeaPage = {ctor: 'MobileViewIdeaPage'};
var _user$project$Models$MobileSeeOtherOrganizationPage = {ctor: 'MobileSeeOtherOrganizationPage'};
var _user$project$Models$MobileSeeOtherInnovatorPage = {ctor: 'MobileSeeOtherInnovatorPage'};
var _user$project$Models$MobileSearchPage = {ctor: 'MobileSearchPage'};
var _user$project$Models$MobilePostAnIdeaPage = {ctor: 'MobilePostAnIdeaPage'};
var _user$project$Models$MobileSettingsPage = {ctor: 'MobileSettingsPage'};
var _user$project$Models$MobileProfilePage = {ctor: 'MobileProfilePage'};
var _user$project$Models$MobileHomePage = {ctor: 'MobileHomePage'};
var _user$project$Models$Closed = {ctor: 'Closed'};
var _user$project$Models$Opened = {ctor: 'Opened'};

var _user$project$Ports$cacheAllData = _elm_lang$core$Native_Platform.outgoingPort(
	'cacheAllData',
	function (v) {
		return {
			loggedInMember: {id: v.loggedInMember.id, name: v.loggedInMember.name, email: v.loggedInMember.email, isOrganization: v.loggedInMember.isOrganization, token: v.loggedInMember.token},
			dashboardMobilePage: v.dashboardMobilePage,
			currentInnovatorExtended: {id: v.currentInnovatorExtended.id, name: v.currentInnovatorExtended.name, pic_uri: v.currentInnovatorExtended.pic_uri, rating: v.currentInnovatorExtended.rating, country: v.currentInnovatorExtended.country, email: v.currentInnovatorExtended.email, ideas_count: v.currentInnovatorExtended.ideas_count, innovators_plan_id: v.currentInnovatorExtended.innovators_plan_id, description: v.currentInnovatorExtended.description, about_me: v.currentInnovatorExtended.about_me, education: v.currentInnovatorExtended.education, experience: v.currentInnovatorExtended.experience, username: v.currentInnovatorExtended.username, phone: v.currentInnovatorExtended.phone, connections_count: v.currentInnovatorExtended.connections_count},
			currentOrganizationExtended: {id: v.currentOrganizationExtended.id, name: v.currentOrganizationExtended.name, pic_uri: v.currentOrganizationExtended.pic_uri, country: v.currentOrganizationExtended.country, email: v.currentOrganizationExtended.email, complete_ideas_count: v.currentOrganizationExtended.complete_ideas_count, organizations_plan_id: v.currentOrganizationExtended.organizations_plan_id, description: v.currentOrganizationExtended.description, webpage: v.currentOrganizationExtended.webpage, about_us: v.currentOrganizationExtended.about_us, industry: v.currentOrganizationExtended.industry, interested_industries: v.currentOrganizationExtended.interested_industries, username: v.currentOrganizationExtended.username, phone: v.currentOrganizationExtended.phone, rating: v.currentOrganizationExtended.rating, connections_count: v.currentOrganizationExtended.connections_count},
			postList: _elm_lang$core$Native_List.toArray(v.postList).map(
				function (v) {
					return {author_name: v.author_name, author_desc: v.author_desc, author_pic: v.author_pic, author_id: v.author_id, post_id: v.post_id, post_media_file: v.post_media_file, post_message: v.post_message, post_likes: v.post_likes};
				}),
			currentChatHistory: _elm_lang$core$Native_List.toArray(v.currentChatHistory).map(
				function (v) {
					return {id: v.id, sender_id: v.sender_id, receiver_id: v.receiver_id, body: v.body, sender_is_organization: v.sender_is_organization, receiver_is_organization: v.receiver_is_organization, inserted_at: v.inserted_at};
				}),
			pendingUnredMessages: _elm_lang$core$Native_List.toArray(v.pendingUnredMessages).map(
				function (v) {
					return {id: v.id, sender_id: v.sender_id, receiver_id: v.receiver_id, body: v.body, sender_is_organization: v.sender_is_organization, receiver_is_organization: v.receiver_is_organization, inserted_at: v.inserted_at, sender_picture_uri: v.sender_picture_uri};
				}),
			suggestedUsers: _elm_lang$core$Native_List.toArray(v.suggestedUsers).map(
				function (v) {
					return {id: v.id, name: v.name, description: v.description, picture: v.picture};
				}),
			notifications: _elm_lang$core$Native_List.toArray(v.notifications).map(
				function (v) {
					return {id: v.id, title: v.title, body: v.body, notificationType: v.notificationType, requestedIdeaId: v.requestedIdeaId};
				}),
			language: v.language,
			desktopPage: v.desktopPage,
			seeOtherInnovator: {id: v.seeOtherInnovator.id, name: v.seeOtherInnovator.name, pic_uri: v.seeOtherInnovator.pic_uri, rating: v.seeOtherInnovator.rating, country: v.seeOtherInnovator.country, email: v.seeOtherInnovator.email, ideas_count: v.seeOtherInnovator.ideas_count, innovators_plan_id: v.seeOtherInnovator.innovators_plan_id, description: v.seeOtherInnovator.description, about_me: v.seeOtherInnovator.about_me, education: v.seeOtherInnovator.education, experience: v.seeOtherInnovator.experience, username: v.seeOtherInnovator.username, phone: v.seeOtherInnovator.phone, connections_count: v.seeOtherInnovator.connections_count},
			seeOtherOrganization: {id: v.seeOtherOrganization.id, name: v.seeOtherOrganization.name, pic_uri: v.seeOtherOrganization.pic_uri, country: v.seeOtherOrganization.country, email: v.seeOtherOrganization.email, complete_ideas_count: v.seeOtherOrganization.complete_ideas_count, organizations_plan_id: v.seeOtherOrganization.organizations_plan_id, description: v.seeOtherOrganization.description, webpage: v.seeOtherOrganization.webpage, about_us: v.seeOtherOrganization.about_us, industry: v.seeOtherOrganization.industry, interested_industries: v.seeOtherOrganization.interested_industries, username: v.seeOtherOrganization.username, phone: v.seeOtherOrganization.phone, rating: v.seeOtherOrganization.rating, connections_count: v.seeOtherOrganization.connections_count},
			viewingCurrentIdea: {id: v.viewingCurrentIdea.id, short_description: v.viewingCurrentIdea.short_description, idea_name: v.viewingCurrentIdea.idea_name, industry: v.viewingCurrentIdea.industry, tags: v.viewingCurrentIdea.tags, price: v.viewingCurrentIdea.price, picture_uris: v.viewingCurrentIdea.picture_uris, video_uri: v.viewingCurrentIdea.video_uri, innovator_id: v.viewingCurrentIdea.innovator_id, innovator_name: v.viewingCurrentIdea.innovator_name, innovator_pic: v.viewingCurrentIdea.innovator_pic},
			viewingCurrentFullIdea: {id: v.viewingCurrentFullIdea.id, short_description: v.viewingCurrentFullIdea.short_description, idea_name: v.viewingCurrentFullIdea.idea_name, industry: v.viewingCurrentFullIdea.industry, tags: v.viewingCurrentFullIdea.tags, price: v.viewingCurrentFullIdea.price, picture_uris: v.viewingCurrentFullIdea.picture_uris, video_uri: v.viewingCurrentFullIdea.video_uri, innovator_id: v.viewingCurrentFullIdea.innovator_id, innovator_name: v.viewingCurrentFullIdea.innovator_name, innovator_pic: v.viewingCurrentFullIdea.innovator_pic, long_description: v.viewingCurrentFullIdea.long_description},
			mobilePageHistory: _elm_lang$core$Native_List.toArray(v.mobilePageHistory).map(
				function (v) {
					return v;
				}),
			pageHistory: _elm_lang$core$Native_List.toArray(v.pageHistory).map(
				function (v) {
					return v;
				}),
			signedNDAs: _elm_lang$core$Native_List.toArray(v.signedNDAs).map(
				function (v) {
					return {idea_id: v.idea_id, idea_name: v.idea_name, idea_industry: v.idea_industry, idea_price: v.idea_price, signing_date: v.signing_date};
				})
		};
	});
var _user$project$Ports$fetchCachedDataResponse = _elm_lang$core$Native_Platform.incomingPort(
	'fetchCachedDataResponse',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (loggedInMember) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (dashboardMobilePage) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (currentInnovatorExtended) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (currentOrganizationExtended) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (postList) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (currentChatHistory) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														function (pendingUnredMessages) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																function (suggestedUsers) {
																	return A2(
																		_elm_lang$core$Json_Decode$andThen,
																		function (notifications) {
																			return A2(
																				_elm_lang$core$Json_Decode$andThen,
																				function (language) {
																					return A2(
																						_elm_lang$core$Json_Decode$andThen,
																						function (desktopPage) {
																							return A2(
																								_elm_lang$core$Json_Decode$andThen,
																								function (seeOtherInnovator) {
																									return A2(
																										_elm_lang$core$Json_Decode$andThen,
																										function (seeOtherOrganization) {
																											return A2(
																												_elm_lang$core$Json_Decode$andThen,
																												function (viewingCurrentIdea) {
																													return A2(
																														_elm_lang$core$Json_Decode$andThen,
																														function (viewingCurrentFullIdea) {
																															return A2(
																																_elm_lang$core$Json_Decode$andThen,
																																function (mobilePageHistory) {
																																	return A2(
																																		_elm_lang$core$Json_Decode$andThen,
																																		function (pageHistory) {
																																			return A2(
																																				_elm_lang$core$Json_Decode$andThen,
																																				function (signedNDAs) {
																																					return _elm_lang$core$Json_Decode$succeed(
																																						{loggedInMember: loggedInMember, dashboardMobilePage: dashboardMobilePage, currentInnovatorExtended: currentInnovatorExtended, currentOrganizationExtended: currentOrganizationExtended, postList: postList, currentChatHistory: currentChatHistory, pendingUnredMessages: pendingUnredMessages, suggestedUsers: suggestedUsers, notifications: notifications, language: language, desktopPage: desktopPage, seeOtherInnovator: seeOtherInnovator, seeOtherOrganization: seeOtherOrganization, viewingCurrentIdea: viewingCurrentIdea, viewingCurrentFullIdea: viewingCurrentFullIdea, mobilePageHistory: mobilePageHistory, pageHistory: pageHistory, signedNDAs: signedNDAs});
																																				},
																																				A2(
																																					_elm_lang$core$Json_Decode$field,
																																					'signedNDAs',
																																					_elm_lang$core$Json_Decode$list(
																																						A2(
																																							_elm_lang$core$Json_Decode$andThen,
																																							function (idea_id) {
																																								return A2(
																																									_elm_lang$core$Json_Decode$andThen,
																																									function (idea_name) {
																																										return A2(
																																											_elm_lang$core$Json_Decode$andThen,
																																											function (idea_industry) {
																																												return A2(
																																													_elm_lang$core$Json_Decode$andThen,
																																													function (idea_price) {
																																														return A2(
																																															_elm_lang$core$Json_Decode$andThen,
																																															function (signing_date) {
																																																return _elm_lang$core$Json_Decode$succeed(
																																																	{idea_id: idea_id, idea_name: idea_name, idea_industry: idea_industry, idea_price: idea_price, signing_date: signing_date});
																																															},
																																															A2(_elm_lang$core$Json_Decode$field, 'signing_date', _elm_lang$core$Json_Decode$string));
																																													},
																																													A2(_elm_lang$core$Json_Decode$field, 'idea_price', _elm_lang$core$Json_Decode$string));
																																											},
																																											A2(_elm_lang$core$Json_Decode$field, 'idea_industry', _elm_lang$core$Json_Decode$string));
																																									},
																																									A2(_elm_lang$core$Json_Decode$field, 'idea_name', _elm_lang$core$Json_Decode$string));
																																							},
																																							A2(_elm_lang$core$Json_Decode$field, 'idea_id', _elm_lang$core$Json_Decode$int)))));
																																		},
																																		A2(
																																			_elm_lang$core$Json_Decode$field,
																																			'pageHistory',
																																			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)));
																																},
																																A2(
																																	_elm_lang$core$Json_Decode$field,
																																	'mobilePageHistory',
																																	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)));
																														},
																														A2(
																															_elm_lang$core$Json_Decode$field,
																															'viewingCurrentFullIdea',
																															A2(
																																_elm_lang$core$Json_Decode$andThen,
																																function (id) {
																																	return A2(
																																		_elm_lang$core$Json_Decode$andThen,
																																		function (short_description) {
																																			return A2(
																																				_elm_lang$core$Json_Decode$andThen,
																																				function (idea_name) {
																																					return A2(
																																						_elm_lang$core$Json_Decode$andThen,
																																						function (industry) {
																																							return A2(
																																								_elm_lang$core$Json_Decode$andThen,
																																								function (tags) {
																																									return A2(
																																										_elm_lang$core$Json_Decode$andThen,
																																										function (price) {
																																											return A2(
																																												_elm_lang$core$Json_Decode$andThen,
																																												function (picture_uris) {
																																													return A2(
																																														_elm_lang$core$Json_Decode$andThen,
																																														function (video_uri) {
																																															return A2(
																																																_elm_lang$core$Json_Decode$andThen,
																																																function (innovator_id) {
																																																	return A2(
																																																		_elm_lang$core$Json_Decode$andThen,
																																																		function (innovator_name) {
																																																			return A2(
																																																				_elm_lang$core$Json_Decode$andThen,
																																																				function (innovator_pic) {
																																																					return A2(
																																																						_elm_lang$core$Json_Decode$andThen,
																																																						function (long_description) {
																																																							return _elm_lang$core$Json_Decode$succeed(
																																																								{id: id, short_description: short_description, idea_name: idea_name, industry: industry, tags: tags, price: price, picture_uris: picture_uris, video_uri: video_uri, innovator_id: innovator_id, innovator_name: innovator_name, innovator_pic: innovator_pic, long_description: long_description});
																																																						},
																																																						A2(_elm_lang$core$Json_Decode$field, 'long_description', _elm_lang$core$Json_Decode$string));
																																																				},
																																																				A2(_elm_lang$core$Json_Decode$field, 'innovator_pic', _elm_lang$core$Json_Decode$string));
																																																		},
																																																		A2(_elm_lang$core$Json_Decode$field, 'innovator_name', _elm_lang$core$Json_Decode$string));
																																																},
																																																A2(_elm_lang$core$Json_Decode$field, 'innovator_id', _elm_lang$core$Json_Decode$int));
																																														},
																																														A2(_elm_lang$core$Json_Decode$field, 'video_uri', _elm_lang$core$Json_Decode$string));
																																												},
																																												A2(_elm_lang$core$Json_Decode$field, 'picture_uris', _elm_lang$core$Json_Decode$string));
																																										},
																																										A2(_elm_lang$core$Json_Decode$field, 'price', _elm_lang$core$Json_Decode$string));
																																								},
																																								A2(_elm_lang$core$Json_Decode$field, 'tags', _elm_lang$core$Json_Decode$string));
																																						},
																																						A2(_elm_lang$core$Json_Decode$field, 'industry', _elm_lang$core$Json_Decode$string));
																																				},
																																				A2(_elm_lang$core$Json_Decode$field, 'idea_name', _elm_lang$core$Json_Decode$string));
																																		},
																																		A2(_elm_lang$core$Json_Decode$field, 'short_description', _elm_lang$core$Json_Decode$string));
																																},
																																A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int))));
																												},
																												A2(
																													_elm_lang$core$Json_Decode$field,
																													'viewingCurrentIdea',
																													A2(
																														_elm_lang$core$Json_Decode$andThen,
																														function (id) {
																															return A2(
																																_elm_lang$core$Json_Decode$andThen,
																																function (short_description) {
																																	return A2(
																																		_elm_lang$core$Json_Decode$andThen,
																																		function (idea_name) {
																																			return A2(
																																				_elm_lang$core$Json_Decode$andThen,
																																				function (industry) {
																																					return A2(
																																						_elm_lang$core$Json_Decode$andThen,
																																						function (tags) {
																																							return A2(
																																								_elm_lang$core$Json_Decode$andThen,
																																								function (price) {
																																									return A2(
																																										_elm_lang$core$Json_Decode$andThen,
																																										function (picture_uris) {
																																											return A2(
																																												_elm_lang$core$Json_Decode$andThen,
																																												function (video_uri) {
																																													return A2(
																																														_elm_lang$core$Json_Decode$andThen,
																																														function (innovator_id) {
																																															return A2(
																																																_elm_lang$core$Json_Decode$andThen,
																																																function (innovator_name) {
																																																	return A2(
																																																		_elm_lang$core$Json_Decode$andThen,
																																																		function (innovator_pic) {
																																																			return _elm_lang$core$Json_Decode$succeed(
																																																				{id: id, short_description: short_description, idea_name: idea_name, industry: industry, tags: tags, price: price, picture_uris: picture_uris, video_uri: video_uri, innovator_id: innovator_id, innovator_name: innovator_name, innovator_pic: innovator_pic});
																																																		},
																																																		A2(_elm_lang$core$Json_Decode$field, 'innovator_pic', _elm_lang$core$Json_Decode$string));
																																																},
																																																A2(_elm_lang$core$Json_Decode$field, 'innovator_name', _elm_lang$core$Json_Decode$string));
																																														},
																																														A2(_elm_lang$core$Json_Decode$field, 'innovator_id', _elm_lang$core$Json_Decode$int));
																																												},
																																												A2(_elm_lang$core$Json_Decode$field, 'video_uri', _elm_lang$core$Json_Decode$string));
																																										},
																																										A2(_elm_lang$core$Json_Decode$field, 'picture_uris', _elm_lang$core$Json_Decode$string));
																																								},
																																								A2(_elm_lang$core$Json_Decode$field, 'price', _elm_lang$core$Json_Decode$string));
																																						},
																																						A2(_elm_lang$core$Json_Decode$field, 'tags', _elm_lang$core$Json_Decode$string));
																																				},
																																				A2(_elm_lang$core$Json_Decode$field, 'industry', _elm_lang$core$Json_Decode$string));
																																		},
																																		A2(_elm_lang$core$Json_Decode$field, 'idea_name', _elm_lang$core$Json_Decode$string));
																																},
																																A2(_elm_lang$core$Json_Decode$field, 'short_description', _elm_lang$core$Json_Decode$string));
																														},
																														A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int))));
																										},
																										A2(
																											_elm_lang$core$Json_Decode$field,
																											'seeOtherOrganization',
																											A2(
																												_elm_lang$core$Json_Decode$andThen,
																												function (id) {
																													return A2(
																														_elm_lang$core$Json_Decode$andThen,
																														function (name) {
																															return A2(
																																_elm_lang$core$Json_Decode$andThen,
																																function (pic_uri) {
																																	return A2(
																																		_elm_lang$core$Json_Decode$andThen,
																																		function (country) {
																																			return A2(
																																				_elm_lang$core$Json_Decode$andThen,
																																				function (email) {
																																					return A2(
																																						_elm_lang$core$Json_Decode$andThen,
																																						function (complete_ideas_count) {
																																							return A2(
																																								_elm_lang$core$Json_Decode$andThen,
																																								function (organizations_plan_id) {
																																									return A2(
																																										_elm_lang$core$Json_Decode$andThen,
																																										function (description) {
																																											return A2(
																																												_elm_lang$core$Json_Decode$andThen,
																																												function (webpage) {
																																													return A2(
																																														_elm_lang$core$Json_Decode$andThen,
																																														function (about_us) {
																																															return A2(
																																																_elm_lang$core$Json_Decode$andThen,
																																																function (industry) {
																																																	return A2(
																																																		_elm_lang$core$Json_Decode$andThen,
																																																		function (interested_industries) {
																																																			return A2(
																																																				_elm_lang$core$Json_Decode$andThen,
																																																				function (username) {
																																																					return A2(
																																																						_elm_lang$core$Json_Decode$andThen,
																																																						function (phone) {
																																																							return A2(
																																																								_elm_lang$core$Json_Decode$andThen,
																																																								function (rating) {
																																																									return A2(
																																																										_elm_lang$core$Json_Decode$andThen,
																																																										function (connections_count) {
																																																											return _elm_lang$core$Json_Decode$succeed(
																																																												{id: id, name: name, pic_uri: pic_uri, country: country, email: email, complete_ideas_count: complete_ideas_count, organizations_plan_id: organizations_plan_id, description: description, webpage: webpage, about_us: about_us, industry: industry, interested_industries: interested_industries, username: username, phone: phone, rating: rating, connections_count: connections_count});
																																																										},
																																																										A2(_elm_lang$core$Json_Decode$field, 'connections_count', _elm_lang$core$Json_Decode$int));
																																																								},
																																																								A2(_elm_lang$core$Json_Decode$field, 'rating', _elm_lang$core$Json_Decode$int));
																																																						},
																																																						A2(_elm_lang$core$Json_Decode$field, 'phone', _elm_lang$core$Json_Decode$string));
																																																				},
																																																				A2(_elm_lang$core$Json_Decode$field, 'username', _elm_lang$core$Json_Decode$string));
																																																		},
																																																		A2(_elm_lang$core$Json_Decode$field, 'interested_industries', _elm_lang$core$Json_Decode$string));
																																																},
																																																A2(_elm_lang$core$Json_Decode$field, 'industry', _elm_lang$core$Json_Decode$string));
																																														},
																																														A2(_elm_lang$core$Json_Decode$field, 'about_us', _elm_lang$core$Json_Decode$string));
																																												},
																																												A2(_elm_lang$core$Json_Decode$field, 'webpage', _elm_lang$core$Json_Decode$string));
																																										},
																																										A2(_elm_lang$core$Json_Decode$field, 'description', _elm_lang$core$Json_Decode$string));
																																								},
																																								A2(_elm_lang$core$Json_Decode$field, 'organizations_plan_id', _elm_lang$core$Json_Decode$int));
																																						},
																																						A2(_elm_lang$core$Json_Decode$field, 'complete_ideas_count', _elm_lang$core$Json_Decode$int));
																																				},
																																				A2(_elm_lang$core$Json_Decode$field, 'email', _elm_lang$core$Json_Decode$string));
																																		},
																																		A2(_elm_lang$core$Json_Decode$field, 'country', _elm_lang$core$Json_Decode$string));
																																},
																																A2(_elm_lang$core$Json_Decode$field, 'pic_uri', _elm_lang$core$Json_Decode$string));
																														},
																														A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
																												},
																												A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int))));
																								},
																								A2(
																									_elm_lang$core$Json_Decode$field,
																									'seeOtherInnovator',
																									A2(
																										_elm_lang$core$Json_Decode$andThen,
																										function (id) {
																											return A2(
																												_elm_lang$core$Json_Decode$andThen,
																												function (name) {
																													return A2(
																														_elm_lang$core$Json_Decode$andThen,
																														function (pic_uri) {
																															return A2(
																																_elm_lang$core$Json_Decode$andThen,
																																function (rating) {
																																	return A2(
																																		_elm_lang$core$Json_Decode$andThen,
																																		function (country) {
																																			return A2(
																																				_elm_lang$core$Json_Decode$andThen,
																																				function (email) {
																																					return A2(
																																						_elm_lang$core$Json_Decode$andThen,
																																						function (ideas_count) {
																																							return A2(
																																								_elm_lang$core$Json_Decode$andThen,
																																								function (innovators_plan_id) {
																																									return A2(
																																										_elm_lang$core$Json_Decode$andThen,
																																										function (description) {
																																											return A2(
																																												_elm_lang$core$Json_Decode$andThen,
																																												function (about_me) {
																																													return A2(
																																														_elm_lang$core$Json_Decode$andThen,
																																														function (education) {
																																															return A2(
																																																_elm_lang$core$Json_Decode$andThen,
																																																function (experience) {
																																																	return A2(
																																																		_elm_lang$core$Json_Decode$andThen,
																																																		function (username) {
																																																			return A2(
																																																				_elm_lang$core$Json_Decode$andThen,
																																																				function (phone) {
																																																					return A2(
																																																						_elm_lang$core$Json_Decode$andThen,
																																																						function (connections_count) {
																																																							return _elm_lang$core$Json_Decode$succeed(
																																																								{id: id, name: name, pic_uri: pic_uri, rating: rating, country: country, email: email, ideas_count: ideas_count, innovators_plan_id: innovators_plan_id, description: description, about_me: about_me, education: education, experience: experience, username: username, phone: phone, connections_count: connections_count});
																																																						},
																																																						A2(_elm_lang$core$Json_Decode$field, 'connections_count', _elm_lang$core$Json_Decode$int));
																																																				},
																																																				A2(_elm_lang$core$Json_Decode$field, 'phone', _elm_lang$core$Json_Decode$string));
																																																		},
																																																		A2(_elm_lang$core$Json_Decode$field, 'username', _elm_lang$core$Json_Decode$string));
																																																},
																																																A2(_elm_lang$core$Json_Decode$field, 'experience', _elm_lang$core$Json_Decode$string));
																																														},
																																														A2(_elm_lang$core$Json_Decode$field, 'education', _elm_lang$core$Json_Decode$string));
																																												},
																																												A2(_elm_lang$core$Json_Decode$field, 'about_me', _elm_lang$core$Json_Decode$string));
																																										},
																																										A2(_elm_lang$core$Json_Decode$field, 'description', _elm_lang$core$Json_Decode$string));
																																								},
																																								A2(_elm_lang$core$Json_Decode$field, 'innovators_plan_id', _elm_lang$core$Json_Decode$int));
																																						},
																																						A2(_elm_lang$core$Json_Decode$field, 'ideas_count', _elm_lang$core$Json_Decode$int));
																																				},
																																				A2(_elm_lang$core$Json_Decode$field, 'email', _elm_lang$core$Json_Decode$string));
																																		},
																																		A2(_elm_lang$core$Json_Decode$field, 'country', _elm_lang$core$Json_Decode$string));
																																},
																																A2(_elm_lang$core$Json_Decode$field, 'rating', _elm_lang$core$Json_Decode$int));
																														},
																														A2(_elm_lang$core$Json_Decode$field, 'pic_uri', _elm_lang$core$Json_Decode$string));
																												},
																												A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
																										},
																										A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int))));
																						},
																						A2(_elm_lang$core$Json_Decode$field, 'desktopPage', _elm_lang$core$Json_Decode$string));
																				},
																				A2(_elm_lang$core$Json_Decode$field, 'language', _elm_lang$core$Json_Decode$string));
																		},
																		A2(
																			_elm_lang$core$Json_Decode$field,
																			'notifications',
																			_elm_lang$core$Json_Decode$list(
																				A2(
																					_elm_lang$core$Json_Decode$andThen,
																					function (id) {
																						return A2(
																							_elm_lang$core$Json_Decode$andThen,
																							function (title) {
																								return A2(
																									_elm_lang$core$Json_Decode$andThen,
																									function (body) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											function (notificationType) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													function (requestedIdeaId) {
																														return _elm_lang$core$Json_Decode$succeed(
																															{id: id, title: title, body: body, notificationType: notificationType, requestedIdeaId: requestedIdeaId});
																													},
																													A2(_elm_lang$core$Json_Decode$field, 'requestedIdeaId', _elm_lang$core$Json_Decode$int));
																											},
																											A2(_elm_lang$core$Json_Decode$field, 'notificationType', _elm_lang$core$Json_Decode$string));
																									},
																									A2(_elm_lang$core$Json_Decode$field, 'body', _elm_lang$core$Json_Decode$string));
																							},
																							A2(_elm_lang$core$Json_Decode$field, 'title', _elm_lang$core$Json_Decode$string));
																					},
																					A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int)))));
																},
																A2(
																	_elm_lang$core$Json_Decode$field,
																	'suggestedUsers',
																	_elm_lang$core$Json_Decode$list(
																		A2(
																			_elm_lang$core$Json_Decode$andThen,
																			function (id) {
																				return A2(
																					_elm_lang$core$Json_Decode$andThen,
																					function (name) {
																						return A2(
																							_elm_lang$core$Json_Decode$andThen,
																							function (description) {
																								return A2(
																									_elm_lang$core$Json_Decode$andThen,
																									function (picture) {
																										return _elm_lang$core$Json_Decode$succeed(
																											{id: id, name: name, description: description, picture: picture});
																									},
																									A2(_elm_lang$core$Json_Decode$field, 'picture', _elm_lang$core$Json_Decode$string));
																							},
																							A2(_elm_lang$core$Json_Decode$field, 'description', _elm_lang$core$Json_Decode$string));
																					},
																					A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
																			},
																			A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int)))));
														},
														A2(
															_elm_lang$core$Json_Decode$field,
															'pendingUnredMessages',
															_elm_lang$core$Json_Decode$list(
																A2(
																	_elm_lang$core$Json_Decode$andThen,
																	function (id) {
																		return A2(
																			_elm_lang$core$Json_Decode$andThen,
																			function (sender_id) {
																				return A2(
																					_elm_lang$core$Json_Decode$andThen,
																					function (receiver_id) {
																						return A2(
																							_elm_lang$core$Json_Decode$andThen,
																							function (body) {
																								return A2(
																									_elm_lang$core$Json_Decode$andThen,
																									function (sender_is_organization) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											function (receiver_is_organization) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													function (inserted_at) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															function (sender_picture_uri) {
																																return _elm_lang$core$Json_Decode$succeed(
																																	{id: id, sender_id: sender_id, receiver_id: receiver_id, body: body, sender_is_organization: sender_is_organization, receiver_is_organization: receiver_is_organization, inserted_at: inserted_at, sender_picture_uri: sender_picture_uri});
																															},
																															A2(_elm_lang$core$Json_Decode$field, 'sender_picture_uri', _elm_lang$core$Json_Decode$string));
																													},
																													A2(_elm_lang$core$Json_Decode$field, 'inserted_at', _elm_lang$core$Json_Decode$string));
																											},
																											A2(_elm_lang$core$Json_Decode$field, 'receiver_is_organization', _elm_lang$core$Json_Decode$bool));
																									},
																									A2(_elm_lang$core$Json_Decode$field, 'sender_is_organization', _elm_lang$core$Json_Decode$bool));
																							},
																							A2(_elm_lang$core$Json_Decode$field, 'body', _elm_lang$core$Json_Decode$string));
																					},
																					A2(_elm_lang$core$Json_Decode$field, 'receiver_id', _elm_lang$core$Json_Decode$int));
																			},
																			A2(_elm_lang$core$Json_Decode$field, 'sender_id', _elm_lang$core$Json_Decode$int));
																	},
																	A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int)))));
												},
												A2(
													_elm_lang$core$Json_Decode$field,
													'currentChatHistory',
													_elm_lang$core$Json_Decode$list(
														A2(
															_elm_lang$core$Json_Decode$andThen,
															function (id) {
																return A2(
																	_elm_lang$core$Json_Decode$andThen,
																	function (sender_id) {
																		return A2(
																			_elm_lang$core$Json_Decode$andThen,
																			function (receiver_id) {
																				return A2(
																					_elm_lang$core$Json_Decode$andThen,
																					function (body) {
																						return A2(
																							_elm_lang$core$Json_Decode$andThen,
																							function (sender_is_organization) {
																								return A2(
																									_elm_lang$core$Json_Decode$andThen,
																									function (receiver_is_organization) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											function (inserted_at) {
																												return _elm_lang$core$Json_Decode$succeed(
																													{id: id, sender_id: sender_id, receiver_id: receiver_id, body: body, sender_is_organization: sender_is_organization, receiver_is_organization: receiver_is_organization, inserted_at: inserted_at});
																											},
																											A2(_elm_lang$core$Json_Decode$field, 'inserted_at', _elm_lang$core$Json_Decode$string));
																									},
																									A2(_elm_lang$core$Json_Decode$field, 'receiver_is_organization', _elm_lang$core$Json_Decode$bool));
																							},
																							A2(_elm_lang$core$Json_Decode$field, 'sender_is_organization', _elm_lang$core$Json_Decode$bool));
																					},
																					A2(_elm_lang$core$Json_Decode$field, 'body', _elm_lang$core$Json_Decode$string));
																			},
																			A2(_elm_lang$core$Json_Decode$field, 'receiver_id', _elm_lang$core$Json_Decode$int));
																	},
																	A2(_elm_lang$core$Json_Decode$field, 'sender_id', _elm_lang$core$Json_Decode$int));
															},
															A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int)))));
										},
										A2(
											_elm_lang$core$Json_Decode$field,
											'postList',
											_elm_lang$core$Json_Decode$list(
												A2(
													_elm_lang$core$Json_Decode$andThen,
													function (author_name) {
														return A2(
															_elm_lang$core$Json_Decode$andThen,
															function (author_desc) {
																return A2(
																	_elm_lang$core$Json_Decode$andThen,
																	function (author_pic) {
																		return A2(
																			_elm_lang$core$Json_Decode$andThen,
																			function (author_id) {
																				return A2(
																					_elm_lang$core$Json_Decode$andThen,
																					function (post_id) {
																						return A2(
																							_elm_lang$core$Json_Decode$andThen,
																							function (post_media_file) {
																								return A2(
																									_elm_lang$core$Json_Decode$andThen,
																									function (post_message) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											function (post_likes) {
																												return _elm_lang$core$Json_Decode$succeed(
																													{author_name: author_name, author_desc: author_desc, author_pic: author_pic, author_id: author_id, post_id: post_id, post_media_file: post_media_file, post_message: post_message, post_likes: post_likes});
																											},
																											A2(_elm_lang$core$Json_Decode$field, 'post_likes', _elm_lang$core$Json_Decode$int));
																									},
																									A2(_elm_lang$core$Json_Decode$field, 'post_message', _elm_lang$core$Json_Decode$string));
																							},
																							A2(_elm_lang$core$Json_Decode$field, 'post_media_file', _elm_lang$core$Json_Decode$string));
																					},
																					A2(_elm_lang$core$Json_Decode$field, 'post_id', _elm_lang$core$Json_Decode$int));
																			},
																			A2(_elm_lang$core$Json_Decode$field, 'author_id', _elm_lang$core$Json_Decode$int));
																	},
																	A2(_elm_lang$core$Json_Decode$field, 'author_pic', _elm_lang$core$Json_Decode$string));
															},
															A2(_elm_lang$core$Json_Decode$field, 'author_desc', _elm_lang$core$Json_Decode$string));
													},
													A2(_elm_lang$core$Json_Decode$field, 'author_name', _elm_lang$core$Json_Decode$string)))));
								},
								A2(
									_elm_lang$core$Json_Decode$field,
									'currentOrganizationExtended',
									A2(
										_elm_lang$core$Json_Decode$andThen,
										function (id) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (name) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														function (pic_uri) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																function (country) {
																	return A2(
																		_elm_lang$core$Json_Decode$andThen,
																		function (email) {
																			return A2(
																				_elm_lang$core$Json_Decode$andThen,
																				function (complete_ideas_count) {
																					return A2(
																						_elm_lang$core$Json_Decode$andThen,
																						function (organizations_plan_id) {
																							return A2(
																								_elm_lang$core$Json_Decode$andThen,
																								function (description) {
																									return A2(
																										_elm_lang$core$Json_Decode$andThen,
																										function (webpage) {
																											return A2(
																												_elm_lang$core$Json_Decode$andThen,
																												function (about_us) {
																													return A2(
																														_elm_lang$core$Json_Decode$andThen,
																														function (industry) {
																															return A2(
																																_elm_lang$core$Json_Decode$andThen,
																																function (interested_industries) {
																																	return A2(
																																		_elm_lang$core$Json_Decode$andThen,
																																		function (username) {
																																			return A2(
																																				_elm_lang$core$Json_Decode$andThen,
																																				function (phone) {
																																					return A2(
																																						_elm_lang$core$Json_Decode$andThen,
																																						function (rating) {
																																							return A2(
																																								_elm_lang$core$Json_Decode$andThen,
																																								function (connections_count) {
																																									return _elm_lang$core$Json_Decode$succeed(
																																										{id: id, name: name, pic_uri: pic_uri, country: country, email: email, complete_ideas_count: complete_ideas_count, organizations_plan_id: organizations_plan_id, description: description, webpage: webpage, about_us: about_us, industry: industry, interested_industries: interested_industries, username: username, phone: phone, rating: rating, connections_count: connections_count});
																																								},
																																								A2(_elm_lang$core$Json_Decode$field, 'connections_count', _elm_lang$core$Json_Decode$int));
																																						},
																																						A2(_elm_lang$core$Json_Decode$field, 'rating', _elm_lang$core$Json_Decode$int));
																																				},
																																				A2(_elm_lang$core$Json_Decode$field, 'phone', _elm_lang$core$Json_Decode$string));
																																		},
																																		A2(_elm_lang$core$Json_Decode$field, 'username', _elm_lang$core$Json_Decode$string));
																																},
																																A2(_elm_lang$core$Json_Decode$field, 'interested_industries', _elm_lang$core$Json_Decode$string));
																														},
																														A2(_elm_lang$core$Json_Decode$field, 'industry', _elm_lang$core$Json_Decode$string));
																												},
																												A2(_elm_lang$core$Json_Decode$field, 'about_us', _elm_lang$core$Json_Decode$string));
																										},
																										A2(_elm_lang$core$Json_Decode$field, 'webpage', _elm_lang$core$Json_Decode$string));
																								},
																								A2(_elm_lang$core$Json_Decode$field, 'description', _elm_lang$core$Json_Decode$string));
																						},
																						A2(_elm_lang$core$Json_Decode$field, 'organizations_plan_id', _elm_lang$core$Json_Decode$int));
																				},
																				A2(_elm_lang$core$Json_Decode$field, 'complete_ideas_count', _elm_lang$core$Json_Decode$int));
																		},
																		A2(_elm_lang$core$Json_Decode$field, 'email', _elm_lang$core$Json_Decode$string));
																},
																A2(_elm_lang$core$Json_Decode$field, 'country', _elm_lang$core$Json_Decode$string));
														},
														A2(_elm_lang$core$Json_Decode$field, 'pic_uri', _elm_lang$core$Json_Decode$string));
												},
												A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
										},
										A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int))));
						},
						A2(
							_elm_lang$core$Json_Decode$field,
							'currentInnovatorExtended',
							A2(
								_elm_lang$core$Json_Decode$andThen,
								function (id) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (name) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (pic_uri) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														function (rating) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																function (country) {
																	return A2(
																		_elm_lang$core$Json_Decode$andThen,
																		function (email) {
																			return A2(
																				_elm_lang$core$Json_Decode$andThen,
																				function (ideas_count) {
																					return A2(
																						_elm_lang$core$Json_Decode$andThen,
																						function (innovators_plan_id) {
																							return A2(
																								_elm_lang$core$Json_Decode$andThen,
																								function (description) {
																									return A2(
																										_elm_lang$core$Json_Decode$andThen,
																										function (about_me) {
																											return A2(
																												_elm_lang$core$Json_Decode$andThen,
																												function (education) {
																													return A2(
																														_elm_lang$core$Json_Decode$andThen,
																														function (experience) {
																															return A2(
																																_elm_lang$core$Json_Decode$andThen,
																																function (username) {
																																	return A2(
																																		_elm_lang$core$Json_Decode$andThen,
																																		function (phone) {
																																			return A2(
																																				_elm_lang$core$Json_Decode$andThen,
																																				function (connections_count) {
																																					return _elm_lang$core$Json_Decode$succeed(
																																						{id: id, name: name, pic_uri: pic_uri, rating: rating, country: country, email: email, ideas_count: ideas_count, innovators_plan_id: innovators_plan_id, description: description, about_me: about_me, education: education, experience: experience, username: username, phone: phone, connections_count: connections_count});
																																				},
																																				A2(_elm_lang$core$Json_Decode$field, 'connections_count', _elm_lang$core$Json_Decode$int));
																																		},
																																		A2(_elm_lang$core$Json_Decode$field, 'phone', _elm_lang$core$Json_Decode$string));
																																},
																																A2(_elm_lang$core$Json_Decode$field, 'username', _elm_lang$core$Json_Decode$string));
																														},
																														A2(_elm_lang$core$Json_Decode$field, 'experience', _elm_lang$core$Json_Decode$string));
																												},
																												A2(_elm_lang$core$Json_Decode$field, 'education', _elm_lang$core$Json_Decode$string));
																										},
																										A2(_elm_lang$core$Json_Decode$field, 'about_me', _elm_lang$core$Json_Decode$string));
																								},
																								A2(_elm_lang$core$Json_Decode$field, 'description', _elm_lang$core$Json_Decode$string));
																						},
																						A2(_elm_lang$core$Json_Decode$field, 'innovators_plan_id', _elm_lang$core$Json_Decode$int));
																				},
																				A2(_elm_lang$core$Json_Decode$field, 'ideas_count', _elm_lang$core$Json_Decode$int));
																		},
																		A2(_elm_lang$core$Json_Decode$field, 'email', _elm_lang$core$Json_Decode$string));
																},
																A2(_elm_lang$core$Json_Decode$field, 'country', _elm_lang$core$Json_Decode$string));
														},
														A2(_elm_lang$core$Json_Decode$field, 'rating', _elm_lang$core$Json_Decode$int));
												},
												A2(_elm_lang$core$Json_Decode$field, 'pic_uri', _elm_lang$core$Json_Decode$string));
										},
										A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
								},
								A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int))));
				},
				A2(_elm_lang$core$Json_Decode$field, 'dashboardMobilePage', _elm_lang$core$Json_Decode$string));
		},
		A2(
			_elm_lang$core$Json_Decode$field,
			'loggedInMember',
			A2(
				_elm_lang$core$Json_Decode$andThen,
				function (id) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (name) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (email) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (isOrganization) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (token) {
													return _elm_lang$core$Json_Decode$succeed(
														{id: id, name: name, email: email, isOrganization: isOrganization, token: token});
												},
												A2(_elm_lang$core$Json_Decode$field, 'token', _elm_lang$core$Json_Decode$string));
										},
										A2(_elm_lang$core$Json_Decode$field, 'isOrganization', _elm_lang$core$Json_Decode$bool));
								},
								A2(_elm_lang$core$Json_Decode$field, 'email', _elm_lang$core$Json_Decode$string));
						},
						A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
				},
				A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int)))));
var _user$project$Ports$clearCachedData = _elm_lang$core$Native_Platform.outgoingPort(
	'clearCachedData',
	function (v) {
		return v;
	});
var _user$project$Ports$showNDAConfirmDialog = _elm_lang$core$Native_Platform.outgoingPort(
	'showNDAConfirmDialog',
	function (v) {
		return {companyName: v.companyName, notifBody: v.notifBody, langString: v.langString};
	});
var _user$project$Ports$ndaRejected = _elm_lang$core$Native_Platform.incomingPort('ndaRejected', _elm_lang$core$Json_Decode$string);
var _user$project$Ports$ndaAccepted = _elm_lang$core$Native_Platform.incomingPort('ndaAccepted', _elm_lang$core$Json_Decode$string);
var _user$project$Ports$turnOnNewNotifsFetch = _elm_lang$core$Native_Platform.outgoingPort(
	'turnOnNewNotifsFetch',
	function (v) {
		return v;
	});
var _user$project$Ports$turnOffNewNotifsFetch = _elm_lang$core$Native_Platform.outgoingPort(
	'turnOffNewNotifsFetch',
	function (v) {
		return v;
	});
var _user$project$Ports$regularNewNotifsFetch = _elm_lang$core$Native_Platform.incomingPort('regularNewNotifsFetch', _elm_lang$core$Json_Decode$string);
var _user$project$Ports$sharePostOnFacebook = _elm_lang$core$Native_Platform.outgoingPort(
	'sharePostOnFacebook',
	function (v) {
		return v;
	});
var _user$project$Ports$shareProfileOnFacebook = _elm_lang$core$Native_Platform.outgoingPort(
	'shareProfileOnFacebook',
	function (v) {
		return v;
	});
var _user$project$Ports$submitOrgSettingsPicToFirebase = _elm_lang$core$Native_Platform.outgoingPort(
	'submitOrgSettingsPicToFirebase',
	function (v) {
		return v;
	});
var _user$project$Ports$replyWithOrgSettingsPicUri = _elm_lang$core$Native_Platform.incomingPort(
	'replyWithOrgSettingsPicUri',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (uri) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (error) {
					return _elm_lang$core$Json_Decode$succeed(
						{uri: uri, error: error});
				},
				A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'uri', _elm_lang$core$Json_Decode$string)));
var _user$project$Ports$submitSettingsPicToFirebase = _elm_lang$core$Native_Platform.outgoingPort(
	'submitSettingsPicToFirebase',
	function (v) {
		return v;
	});
var _user$project$Ports$replyWithSettingsPicUri = _elm_lang$core$Native_Platform.incomingPort(
	'replyWithSettingsPicUri',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (uri) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (error) {
					return _elm_lang$core$Json_Decode$succeed(
						{uri: uri, error: error});
				},
				A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'uri', _elm_lang$core$Json_Decode$string)));
var _user$project$Ports$initOrgSettingsMediaBtn = _elm_lang$core$Native_Platform.outgoingPort(
	'initOrgSettingsMediaBtn',
	function (v) {
		return v;
	});
var _user$project$Ports$getOrgSettingsImageName = _elm_lang$core$Native_Platform.incomingPort(
	'getOrgSettingsImageName',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (fileName) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (error) {
					return _elm_lang$core$Json_Decode$succeed(
						{fileName: fileName, error: error});
				},
				A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'fileName', _elm_lang$core$Json_Decode$string)));
var _user$project$Ports$initSettingsMediaBtn = _elm_lang$core$Native_Platform.outgoingPort(
	'initSettingsMediaBtn',
	function (v) {
		return v;
	});
var _user$project$Ports$getSettingsImageName = _elm_lang$core$Native_Platform.incomingPort(
	'getSettingsImageName',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (fileName) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (error) {
					return _elm_lang$core$Json_Decode$succeed(
						{fileName: fileName, error: error});
				},
				A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'fileName', _elm_lang$core$Json_Decode$string)));
var _user$project$Ports$markIncomingMessageAsRed = _elm_lang$core$Native_Platform.outgoingPort(
	'markIncomingMessageAsRed',
	function (v) {
		return {message_id: v.message_id, token: v.token};
	});
var _user$project$Ports$markAsRedChatMessage = _elm_lang$core$Native_Platform.outgoingPort(
	'markAsRedChatMessage',
	function (v) {
		return {message_id: v.message_id, token: v.token};
	});
var _user$project$Ports$replyToMarkAsRedWithSendersData = _elm_lang$core$Native_Platform.incomingPort(
	'replyToMarkAsRedWithSendersData',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (message_id) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (receiver_id) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (receiver_is_org) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (receiver_name) {
									return _elm_lang$core$Json_Decode$succeed(
										{message_id: message_id, receiver_id: receiver_id, receiver_is_org: receiver_is_org, receiver_name: receiver_name});
								},
								A2(_elm_lang$core$Json_Decode$field, 'receiver_name', _elm_lang$core$Json_Decode$string));
						},
						A2(_elm_lang$core$Json_Decode$field, 'receiver_is_org', _elm_lang$core$Json_Decode$bool));
				},
				A2(_elm_lang$core$Json_Decode$field, 'receiver_id', _elm_lang$core$Json_Decode$int));
		},
		A2(_elm_lang$core$Json_Decode$field, 'message_id', _elm_lang$core$Json_Decode$int)));
var _user$project$Ports$fetchMessageSenderPicture = _elm_lang$core$Native_Platform.outgoingPort(
	'fetchMessageSenderPicture',
	function (v) {
		return {id: v.id, sender_id: v.sender_id, receiver_id: v.receiver_id, body: v.body, sender_is_organization: v.sender_is_organization, receiver_is_organization: v.receiver_is_organization, inserted_at: v.inserted_at};
	});
var _user$project$Ports$replyWithUnredChatMessageWithPic = _elm_lang$core$Native_Platform.incomingPort(
	'replyWithUnredChatMessageWithPic',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (id) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (sender_id) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (receiver_id) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (body) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (sender_is_organization) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (receiver_is_organization) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														function (inserted_at) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																function (sender_picture_uri) {
																	return _elm_lang$core$Json_Decode$succeed(
																		{id: id, sender_id: sender_id, receiver_id: receiver_id, body: body, sender_is_organization: sender_is_organization, receiver_is_organization: receiver_is_organization, inserted_at: inserted_at, sender_picture_uri: sender_picture_uri});
																},
																A2(_elm_lang$core$Json_Decode$field, 'sender_picture_uri', _elm_lang$core$Json_Decode$string));
														},
														A2(_elm_lang$core$Json_Decode$field, 'inserted_at', _elm_lang$core$Json_Decode$string));
												},
												A2(_elm_lang$core$Json_Decode$field, 'receiver_is_organization', _elm_lang$core$Json_Decode$bool));
										},
										A2(_elm_lang$core$Json_Decode$field, 'sender_is_organization', _elm_lang$core$Json_Decode$bool));
								},
								A2(_elm_lang$core$Json_Decode$field, 'body', _elm_lang$core$Json_Decode$string));
						},
						A2(_elm_lang$core$Json_Decode$field, 'receiver_id', _elm_lang$core$Json_Decode$int));
				},
				A2(_elm_lang$core$Json_Decode$field, 'sender_id', _elm_lang$core$Json_Decode$int));
		},
		A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int)));
var _user$project$Ports$submitChatMessageToChannel = _elm_lang$core$Native_Platform.outgoingPort(
	'submitChatMessageToChannel',
	function (v) {
		return {body: v.body, from: v.from, receiver_is_organization: v.receiver_is_organization, sender_is_organization: v.sender_is_organization, to: v.to, token: v.token};
	});
var _user$project$Ports$incomingChatMessage = _elm_lang$core$Native_Platform.incomingPort(
	'incomingChatMessage',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (id) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (sender_id) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (receiver_id) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (body) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (sender_is_organization) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (receiver_is_organization) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														function (inserted_at) {
															return _elm_lang$core$Json_Decode$succeed(
																{id: id, sender_id: sender_id, receiver_id: receiver_id, body: body, sender_is_organization: sender_is_organization, receiver_is_organization: receiver_is_organization, inserted_at: inserted_at});
														},
														A2(_elm_lang$core$Json_Decode$field, 'inserted_at', _elm_lang$core$Json_Decode$string));
												},
												A2(_elm_lang$core$Json_Decode$field, 'receiver_is_organization', _elm_lang$core$Json_Decode$bool));
										},
										A2(_elm_lang$core$Json_Decode$field, 'sender_is_organization', _elm_lang$core$Json_Decode$bool));
								},
								A2(_elm_lang$core$Json_Decode$field, 'body', _elm_lang$core$Json_Decode$string));
						},
						A2(_elm_lang$core$Json_Decode$field, 'receiver_id', _elm_lang$core$Json_Decode$int));
				},
				A2(_elm_lang$core$Json_Decode$field, 'sender_id', _elm_lang$core$Json_Decode$int));
		},
		A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int)));
var _user$project$Ports$chatMessageSubmitError = _elm_lang$core$Native_Platform.incomingPort(
	'chatMessageSubmitError',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (uri) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (error) {
					return _elm_lang$core$Json_Decode$succeed(
						{uri: uri, error: error});
				},
				A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'uri', _elm_lang$core$Json_Decode$string)));
var _user$project$Ports$submitPicturesToFirebase = _elm_lang$core$Native_Platform.outgoingPort(
	'submitPicturesToFirebase',
	function (v) {
		return v;
	});
var _user$project$Ports$replyWithIdeaPictureUris = _elm_lang$core$Native_Platform.incomingPort(
	'replyWithIdeaPictureUris',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (uri) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (error) {
					return _elm_lang$core$Json_Decode$succeed(
						{uri: uri, error: error});
				},
				A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'uri', _elm_lang$core$Json_Decode$string)));
var _user$project$Ports$getIdeaPicName = _elm_lang$core$Native_Platform.incomingPort(
	'getIdeaPicName',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (fileName) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (error) {
					return _elm_lang$core$Json_Decode$succeed(
						{fileName: fileName, error: error});
				},
				A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'fileName', _elm_lang$core$Json_Decode$string)));
var _user$project$Ports$submitVideoFileToFirebase = _elm_lang$core$Native_Platform.outgoingPort(
	'submitVideoFileToFirebase',
	function (v) {
		return v;
	});
var _user$project$Ports$replyWithIdeaVideoFileUri = _elm_lang$core$Native_Platform.incomingPort(
	'replyWithIdeaVideoFileUri',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (uri) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (error) {
					return _elm_lang$core$Json_Decode$succeed(
						{uri: uri, error: error});
				},
				A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'uri', _elm_lang$core$Json_Decode$string)));
var _user$project$Ports$getIdeaVideoName = _elm_lang$core$Native_Platform.incomingPort(
	'getIdeaVideoName',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (fileName) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (error) {
					return _elm_lang$core$Json_Decode$succeed(
						{fileName: fileName, error: error});
				},
				A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'fileName', _elm_lang$core$Json_Decode$string)));
var _user$project$Ports$submitMediaFileToFirebase = _elm_lang$core$Native_Platform.outgoingPort(
	'submitMediaFileToFirebase',
	function (v) {
		return v;
	});
var _user$project$Ports$replyWithPostMediaFileUri = _elm_lang$core$Native_Platform.incomingPort(
	'replyWithPostMediaFileUri',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (uri) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (error) {
					return _elm_lang$core$Json_Decode$succeed(
						{uri: uri, error: error});
				},
				A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'uri', _elm_lang$core$Json_Decode$string)));
var _user$project$Ports$getPostImageName = _elm_lang$core$Native_Platform.incomingPort(
	'getPostImageName',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (fileName) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (error) {
					return _elm_lang$core$Json_Decode$succeed(
						{fileName: fileName, error: error});
				},
				A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'fileName', _elm_lang$core$Json_Decode$string)));
var _user$project$Ports$reverseBackgroundImage = _elm_lang$core$Native_Platform.outgoingPort(
	'reverseBackgroundImage',
	function (v) {
		return v;
	});
var _user$project$Ports$setWhiteBackground = _elm_lang$core$Native_Platform.outgoingPort(
	'setWhiteBackground',
	function (v) {
		return v;
	});
var _user$project$Ports$showPromoRegistrationConfirmDialog = _elm_lang$core$Native_Platform.outgoingPort(
	'showPromoRegistrationConfirmDialog',
	function (v) {
		return v;
	});
var _user$project$Ports$initPostMediaBtn = _elm_lang$core$Native_Platform.outgoingPort(
	'initPostMediaBtn',
	function (v) {
		return v;
	});
var _user$project$Ports$initIdeaMediaBtns = _elm_lang$core$Native_Platform.outgoingPort(
	'initIdeaMediaBtns',
	function (v) {
		return v;
	});
var _user$project$Ports$initFakeInterOpForLocationSwitch = _elm_lang$core$Native_Platform.outgoingPort(
	'initFakeInterOpForLocationSwitch',
	function (v) {
		return v;
	});
var _user$project$Ports$sendFakeInterOpResponseForLocationSwitch = _elm_lang$core$Native_Platform.incomingPort('sendFakeInterOpResponseForLocationSwitch', _elm_lang$core$Json_Decode$string);
var _user$project$Ports$initFakeInterOp3 = _elm_lang$core$Native_Platform.outgoingPort(
	'initFakeInterOp3',
	function (v) {
		return v;
	});
var _user$project$Ports$sendFakeInterOpResponse3 = _elm_lang$core$Native_Platform.incomingPort('sendFakeInterOpResponse3', _elm_lang$core$Json_Decode$string);
var _user$project$Ports$initFakeInterOp2 = _elm_lang$core$Native_Platform.outgoingPort(
	'initFakeInterOp2',
	function (v) {
		return v;
	});
var _user$project$Ports$sendFakeInterOpResponse2 = _elm_lang$core$Native_Platform.incomingPort('sendFakeInterOpResponse2', _elm_lang$core$Json_Decode$string);
var _user$project$Ports$initFakeInterOp = _elm_lang$core$Native_Platform.outgoingPort(
	'initFakeInterOp',
	function (v) {
		return v;
	});
var _user$project$Ports$sendFakeInterOpResponse = _elm_lang$core$Native_Platform.incomingPort('sendFakeInterOpResponse', _elm_lang$core$Json_Decode$string);
var _user$project$Ports$PostImageChooserData = F2(
	function (a, b) {
		return {fileName: a, error: b};
	});
var _user$project$Ports$MediaFileChooserData = F2(
	function (a, b) {
		return {fileName: a, error: b};
	});
var _user$project$Ports$PostMediaUriData = F2(
	function (a, b) {
		return {uri: a, error: b};
	});
var _user$project$Ports$NewChatMessageWrapper = F6(
	function (a, b, c, d, e, f) {
		return {body: a, from: b, receiver_is_organization: c, sender_is_organization: d, to: e, token: f};
	});
var _user$project$Ports$MarkMessageAsRedWrapper = F2(
	function (a, b) {
		return {message_id: a, token: b};
	});
var _user$project$Ports$ChatMessageSenderData = F4(
	function (a, b, c, d) {
		return {message_id: a, receiver_id: b, receiver_is_org: c, receiver_name: d};
	});
var _user$project$Ports$NDADataWrapper = F3(
	function (a, b, c) {
		return {companyName: a, notifBody: b, langString: c};
	});

var _user$project$Messages$OnTestMessage = {ctor: 'OnTestMessage'};
var _user$project$Messages$OnOpenNDAsIdea = function (a) {
	return {ctor: 'OnOpenNDAsIdea', _0: a};
};
var _user$project$Messages$OnFetchSignedNdasCompleted = function (a) {
	return {ctor: 'OnFetchSignedNdasCompleted', _0: a};
};
var _user$project$Messages$OnSwitchNDAsPage = {ctor: 'OnSwitchNDAsPage'};
var _user$project$Messages$OnDoubleLocationSwitch = function (a) {
	return {ctor: 'OnDoubleLocationSwitch', _0: a};
};
var _user$project$Messages$OnSwitchToHomePage = function (a) {
	return {ctor: 'OnSwitchToHomePage', _0: a};
};
var _user$project$Messages$OnSwitchToDashboard = {ctor: 'OnSwitchToDashboard'};
var _user$project$Messages$OnFetchCachedDataCompleted = function (a) {
	return {ctor: 'OnFetchCachedDataCompleted', _0: a};
};
var _user$project$Messages$OnSaveNdaCallCompleted = function (a) {
	return {ctor: 'OnSaveNdaCallCompleted', _0: a};
};
var _user$project$Messages$OnNDARejected = function (a) {
	return {ctor: 'OnNDARejected', _0: a};
};
var _user$project$Messages$OnNDAAccepted = function (a) {
	return {ctor: 'OnNDAAccepted', _0: a};
};
var _user$project$Messages$OnViewFullIdeaData = F3(
	function (a, b, c) {
		return {ctor: 'OnViewFullIdeaData', _0: a, _1: b, _2: c};
	});
var _user$project$Messages$OnGetFullIdeaDataCompleted = function (a) {
	return {ctor: 'OnGetFullIdeaDataCompleted', _0: a};
};
var _user$project$Messages$OnAcceptRejectFullDescInitiated = F2(
	function (a, b) {
		return {ctor: 'OnAcceptRejectFullDescInitiated', _0: a, _1: b};
	});
var _user$project$Messages$OnAcceptRejectFullDescCompleted = function (a) {
	return {ctor: 'OnAcceptRejectFullDescCompleted', _0: a};
};
var _user$project$Messages$OnFullDescRequestInitiated = F2(
	function (a, b) {
		return {ctor: 'OnFullDescRequestInitiated', _0: a, _1: b};
	});
var _user$project$Messages$OnFullDescRequestCompleted = function (a) {
	return {ctor: 'OnFullDescRequestCompleted', _0: a};
};
var _user$project$Messages$OnViewIdeaPageSwitch = function (a) {
	return {ctor: 'OnViewIdeaPageSwitch', _0: a};
};
var _user$project$Messages$OnToggleMobileSearchInput = {ctor: 'OnToggleMobileSearchInput'};
var _user$project$Messages$OnConnectInitiated = F2(
	function (a, b) {
		return {ctor: 'OnConnectInitiated', _0: a, _1: b};
	});
var _user$project$Messages$OnCheckConnectionAndConnectCompleted = function (a) {
	return {ctor: 'OnCheckConnectionAndConnectCompleted', _0: a};
};
var _user$project$Messages$OnSeeOtherOrganization = function (a) {
	return {ctor: 'OnSeeOtherOrganization', _0: a};
};
var _user$project$Messages$OnSeeOtherInnovator = function (a) {
	return {ctor: 'OnSeeOtherInnovator', _0: a};
};
var _user$project$Messages$OnSubmitSearch = {ctor: 'OnSubmitSearch'};
var _user$project$Messages$OnInputSearch = function (a) {
	return {ctor: 'OnInputSearch', _0: a};
};
var _user$project$Messages$OnProcessSearchCompleted = function (a) {
	return {ctor: 'OnProcessSearchCompleted', _0: a};
};
var _user$project$Messages$OnShareProfileOnFacebook = function (a) {
	return {ctor: 'OnShareProfileOnFacebook', _0: a};
};
var _user$project$Messages$OnSharePostOnFacebook = function (a) {
	return {ctor: 'OnSharePostOnFacebook', _0: a};
};
var _user$project$Messages$OnSubmitComment = {ctor: 'OnSubmitComment'};
var _user$project$Messages$OnCurrentPostCommentInput = function (a) {
	return {ctor: 'OnCurrentPostCommentInput', _0: a};
};
var _user$project$Messages$OnPostCommentsClicked = function (a) {
	return {ctor: 'OnPostCommentsClicked', _0: a};
};
var _user$project$Messages$OnPostCommentsFetchCompleted = function (a) {
	return {ctor: 'OnPostCommentsFetchCompleted', _0: a};
};
var _user$project$Messages$OnPostCommentSubmitCompleted = function (a) {
	return {ctor: 'OnPostCommentSubmitCompleted', _0: a};
};
var _user$project$Messages$OnPostLikedCompleted = function (a) {
	return {ctor: 'OnPostLikedCompleted', _0: a};
};
var _user$project$Messages$OnPostLikeClicked = function (a) {
	return {ctor: 'OnPostLikeClicked', _0: a};
};
var _user$project$Messages$OnSwitchLang = function (a) {
	return {ctor: 'OnSwitchLang', _0: a};
};
var _user$project$Messages$OnRegularNewNotifsFetch = function (a) {
	return {ctor: 'OnRegularNewNotifsFetch', _0: a};
};
var _user$project$Messages$OnMarkNotifAsRedCompleted = function (a) {
	return {ctor: 'OnMarkNotifAsRedCompleted', _0: a};
};
var _user$project$Messages$OnNewNotifItemClick = function (a) {
	return {ctor: 'OnNewNotifItemClick', _0: a};
};
var _user$project$Messages$OnNewNotifsVisibilityToggle = {ctor: 'OnNewNotifsVisibilityToggle'};
var _user$project$Messages$OnFetchNewNotificationsCompleted = function (a) {
	return {ctor: 'OnFetchNewNotificationsCompleted', _0: a};
};
var _user$project$Messages$OnUpdateOrganizationSettingsCompleted = function (a) {
	return {ctor: 'OnUpdateOrganizationSettingsCompleted', _0: a};
};
var _user$project$Messages$OnGetUploadedOrgSettingsPicUri = function (a) {
	return {ctor: 'OnGetUploadedOrgSettingsPicUri', _0: a};
};
var _user$project$Messages$OnOrganizationSettingsPicNameReceived = function (a) {
	return {ctor: 'OnOrganizationSettingsPicNameReceived', _0: a};
};
var _user$project$Messages$OnGetFakeInterOpResponse3 = function (a) {
	return {ctor: 'OnGetFakeInterOpResponse3', _0: a};
};
var _user$project$Messages$OnOrganizationSettingsSaveChanges = {ctor: 'OnOrganizationSettingsSaveChanges'};
var _user$project$Messages$OnOrganizationSettingsDescriptionInput = function (a) {
	return {ctor: 'OnOrganizationSettingsDescriptionInput', _0: a};
};
var _user$project$Messages$OnOrganizationSettingsWebpageInput = function (a) {
	return {ctor: 'OnOrganizationSettingsWebpageInput', _0: a};
};
var _user$project$Messages$OnOrganizationSettingsChangePasswordInput = function (a) {
	return {ctor: 'OnOrganizationSettingsChangePasswordInput', _0: a};
};
var _user$project$Messages$OnOrganizationSettingsCountryInput = function (a) {
	return {ctor: 'OnOrganizationSettingsCountryInput', _0: a};
};
var _user$project$Messages$OnOrganizationSettingsInterestedIndustriesInput = function (a) {
	return {ctor: 'OnOrganizationSettingsInterestedIndustriesInput', _0: a};
};
var _user$project$Messages$OnOrganizationSettingsIndustryInput = function (a) {
	return {ctor: 'OnOrganizationSettingsIndustryInput', _0: a};
};
var _user$project$Messages$OnOrganizationSettingsAboutInput = function (a) {
	return {ctor: 'OnOrganizationSettingsAboutInput', _0: a};
};
var _user$project$Messages$OnOrganizationSettingsEmailInput = function (a) {
	return {ctor: 'OnOrganizationSettingsEmailInput', _0: a};
};
var _user$project$Messages$OnOrganizationSettingsPhoneInput = function (a) {
	return {ctor: 'OnOrganizationSettingsPhoneInput', _0: a};
};
var _user$project$Messages$OnOrganizationSettingsNameInput = function (a) {
	return {ctor: 'OnOrganizationSettingsNameInput', _0: a};
};
var _user$project$Messages$OnOrganizationSettingsUsernameInput = function (a) {
	return {ctor: 'OnOrganizationSettingsUsernameInput', _0: a};
};
var _user$project$Messages$OnSelectTariffPlan = function (a) {
	return {ctor: 'OnSelectTariffPlan', _0: a};
};
var _user$project$Messages$OnSubscribeTariffPlanCompleted = function (a) {
	return {ctor: 'OnSubscribeTariffPlanCompleted', _0: a};
};
var _user$project$Messages$OnUpdateInnovatorSettingsCompleted = function (a) {
	return {ctor: 'OnUpdateInnovatorSettingsCompleted', _0: a};
};
var _user$project$Messages$OnGetUploadedSettingsPicUri = function (a) {
	return {ctor: 'OnGetUploadedSettingsPicUri', _0: a};
};
var _user$project$Messages$OnGetFakeInterOpResponse2 = function (a) {
	return {ctor: 'OnGetFakeInterOpResponse2', _0: a};
};
var _user$project$Messages$OnInnovatorSettingsPicNameReceived = function (a) {
	return {ctor: 'OnInnovatorSettingsPicNameReceived', _0: a};
};
var _user$project$Messages$OnInnovatorSettingsSaveChanges = {ctor: 'OnInnovatorSettingsSaveChanges'};
var _user$project$Messages$OnInnovatorSettingsChangePasswordInput = function (a) {
	return {ctor: 'OnInnovatorSettingsChangePasswordInput', _0: a};
};
var _user$project$Messages$OnInnovatorSettingsCountryInput = function (a) {
	return {ctor: 'OnInnovatorSettingsCountryInput', _0: a};
};
var _user$project$Messages$OnInnovatorSettingsExperienceInput = function (a) {
	return {ctor: 'OnInnovatorSettingsExperienceInput', _0: a};
};
var _user$project$Messages$OnInnovatorSettingsEducationInput = function (a) {
	return {ctor: 'OnInnovatorSettingsEducationInput', _0: a};
};
var _user$project$Messages$OnInnovatorSettingsAboutInput = function (a) {
	return {ctor: 'OnInnovatorSettingsAboutInput', _0: a};
};
var _user$project$Messages$OnInnovatorSettingsEmailInput = function (a) {
	return {ctor: 'OnInnovatorSettingsEmailInput', _0: a};
};
var _user$project$Messages$OnInnovatorSettingsPhoneInput = function (a) {
	return {ctor: 'OnInnovatorSettingsPhoneInput', _0: a};
};
var _user$project$Messages$OnInnovatorSettingsSurnameInput = function (a) {
	return {ctor: 'OnInnovatorSettingsSurnameInput', _0: a};
};
var _user$project$Messages$OnInnovatorSettingsNameInput = function (a) {
	return {ctor: 'OnInnovatorSettingsNameInput', _0: a};
};
var _user$project$Messages$OnInnovatorSettingsUsernameInput = function (a) {
	return {ctor: 'OnInnovatorSettingsUsernameInput', _0: a};
};
var _user$project$Messages$OnOrgSettingsChangePasswordEditable = {ctor: 'OnOrgSettingsChangePasswordEditable'};
var _user$project$Messages$OnOrgSettingsCountryEditable = {ctor: 'OnOrgSettingsCountryEditable'};
var _user$project$Messages$OnOrgSettingsInterestedIndustriesEditable = {ctor: 'OnOrgSettingsInterestedIndustriesEditable'};
var _user$project$Messages$OnOrgSettingsIndustryEditable = {ctor: 'OnOrgSettingsIndustryEditable'};
var _user$project$Messages$OnOrgSettingsDescriptionEditable = {ctor: 'OnOrgSettingsDescriptionEditable'};
var _user$project$Messages$OnOrgSettingsAboutEditable = {ctor: 'OnOrgSettingsAboutEditable'};
var _user$project$Messages$OnOrgSettingsEmailEditable = {ctor: 'OnOrgSettingsEmailEditable'};
var _user$project$Messages$OnOrgSettingsPhoneEditable = {ctor: 'OnOrgSettingsPhoneEditable'};
var _user$project$Messages$OnOrgSettingsWebpageEditable = {ctor: 'OnOrgSettingsWebpageEditable'};
var _user$project$Messages$OnOrgSettingsNameEditable = {ctor: 'OnOrgSettingsNameEditable'};
var _user$project$Messages$OnOrgSettingsUsernameEditable = {ctor: 'OnOrgSettingsUsernameEditable'};
var _user$project$Messages$OnSettingsChangePasswordEditable = {ctor: 'OnSettingsChangePasswordEditable'};
var _user$project$Messages$OnSettingsCountryEditable = {ctor: 'OnSettingsCountryEditable'};
var _user$project$Messages$OnSettingsExperienceEditable = {ctor: 'OnSettingsExperienceEditable'};
var _user$project$Messages$OnSettingsEducationEditable = {ctor: 'OnSettingsEducationEditable'};
var _user$project$Messages$OnSettingsAboutEditable = {ctor: 'OnSettingsAboutEditable'};
var _user$project$Messages$OnSettingsEmailEditable = {ctor: 'OnSettingsEmailEditable'};
var _user$project$Messages$OnSettingsPhoneEditable = {ctor: 'OnSettingsPhoneEditable'};
var _user$project$Messages$OnSettingsSurnameEditable = {ctor: 'OnSettingsSurnameEditable'};
var _user$project$Messages$OnSettingsNameEditable = {ctor: 'OnSettingsNameEditable'};
var _user$project$Messages$OnSettingsUsernameEditable = {ctor: 'OnSettingsUsernameEditable'};
var _user$project$Messages$OnSwitchTariffPlansPage = {ctor: 'OnSwitchTariffPlansPage'};
var _user$project$Messages$OnSwitchSettingsPage = {ctor: 'OnSwitchSettingsPage'};
var _user$project$Messages$OnMakeConnectionInitiated = function (a) {
	return {ctor: 'OnMakeConnectionInitiated', _0: a};
};
var _user$project$Messages$OnMakeConnectionCompleted = function (a) {
	return {ctor: 'OnMakeConnectionCompleted', _0: a};
};
var _user$project$Messages$OnFetchSuggestionsCompleted = function (a) {
	return {ctor: 'OnFetchSuggestionsCompleted', _0: a};
};
var _user$project$Messages$OnMarkMessageAsRedReply = function (a) {
	return {ctor: 'OnMarkMessageAsRedReply', _0: a};
};
var _user$project$Messages$OnUnredChatMessageClick = function (a) {
	return {ctor: 'OnUnredChatMessageClick', _0: a};
};
var _user$project$Messages$OnNewMessagesNotifsVisibilityToggle = {ctor: 'OnNewMessagesNotifsVisibilityToggle'};
var _user$project$Messages$OnFetchUnredChatMessagesCompleted = function (a) {
	return {ctor: 'OnFetchUnredChatMessagesCompleted', _0: a};
};
var _user$project$Messages$OnExtendedUnredMessageIncome = function (a) {
	return {ctor: 'OnExtendedUnredMessageIncome', _0: a};
};
var _user$project$Messages$OnChatHistoryFetchCompleted = function (a) {
	return {ctor: 'OnChatHistoryFetchCompleted', _0: a};
};
var _user$project$Messages$OnChatMessageError = function (a) {
	return {ctor: 'OnChatMessageError', _0: a};
};
var _user$project$Messages$OnIncomingChatMessage = function (a) {
	return {ctor: 'OnIncomingChatMessage', _0: a};
};
var _user$project$Messages$OnSubmitChatMessage = {ctor: 'OnSubmitChatMessage'};
var _user$project$Messages$OnInputChatMessage = function (a) {
	return {ctor: 'OnInputChatMessage', _0: a};
};
var _user$project$Messages$OnToggleChatWindow = function (a) {
	return {ctor: 'OnToggleChatWindow', _0: a};
};
var _user$project$Messages$OnGetIdeaPictureUris = function (a) {
	return {ctor: 'OnGetIdeaPictureUris', _0: a};
};
var _user$project$Messages$OnGetFakeInterOpResponse = function (a) {
	return {ctor: 'OnGetFakeInterOpResponse', _0: a};
};
var _user$project$Messages$OnGetUploadedVideoFileUri = function (a) {
	return {ctor: 'OnGetUploadedVideoFileUri', _0: a};
};
var _user$project$Messages$OnIdeaVideoNameChoosen = function (a) {
	return {ctor: 'OnIdeaVideoNameChoosen', _0: a};
};
var _user$project$Messages$OnIdeaPicNameChoosen = function (a) {
	return {ctor: 'OnIdeaPicNameChoosen', _0: a};
};
var _user$project$Messages$OnNewIdeaSubmit = {ctor: 'OnNewIdeaSubmit'};
var _user$project$Messages$OnNewIdeaLongDescriptionInput = function (a) {
	return {ctor: 'OnNewIdeaLongDescriptionInput', _0: a};
};
var _user$project$Messages$OnNewIdeaPriceInput = function (a) {
	return {ctor: 'OnNewIdeaPriceInput', _0: a};
};
var _user$project$Messages$OnNewIdeaShortDescriptionInput = function (a) {
	return {ctor: 'OnNewIdeaShortDescriptionInput', _0: a};
};
var _user$project$Messages$OnNewIdeaTagsInput = function (a) {
	return {ctor: 'OnNewIdeaTagsInput', _0: a};
};
var _user$project$Messages$OnNewIdeaIndustryInput = function (a) {
	return {ctor: 'OnNewIdeaIndustryInput', _0: a};
};
var _user$project$Messages$OnNewIdeaNameInput = function (a) {
	return {ctor: 'OnNewIdeaNameInput', _0: a};
};
var _user$project$Messages$OnMobileDashboardNewIdeaPageVisible = {ctor: 'OnMobileDashboardNewIdeaPageVisible'};
var _user$project$Messages$OnDashboardNewIdeaPageVisible = {ctor: 'OnDashboardNewIdeaPageVisible'};
var _user$project$Messages$OnFetchExtendedPostsCompleted = function (a) {
	return {ctor: 'OnFetchExtendedPostsCompleted', _0: a};
};
var _user$project$Messages$OnSubmitIdeaCompleted = function (a) {
	return {ctor: 'OnSubmitIdeaCompleted', _0: a};
};
var _user$project$Messages$OnSubmitPostCompleted = function (a) {
	return {ctor: 'OnSubmitPostCompleted', _0: a};
};
var _user$project$Messages$OnSubmitPost = {ctor: 'OnSubmitPost'};
var _user$project$Messages$OnGetUploadedMediaFileUri = function (a) {
	return {ctor: 'OnGetUploadedMediaFileUri', _0: a};
};
var _user$project$Messages$OnPostMessageInput = function (a) {
	return {ctor: 'OnPostMessageInput', _0: a};
};
var _user$project$Messages$OnPostImageNameChoosen = function (a) {
	return {ctor: 'OnPostImageNameChoosen', _0: a};
};
var _user$project$Messages$OnContactUsFormSubmitCompleted = function (a) {
	return {ctor: 'OnContactUsFormSubmitCompleted', _0: a};
};
var _user$project$Messages$OnContactUsFormSubmit = {ctor: 'OnContactUsFormSubmit'};
var _user$project$Messages$OnContactUsMessageInput = function (a) {
	return {ctor: 'OnContactUsMessageInput', _0: a};
};
var _user$project$Messages$OnContactUsEmailInput = function (a) {
	return {ctor: 'OnContactUsEmailInput', _0: a};
};
var _user$project$Messages$OnContactUsNameInput = function (a) {
	return {ctor: 'OnContactUsNameInput', _0: a};
};
var _user$project$Messages$OnSubscribeMaxOrganization = {ctor: 'OnSubscribeMaxOrganization'};
var _user$project$Messages$OnSubscribePremiumOrganization = {ctor: 'OnSubscribePremiumOrganization'};
var _user$project$Messages$OnSubscribePlusOrganization = {ctor: 'OnSubscribePlusOrganization'};
var _user$project$Messages$OnSubscribeBasicOrganization = {ctor: 'OnSubscribeBasicOrganization'};
var _user$project$Messages$OnSubscribePremiumInnovators = {ctor: 'OnSubscribePremiumInnovators'};
var _user$project$Messages$OnSubscribePlusInnovators = {ctor: 'OnSubscribePlusInnovators'};
var _user$project$Messages$OnSubscribeBasicInnovators = {ctor: 'OnSubscribeBasicInnovators'};
var _user$project$Messages$OnSubscribeFreeInnovators = {ctor: 'OnSubscribeFreeInnovators'};
var _user$project$Messages$OnGetOrganizationDataCompleted = function (a) {
	return {ctor: 'OnGetOrganizationDataCompleted', _0: a};
};
var _user$project$Messages$OnGetInnovatorDataCompleted = function (a) {
	return {ctor: 'OnGetInnovatorDataCompleted', _0: a};
};
var _user$project$Messages$OnSignOutCompleted = function (a) {
	return {ctor: 'OnSignOutCompleted', _0: a};
};
var _user$project$Messages$OnSignOutInitiated = {ctor: 'OnSignOutInitiated'};
var _user$project$Messages$OnDashboardMobileSettingsPageOpen = {ctor: 'OnDashboardMobileSettingsPageOpen'};
var _user$project$Messages$OnDashboardMobileProfilePageOpen = {ctor: 'OnDashboardMobileProfilePageOpen'};
var _user$project$Messages$OnDashboardMobileHomePageOpen = {ctor: 'OnDashboardMobileHomePageOpen'};
var _user$project$Messages$OnLocationChangeProfilePage = {ctor: 'OnLocationChangeProfilePage'};
var _user$project$Messages$OnSwitchDashboardOptionsVisible = {ctor: 'OnSwitchDashboardOptionsVisible'};
var _user$project$Messages$OnLoggingInMemberCompleted = function (a) {
	return {ctor: 'OnLoggingInMemberCompleted', _0: a};
};
var _user$project$Messages$OnLoggingInMemberLogin = {ctor: 'OnLoggingInMemberLogin'};
var _user$project$Messages$OnLoggingInMemberPasswordInput = function (a) {
	return {ctor: 'OnLoggingInMemberPasswordInput', _0: a};
};
var _user$project$Messages$OnLoggingInMemberUsernameInput = function (a) {
	return {ctor: 'OnLoggingInMemberUsernameInput', _0: a};
};
var _user$project$Messages$TopMembersFetchCompleted = function (a) {
	return {ctor: 'TopMembersFetchCompleted', _0: a};
};
var _user$project$Messages$InnovatorRegisterCompleted = function (a) {
	return {ctor: 'InnovatorRegisterCompleted', _0: a};
};
var _user$project$Messages$OnInnovatorRegistrationSubmit = {ctor: 'OnInnovatorRegistrationSubmit'};
var _user$project$Messages$OnInnovatorRegistrationReceiveNewletterCheck = {ctor: 'OnInnovatorRegistrationReceiveNewletterCheck'};
var _user$project$Messages$OnInnovatorRegistrationTSAgreementCheck = {ctor: 'OnInnovatorRegistrationTSAgreementCheck'};
var _user$project$Messages$OnInnovatorRegistrationCountryInput = function (a) {
	return {ctor: 'OnInnovatorRegistrationCountryInput', _0: a};
};
var _user$project$Messages$OnInnovatorRegistrationPasswordInput = function (a) {
	return {ctor: 'OnInnovatorRegistrationPasswordInput', _0: a};
};
var _user$project$Messages$OnInnovatorRegistrationEmailInput = function (a) {
	return {ctor: 'OnInnovatorRegistrationEmailInput', _0: a};
};
var _user$project$Messages$OnInnovatorRegistrationNameInput = function (a) {
	return {ctor: 'OnInnovatorRegistrationNameInput', _0: a};
};
var _user$project$Messages$CompanyRegisterCompleted = function (a) {
	return {ctor: 'CompanyRegisterCompleted', _0: a};
};
var _user$project$Messages$OnCompanyRegistrationSubmit = {ctor: 'OnCompanyRegistrationSubmit'};
var _user$project$Messages$OnCompanyRegistrationReceiveNewletterCheck = {ctor: 'OnCompanyRegistrationReceiveNewletterCheck'};
var _user$project$Messages$OnCompanyRegistrationTSAgreementCheck = {ctor: 'OnCompanyRegistrationTSAgreementCheck'};
var _user$project$Messages$OnCompanyRegistrationCountryInput = function (a) {
	return {ctor: 'OnCompanyRegistrationCountryInput', _0: a};
};
var _user$project$Messages$OnCompanyRegistrationPasswordInput = function (a) {
	return {ctor: 'OnCompanyRegistrationPasswordInput', _0: a};
};
var _user$project$Messages$OnCompanyRegistrationEmailInput = function (a) {
	return {ctor: 'OnCompanyRegistrationEmailInput', _0: a};
};
var _user$project$Messages$OnCompanyRegistrationNameInput = function (a) {
	return {ctor: 'OnCompanyRegistrationNameInput', _0: a};
};
var _user$project$Messages$OnMobileFaqViewOpen = {ctor: 'OnMobileFaqViewOpen'};
var _user$project$Messages$OnMobileContactUsViewOpen = {ctor: 'OnMobileContactUsViewOpen'};
var _user$project$Messages$OnMobileAboutUsViewOpen = {ctor: 'OnMobileAboutUsViewOpen'};
var _user$project$Messages$OnMobileTarrifPlansViewOpen = {ctor: 'OnMobileTarrifPlansViewOpen'};
var _user$project$Messages$OnMobilePricingOrganizationsViewOpen = {ctor: 'OnMobilePricingOrganizationsViewOpen'};
var _user$project$Messages$OnMobilePricingIdeaGeneratorsViewOpen = {ctor: 'OnMobilePricingIdeaGeneratorsViewOpen'};
var _user$project$Messages$OnMobilePricingToggle = {ctor: 'OnMobilePricingToggle'};
var _user$project$Messages$OnMobileOrganizationsViewOpen = {ctor: 'OnMobileOrganizationsViewOpen'};
var _user$project$Messages$OnMobileIdeaGeneratorsViewOpen = {ctor: 'OnMobileIdeaGeneratorsViewOpen'};
var _user$project$Messages$OnMobileMenuOpen = {ctor: 'OnMobileMenuOpen'};
var _user$project$Messages$OnMobileRegisterIdeaGeneratorViewOpen = {ctor: 'OnMobileRegisterIdeaGeneratorViewOpen'};
var _user$project$Messages$OnMobileRegisterCompanyViewOpen = {ctor: 'OnMobileRegisterCompanyViewOpen'};
var _user$project$Messages$OnMobileGetStartedViewOpen = {ctor: 'OnMobileGetStartedViewOpen'};
var _user$project$Messages$OnAdminPanelSignIn = {ctor: 'OnAdminPanelSignIn'};
var _user$project$Messages$OnAdminPanelSecondPasswordInput = function (a) {
	return {ctor: 'OnAdminPanelSecondPasswordInput', _0: a};
};
var _user$project$Messages$OnAdminPanelFirstPasswordInput = function (a) {
	return {ctor: 'OnAdminPanelFirstPasswordInput', _0: a};
};
var _user$project$Messages$AdminPanelSignInCompleted = function (a) {
	return {ctor: 'AdminPanelSignInCompleted', _0: a};
};
var _user$project$Messages$PromoRegistrationCallCompleted = function (a) {
	return {ctor: 'PromoRegistrationCallCompleted', _0: a};
};
var _user$project$Messages$OnLandingSignUpMobileClick = {ctor: 'OnLandingSignUpMobileClick'};
var _user$project$Messages$OnLandingSignUp = {ctor: 'OnLandingSignUp'};
var _user$project$Messages$OnLandingShortIdeaType = function (a) {
	return {ctor: 'OnLandingShortIdeaType', _0: a};
};
var _user$project$Messages$OnLandingCompanyType = function (a) {
	return {ctor: 'OnLandingCompanyType', _0: a};
};
var _user$project$Messages$OnLandingEmailType = function (a) {
	return {ctor: 'OnLandingEmailType', _0: a};
};
var _user$project$Messages$OnLandingUsernameType = function (a) {
	return {ctor: 'OnLandingUsernameType', _0: a};
};
var _user$project$Messages$OnCompanyRegistrationOpen = {ctor: 'OnCompanyRegistrationOpen'};
var _user$project$Messages$OnIdeaGeneratorRegistrationOpen = {ctor: 'OnIdeaGeneratorRegistrationOpen'};
var _user$project$Messages$OnLoginButtonSwitch = {ctor: 'OnLoginButtonSwitch'};
var _user$project$Messages$OnGetStartedButtonsSwitch = {ctor: 'OnGetStartedButtonsSwitch'};
var _user$project$Messages$OnPricingClose = {ctor: 'OnPricingClose'};
var _user$project$Messages$OnPricingOpen = {ctor: 'OnPricingOpen'};
var _user$project$Messages$OnLocationChange = function (a) {
	return {ctor: 'OnLocationChange', _0: a};
};

var _user$project$AboutUsView$aboutUsMobileView = function (model) {
	var vis = model.mobileAboutUsView ? {ctor: '_Tuple2', _0: 'display', _1: 'initial'} : {ctor: '_Tuple2', _0: 'display', _1: 'none'};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityMobile'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('about-us'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: vis,
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'bottom', _1: '10px'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'left', _1: '3px'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h5,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('About Us'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Tons of innovative ideas are born every day, even every hour, but are quite often not put into action as the right users in need of them are not easy to be found, or idea generators do not know how or whom to approach. On the other hand, there are a lot of companies/organizations seeking/looking for fresh, innovative ideas or solutions, but have limited resources and/or do not know where to find them.'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('That\'s where our platform provides a helping hand. Innovities is here to help connect both idea generators and companies who are looking for them.'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('You have a great idea or you need a solution for your business? Get registered and be a part of the world where ideas can turn into solution.'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$AboutUsView$aboutUsViewTab = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityTab'),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('about-us-t'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '50vw'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h3,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '3em'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('About Us'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '5vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5vw'},
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Tons of innovative ideas are born every day, even every hour, but are quite often not put into action as the right users in need of them are not easy to be found, or idea generators do not know how or whom to approach. On the other hand, there are a lot of companies/organizations seeking/looking for fresh, innovative ideas or solutions, but have limited resources and/or do not know where to find them.'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '5vw'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5vw'},
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('That\'s where our platform provides a helping hand. Innovities is here to help connect both idea generators and companies who are looking for them.'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '5vw'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5vw'},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('You have a great idea or you need a solution for your business? Get registered and be a part of the world where ideas can turn into solution.'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$AboutUsView$aboutUsView = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('responsiveVisibility'),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('about-us'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '50vw'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h3,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '3em'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('About Us'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '15vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '15vw'},
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Tons of innovative ideas are born every day, even every hour, but are quite often not put into action as the right users in need of them are not easy to be found, or idea generators do not know how or whom to approach. On the other hand, there are a lot of companies/organizations seeking/looking for fresh, innovative ideas or solutions, but have limited resources and/or do not know where to find them.'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '15vw'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '15vw'},
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('That\'s where our platform provides a helping hand. Innovities is here to help connect both idea generators and companies who are looking for them.'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '15vw'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '15vw'},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('You have a great idea or you need a solution for your business? Get registered and be a part of the world where ideas can turn into solution.'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	});

var _user$project$AdminPanelView$adminPanelLoginView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-flex-middle'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '10%'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-bottom'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnAdminPanelFirstPasswordInput),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$placeholder('First Password'),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnAdminPanelSecondPasswordInput),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$placeholder('Second Password'),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(model.adminPanelSignInError),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnAdminPanelSignIn),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('uk-button-primary'),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Մուտք'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$AdminPanelView$registeredDataWrapper = function (data) {
	return A2(
		_elm_lang$html$Html$li,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-margin-small-bottom'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid skyblue'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '25px'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('uk-child-width-1-3'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(data.id)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'yellow'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('   |   '),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(data.full_name),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'yellow'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('   |   '),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(data.email),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'yellow'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('   |   '),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(data.prefered_organization),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(data.short_description),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(data.register_date),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$AdminPanelView$registeredDataListView = function (model) {
	var ll = _elm_lang$core$List$length(model.adminPanelRegDataList);
	return _elm_lang$core$Native_Utils.eq(ll, 0) ? A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '50%'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'blue'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Գրանցված տվյալներ չկան'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$ul,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '80vh'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'overflow', _1: 'auto'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$List$map,
					_user$project$AdminPanelView$registeredDataWrapper,
					_elm_lang$core$List$reverse(model.adminPanelRegDataList))),
			_1: {ctor: '[]'}
		});
};
var _user$project$AdminPanelView$adminView = function (model) {
	return model.adminPanelSignedIn ? _user$project$AdminPanelView$registeredDataListView(model) : _user$project$AdminPanelView$adminPanelLoginView(model);
};

var _user$project$ChatWindowView$chatHistoryItemView = F3(
	function (currentUserId, currentUserIsOrg, item) {
		var alignments = (_elm_lang$core$Native_Utils.eq(currentUserId, item.sender_id) && _elm_lang$core$Native_Utils.eq(currentUserIsOrg, item.sender_is_organization)) ? {ctor: '_Tuple2', _0: 'text-align', _1: 'right'} : {ctor: '_Tuple2', _0: 'text-align', _1: 'left'};
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '2%'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-8%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
											_1: {
												ctor: '::',
												_0: alignments,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(item.inserted_at),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-11%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
											_1: {
												ctor: '::',
												_0: alignments,
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(item.body),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-2%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'lightgrey'},
											_1: {
												ctor: '::',
												_0: alignments,
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('___________________'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$ChatWindowView$chatWindowView = function (model) {
	var currentUser = model.loggedInMember;
	var chatHistory = model.currentChatHistory;
	var chatHistoryItems = A2(
		_elm_lang$core$List$map,
		A2(_user$project$ChatWindowView$chatHistoryItemView, currentUser.id, currentUser.isOrganization),
		_elm_lang$core$List$reverse(chatHistory));
	var messageData = model.newChatMessageData;
	var errors = _elm_lang$core$String$isEmpty(messageData.error) ? A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'}) : A2(
		_elm_lang$html$Html$span,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(messageData.error),
			_1: {ctor: '[]'}
		});
	var chatWindowVisibility = model.chatWindowOpened ? {ctor: '_Tuple2', _0: 'display', _1: 'initial'} : {ctor: '_Tuple2', _0: 'display', _1: 'none'};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('chatWindowStyle'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: chatWindowVisibility,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '7%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'background', _1: 'orange'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '2%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2%'},
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(messageData.receiver_name),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_user$project$Messages$OnToggleChatWindow(_elm_lang$core$Maybe$Nothing)),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline'},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('X'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: errors,
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'height', _1: '63%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'overflow', _1: 'auto'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding', _1: '0'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin', _1: '0'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						chatHistoryItems),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('subChatWindowStyle'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$textarea,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnInputChatMessage),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'resize', _1: 'none'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$rows(3),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$placeholder('Your message goes here...'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$value(messageData.body),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSubmitChatMessage),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '5%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '5%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'backgroundColor', _1: 'cornflowerblue'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Send'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};

var _user$project$ContactUsView$contactUsViewMobile = function (model) {
	var inputedData = model.contactUsData;
	var name = inputedData.name;
	var email = inputedData.email;
	var message = inputedData.message;
	var error = inputedData.error;
	var errorColor = A2(_elm_lang$core$String$contains, 'message has been submitted', error) ? {ctor: '_Tuple2', _0: 'color', _1: 'green'} : {ctor: '_Tuple2', _0: 'color', _1: 'red'};
	var vis = model.mobileContactView ? {ctor: '_Tuple2', _0: 'display', _1: 'initial'} : {ctor: '_Tuple2', _0: 'display', _1: 'none'};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityMobile'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('contacts'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: vis,
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'bottom', _1: '10px'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'left', _1: '0'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h5,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Contact us'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnContactUsNameInput),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '50vw'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$placeholder('First Name'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$value(name),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnContactUsEmailInput),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '50vw'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$placeholder('E-mail'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(email),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$textarea,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnContactUsMessageInput),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1.5em'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$placeholder('Message'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$rows(4),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$value(message),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: errorColor,
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.3em'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(error),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$button,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnContactUsFormSubmit),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '50vw'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.3em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '0.3em'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}),
														_1: {ctor: '[]'}
													}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Send'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$ContactUsView$contactUsViewTab = function (model) {
	var inputedData = model.contactUsData;
	var name = inputedData.name;
	var email = inputedData.email;
	var message = inputedData.message;
	var error = inputedData.error;
	var errorColor = A2(_elm_lang$core$String$contains, 'message has been submitted', error) ? {ctor: '_Tuple2', _0: 'color', _1: 'lime'} : {ctor: '_Tuple2', _0: 'color', _1: 'red'};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityTab'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('contacts-t'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '70vw'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Contact us'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnContactUsNameInput),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '34vw'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1vw'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$placeholder('First Name'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$value(name),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnContactUsEmailInput),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '34vw'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1vw'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$placeholder('E-mail'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(email),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$textarea,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnContactUsMessageInput),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '70vw'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
													_1: {ctor: '[]'}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$placeholder('Message'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$rows(4),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$value(message),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: errorColor,
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.3em'},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(error),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnContactUsFormSubmit),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'padding', _1: '1.5em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '0.5em'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Send'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};
var _user$project$ContactUsView$contactUsView = function (model) {
	var inputedData = model.contactUsData;
	var name = inputedData.name;
	var email = inputedData.email;
	var message = inputedData.message;
	var error = inputedData.error;
	var errorColor = A2(_elm_lang$core$String$contains, 'message has been submitted', error) ? {ctor: '_Tuple2', _0: 'color', _1: 'lime'} : {ctor: '_Tuple2', _0: 'color', _1: 'red'};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibility'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('contacts'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '50vw'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Contact us'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnContactUsNameInput),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '24vw'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1vw'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$placeholder('First Name'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$value(name),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnContactUsEmailInput),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '24vw'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1vw'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$placeholder('E-mail'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(email),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$textarea,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnContactUsMessageInput),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '50vw'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
													_1: {ctor: '[]'}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$placeholder('Message'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$rows(4),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$value(message),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: errorColor,
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.3em'},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(error),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnContactUsFormSubmit),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'padding', _1: '1.5em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '0.5em'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Send'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};

var _user$project$CountriesList$countriesMap = A2(
	_elm_lang$core$Basics_ops['++'],
	{
		ctor: '::',
		_0: A2(_user$project$Models$MapItem, 'Angola', 'Անգոլա'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Models$MapItem, 'Cameroon', 'Կամերուն'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Models$MapItem, 'Central African Republic', 'Կենտրոնաաֆրիկյան Հանրապետություն'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Models$MapItem, 'Chad', 'Չադ'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Models$MapItem, 'Congo', 'Կոնգոյի Հանրապետություն'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Models$MapItem, 'Congo, The Democratic Republic of the', 'Կոնգոյի Դեմոկրատական Հանրապետություն'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Models$MapItem, 'Equatorial Guinea', 'Հասարակածային Գվինեա'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Models$MapItem, 'Gabon', 'Գաբոն'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Models$MapItem, 'Sao Tome and Principe', 'Սան Տոմե և Պրինսիպի'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Models$MapItem, 'South Sudan', 'Հարավային Սուդան'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: A2(_user$project$Models$MapItem, 'Burundi', 'Բուրունդի'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Models$MapItem, 'Comoros', 'Կոմորյան կղզիներ'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Models$MapItem, 'Djibouti', 'Ջիբութի'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Models$MapItem, 'Eritrea', 'Էրիթրեա'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Models$MapItem, 'Ethiopia', 'Եթովպիա'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Models$MapItem, 'Kenya', 'Քենիա'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Models$MapItem, 'Madagascar', 'Մադագասկար'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Models$MapItem, 'Malawi', 'Մալավի'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Models$MapItem, 'Mauritius', 'Մավրիկիոս'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Models$MapItem, 'Mayotte', 'Մայոտ'),
												_1: {
													ctor: '::',
													_0: A2(_user$project$Models$MapItem, 'Mozambique', 'Մոզամբիկ'),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Models$MapItem, 'Reunion', 'Ռեյունիոն'),
														_1: {
															ctor: '::',
															_0: A2(_user$project$Models$MapItem, 'Rwanda', 'Ռուանդա'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: A2(_user$project$Models$MapItem, 'Seychelles', 'Սեյշելյան կղզիներ'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Models$MapItem, 'Somalia', 'Սոմալի'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Models$MapItem, 'Tanzania, United Republic of', 'Տանզանիա'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Models$MapItem, 'Uganda', 'Ուգանդա'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Models$MapItem, 'Zambia', 'Զամբիա'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Models$MapItem, 'Zimbabwe', 'Զիմբաբվե'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Models$MapItem, 'Algeria', 'Ալժիր'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Models$MapItem, 'Egypt', 'Եգիպտոս'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Models$MapItem, 'Libya', 'Լիբիա'),
												_1: {
													ctor: '::',
													_0: A2(_user$project$Models$MapItem, 'Morocco', 'Մարոկկո'),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Models$MapItem, 'Sudan', 'Սուդան'),
														_1: {
															ctor: '::',
															_0: A2(_user$project$Models$MapItem, 'Tunisia', 'Թունիս'),
															_1: {
																ctor: '::',
																_0: A2(_user$project$Models$MapItem, 'Western Sahara', 'Արևմտյան Սահարա'),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(_user$project$Models$MapItem, 'Botswana', 'Բոտսվանա'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Models$MapItem, 'Lesotho', 'Լեսոթո'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Models$MapItem, 'Namibia', 'Նամիբիա'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Models$MapItem, 'South Africa', 'Հարավաֆրիկյան Հանրապետություն'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Models$MapItem, 'Swaziland', 'Սվազիլենդ'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Models$MapItem, 'Benin', 'Բենին'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Models$MapItem, 'Burkina Faso', 'Բուրկինա Ֆասո'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Models$MapItem, 'Cape Verde', 'Կաբո Վերդե'),
												_1: {
													ctor: '::',
													_0: A2(_user$project$Models$MapItem, 'Côte D\'Ivoire', 'Կոտ դ\'Իվուար'),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Models$MapItem, 'Gambia', 'Գամբիա'),
														_1: {
															ctor: '::',
															_0: A2(_user$project$Models$MapItem, 'Ghana', 'Գանա'),
															_1: {
																ctor: '::',
																_0: A2(_user$project$Models$MapItem, 'Guinea', 'Գվինեա'),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: A2(_user$project$Models$MapItem, 'Guinea-Bissau', 'Գվինեա Բիսաու'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Models$MapItem, 'Liberia', 'Լիբերիա'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Models$MapItem, 'Mali', 'Մալի'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Models$MapItem, 'Mauritania', 'Մավրիտանիա'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Models$MapItem, 'Niger', 'Նիգեր'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Models$MapItem, 'Nigeria', 'Նիգերիա'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Models$MapItem, 'Senegal', 'Սենեգալ'),
												_1: {
													ctor: '::',
													_0: A2(_user$project$Models$MapItem, 'Sierra Leone', 'Սյեռա Լեոնե'),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Models$MapItem, 'Togo', 'Տոգո'),
														_1: {
															ctor: '::',
															_0: A2(_user$project$Models$MapItem, 'Anguilla', 'Անգիլիա'),
															_1: {
																ctor: '::',
																_0: A2(_user$project$Models$MapItem, 'Antigua and Barbuda', 'Անտիգուա և Բարբուդա'),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$Models$MapItem, 'Aruba', 'Արուբա'),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: A2(_user$project$Models$MapItem, 'Bahamas', 'Բահամյան կղզիներ'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Models$MapItem, 'Barbados', 'Բարբադոս'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Models$MapItem, 'Cayman Islands', 'Կայմանյան կղզիներ'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Models$MapItem, 'Cuba', 'Կուբա'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Models$MapItem, 'Dominica', 'Դոմինիկա'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Models$MapItem, 'Dominican Republic', 'Դոմինիկյան Հանրապետություն'),
												_1: {
													ctor: '::',
													_0: A2(_user$project$Models$MapItem, 'Grenada', 'Գրենադա'),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Models$MapItem, 'Guadeloupe', 'Գվադելուպա'),
														_1: {
															ctor: '::',
															_0: A2(_user$project$Models$MapItem, 'Haiti', 'Հայիթի'),
															_1: {
																ctor: '::',
																_0: A2(_user$project$Models$MapItem, 'Jamaica', 'Ճամայկա'),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$Models$MapItem, 'Martinique', 'Մարտինկա'),
																	_1: {
																		ctor: '::',
																		_0: A2(_user$project$Models$MapItem, 'Montserrat', 'Մոնթսերատ'),
																		_1: {
																			ctor: '::',
																			_0: A2(_user$project$Models$MapItem, 'Netherlands Antilles', 'Նիդերլանդական Անտիլներ'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: A2(_user$project$Models$MapItem, 'Puerto Rico', 'Պուերտո Ռիկո'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Models$MapItem, 'Saint Kitts and Nevis', 'Սենթ Քիթս'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Models$MapItem, 'Saint Lucia', 'Սենթ Լյուսիա'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Models$MapItem, 'Saint Vincent and the Grenadines', 'Սենտ Վինսենթ և Գերնադիններ'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Models$MapItem, 'Trinidad and Tobago', 'Տրինիդադ եւ Տոբագո'),
												_1: {
													ctor: '::',
													_0: A2(_user$project$Models$MapItem, 'Turks and Caicos Islands', 'Թըրքս և Կայկոս կղզիներ'),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Models$MapItem, 'Virgin Islands, British', 'Բրիտանական Վիրջինյան կղզիներ'),
														_1: {
															ctor: '::',
															_0: A2(_user$project$Models$MapItem, 'Virgin Islands, U.S.', 'Վիրջինյան կղզիներ, ԱՄՆ'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							},
							A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: A2(_user$project$Models$MapItem, 'Belize', 'Բելիզ'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Models$MapItem, 'Costa Rica', 'Կոստա Ռիկա'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Models$MapItem, 'El Salvador', 'Սալվադոր'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Models$MapItem, 'Guatemala', 'Գվատեմալա'),
												_1: {
													ctor: '::',
													_0: A2(_user$project$Models$MapItem, 'Honduras', 'Հոնդուրաս'),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Models$MapItem, 'Nicaragua', 'Նիկարագուա'),
														_1: {
															ctor: '::',
															_0: A2(_user$project$Models$MapItem, 'Panama', 'Պանամա'),
															_1: {
																ctor: '::',
																_0: A2(_user$project$Models$MapItem, 'Bermuda', 'Բերմուդյան կղզիներ'),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$Models$MapItem, 'Canada', 'Կանադա'),
																	_1: {
																		ctor: '::',
																		_0: A2(_user$project$Models$MapItem, 'Greenland', 'Գրենլանդիա'),
																		_1: {
																			ctor: '::',
																			_0: A2(_user$project$Models$MapItem, 'Mexico', 'Մեքսիկա'),
																			_1: {
																				ctor: '::',
																				_0: A2(_user$project$Models$MapItem, 'United States', 'Ամերիկայի Միացյալ Նահանգներ'),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: A2(_user$project$Models$MapItem, 'Alabama', 'Ալաբամա'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Models$MapItem, 'Alaska', 'Ալյասկա'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Models$MapItem, 'Arizona', 'Արիզոնա'),
												_1: {
													ctor: '::',
													_0: A2(_user$project$Models$MapItem, 'Arkansas', 'Արկանզաս'),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Models$MapItem, 'California', 'Կալիֆորնիա'),
														_1: {
															ctor: '::',
															_0: A2(_user$project$Models$MapItem, 'Colorado', 'Կոլորադո'),
															_1: {
																ctor: '::',
																_0: A2(_user$project$Models$MapItem, 'Connecticut', 'Կոնեկտիկուտ'),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$Models$MapItem, 'Delaware', 'Դելավեր'),
																	_1: {
																		ctor: '::',
																		_0: A2(_user$project$Models$MapItem, 'Florida', 'Ֆլորիդա'),
																		_1: {
																			ctor: '::',
																			_0: A2(_user$project$Models$MapItem, 'Georgia', 'Ջորջիա'),
																			_1: {
																				ctor: '::',
																				_0: A2(_user$project$Models$MapItem, 'Hawaii', 'Հավայի'),
																				_1: {
																					ctor: '::',
																					_0: A2(_user$project$Models$MapItem, 'Idaho', 'Այդահո'),
																					_1: {
																						ctor: '::',
																						_0: A2(_user$project$Models$MapItem, 'Illinois', 'Իլինոյս'),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$Models$MapItem, 'Indiana', 'Ինդիանա'),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'Iowa', 'Այովա'),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									},
									A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: A2(_user$project$Models$MapItem, 'Kansas', 'Կանզաս'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Models$MapItem, 'Kentucky', 'Կենտուկի'),
												_1: {
													ctor: '::',
													_0: A2(_user$project$Models$MapItem, 'Louisiana', 'Լուիզիանա'),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Models$MapItem, 'Maine', 'Մեն'),
														_1: {
															ctor: '::',
															_0: A2(_user$project$Models$MapItem, 'Maryland', 'Մերիլենդ'),
															_1: {
																ctor: '::',
																_0: A2(_user$project$Models$MapItem, 'Massachusetts', 'Մասաչուսեթս'),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$Models$MapItem, 'Michigan', 'Միչիգան'),
																	_1: {
																		ctor: '::',
																		_0: A2(_user$project$Models$MapItem, 'Minnesota', 'Մինեսոտա'),
																		_1: {
																			ctor: '::',
																			_0: A2(_user$project$Models$MapItem, 'Mississippi', 'Միսսիսիպի'),
																			_1: {
																				ctor: '::',
																				_0: A2(_user$project$Models$MapItem, 'Missouri', 'Միսսուրի'),
																				_1: {
																					ctor: '::',
																					_0: A2(_user$project$Models$MapItem, 'Montana', 'Մոնտանա'),
																					_1: {
																						ctor: '::',
																						_0: A2(_user$project$Models$MapItem, 'Nebraska', 'Նեբրասկա'),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$Models$MapItem, 'Nevada', 'Նևադա'),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'New Hampshire', 'Նյու Հեմպշիր'),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$Models$MapItem, 'New Jersey', 'Նյու Ջերսի'),
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										},
										A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: A2(_user$project$Models$MapItem, 'New Mexico', 'Նոր Մեքսիկո'),
												_1: {
													ctor: '::',
													_0: A2(_user$project$Models$MapItem, 'New York', 'Նյու Յորք'),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Models$MapItem, 'North Carolina', 'Հյուսիսային Կարոլինա'),
														_1: {
															ctor: '::',
															_0: A2(_user$project$Models$MapItem, 'North Dakota', 'Հյուսիսային Դակոտա'),
															_1: {
																ctor: '::',
																_0: A2(_user$project$Models$MapItem, 'Ohio', 'Օհայո'),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$Models$MapItem, 'Oklahoma', 'Օկլահոմա'),
																	_1: {
																		ctor: '::',
																		_0: A2(_user$project$Models$MapItem, 'Oregon', 'Օրեգոն'),
																		_1: {
																			ctor: '::',
																			_0: A2(_user$project$Models$MapItem, 'Pennsylvania', 'Փենսիլվանիա'),
																			_1: {
																				ctor: '::',
																				_0: A2(_user$project$Models$MapItem, 'Rhode Island', 'Ռոդ Այլենդ'),
																				_1: {
																					ctor: '::',
																					_0: A2(_user$project$Models$MapItem, 'South Carolina', 'Հարավային Կարոլինա'),
																					_1: {
																						ctor: '::',
																						_0: A2(_user$project$Models$MapItem, 'South Dakota', 'Հարավային Դակոտա'),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$Models$MapItem, 'Tennessee', 'Թենեսի'),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'Texas', 'Տեխաս'),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											},
											A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: A2(_user$project$Models$MapItem, 'Utah', 'Յուտա'),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Models$MapItem, 'Vermont', 'Վերմոնտ'),
														_1: {
															ctor: '::',
															_0: A2(_user$project$Models$MapItem, 'Virginia', 'Վիրջինիա'),
															_1: {
																ctor: '::',
																_0: A2(_user$project$Models$MapItem, 'Washington', 'Վաշինգտոն'),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$Models$MapItem, 'West Virginia', 'Արևմտյան Վիրջինիա'),
																	_1: {
																		ctor: '::',
																		_0: A2(_user$project$Models$MapItem, 'Wisconsin', 'Վիսկոնսին'),
																		_1: {
																			ctor: '::',
																			_0: A2(_user$project$Models$MapItem, 'Wyoming', 'Վայոմինգ'),
																			_1: {
																				ctor: '::',
																				_0: A2(_user$project$Models$MapItem, 'Argentina', 'Արգենտինա'),
																				_1: {
																					ctor: '::',
																					_0: A2(_user$project$Models$MapItem, 'Bolivia', 'Բոլիվիա'),
																					_1: {
																						ctor: '::',
																						_0: A2(_user$project$Models$MapItem, 'Brazil', 'Բրազիլիա'),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$Models$MapItem, 'Chile', 'Չիլի'),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'Colombia', 'Կոլումբիա'),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$Models$MapItem, 'Ecuador', 'Էկվադոր'),
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												},
												A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: A2(_user$project$Models$MapItem, 'Falkland Islands (Malvinas)', 'Ֆոլկլենդյան կղզիներ'),
														_1: {
															ctor: '::',
															_0: A2(_user$project$Models$MapItem, 'French Guiana', 'Ֆրանսիական Գվիանա'),
															_1: {
																ctor: '::',
																_0: A2(_user$project$Models$MapItem, 'Guyana', 'Գայանա'),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$Models$MapItem, 'Paraguay', 'Պարագվայ'),
																	_1: {
																		ctor: '::',
																		_0: A2(_user$project$Models$MapItem, 'Peru', 'Պերու'),
																		_1: {
																			ctor: '::',
																			_0: A2(_user$project$Models$MapItem, 'Suriname', 'Սուրինամ'),
																			_1: {
																				ctor: '::',
																				_0: A2(_user$project$Models$MapItem, 'Uruguay', 'Ուրուգվայ'),
																				_1: {
																					ctor: '::',
																					_0: A2(_user$project$Models$MapItem, 'Venezuela', 'Վենեսուելա'),
																					_1: {
																						ctor: '::',
																						_0: A2(_user$project$Models$MapItem, 'American Samoa', 'Ամերիկյան Սամոա'),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$Models$MapItem, 'Australia', 'Ավստրալիա'),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'Cook Islands', 'Կուկի կղզիներ'),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													},
													A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: A2(_user$project$Models$MapItem, 'Fiji', 'Ֆիջի'),
															_1: {
																ctor: '::',
																_0: A2(_user$project$Models$MapItem, 'French Polynesia', 'Ֆրանսիական Պոլինեզիա'),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$Models$MapItem, 'Guam', 'Գուամ'),
																	_1: {
																		ctor: '::',
																		_0: A2(_user$project$Models$MapItem, 'Kiribati', 'Կիրիբատի'),
																		_1: {
																			ctor: '::',
																			_0: A2(_user$project$Models$MapItem, 'Marshall Islands', 'Մարշալյան կղզիներ'),
																			_1: {
																				ctor: '::',
																				_0: A2(_user$project$Models$MapItem, 'Micronesia, Federated States of', 'Միկրոնեզիայի Դաշնային Նահանգներ'),
																				_1: {
																					ctor: '::',
																					_0: A2(_user$project$Models$MapItem, 'Nauru', 'Նաուրու'),
																					_1: {
																						ctor: '::',
																						_0: A2(_user$project$Models$MapItem, 'New Caledonia', 'Նոր Կալեդոնիա'),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$Models$MapItem, 'New Zealand', 'Նոր Զելանդիա'),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'Niue', 'Նյուեյ'),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$Models$MapItem, 'Northern Mariana Islands', 'Հյուսիսային Մարիանյան կղզիներ'),
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														},
														A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: A2(_user$project$Models$MapItem, 'Palau', 'Պալաու'),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$Models$MapItem, 'Papua New Guinea', 'Պապուա Նոր Գվինեա'),
																	_1: {
																		ctor: '::',
																		_0: A2(_user$project$Models$MapItem, 'Pitcairn Islands', 'Փիթքերն կղզիներ'),
																		_1: {
																			ctor: '::',
																			_0: A2(_user$project$Models$MapItem, 'Samoa', 'Սամոա'),
																			_1: {
																				ctor: '::',
																				_0: A2(_user$project$Models$MapItem, 'Solomon Islands', 'Սողոմոնյան Կղզիներ'),
																				_1: {
																					ctor: '::',
																					_0: A2(_user$project$Models$MapItem, 'Tokelau', 'Տոկելաու'),
																					_1: {
																						ctor: '::',
																						_0: A2(_user$project$Models$MapItem, 'Tonga', 'Տոնգա'),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$Models$MapItem, 'Tuvalu', 'Թուվալու'),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'Vanuatu', 'Վանուատու'),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$Models$MapItem, 'Wallis and Futuna', 'Ուոլիս և Ֆուտունա'),
																									_1: {
																										ctor: '::',
																										_0: A2(_user$project$Models$MapItem, 'Armenia', 'Հայաստան'),
																										_1: {
																											ctor: '::',
																											_0: A2(_user$project$Models$MapItem, 'Azerbaijan', 'Ադրբեջան'),
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															},
															A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: A2(_user$project$Models$MapItem, 'Belarus', 'Բելառուս'),
																	_1: {
																		ctor: '::',
																		_0: A2(_user$project$Models$MapItem, 'Kazakhstan', 'Ղազախստան'),
																		_1: {
																			ctor: '::',
																			_0: A2(_user$project$Models$MapItem, 'Kyrgyzstan', 'Ղրղզստան'),
																			_1: {
																				ctor: '::',
																				_0: A2(_user$project$Models$MapItem, 'Tajikistan', 'Տաջիկստան'),
																				_1: {
																					ctor: '::',
																					_0: A2(_user$project$Models$MapItem, 'Turkmenistan', 'Թուրքմենստան'),
																					_1: {
																						ctor: '::',
																						_0: A2(_user$project$Models$MapItem, 'Uzbekistan', 'Ուզբեկստան'),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$Models$MapItem, 'China', 'Չինաստան'),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'Hong Kong', 'Հոնկոնգ'),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$Models$MapItem, 'Japan', 'Ճապոնիա'),
																									_1: {
																										ctor: '::',
																										_0: A2(_user$project$Models$MapItem, 'Korea, Democratic People\'s Republic of', 'Հյուսիսային Կորեա'),
																										_1: {
																											ctor: '::',
																											_0: A2(_user$project$Models$MapItem, 'Korea, Republic of', 'Հարավային Կորեա'),
																											_1: {
																												ctor: '::',
																												_0: A2(_user$project$Models$MapItem, 'Macau', 'Մակաո'),
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																},
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	{
																		ctor: '::',
																		_0: A2(_user$project$Models$MapItem, 'Mongolia', 'Մոնղոլիա'),
																		_1: {
																			ctor: '::',
																			_0: A2(_user$project$Models$MapItem, 'Taiwan', 'Թայվան'),
																			_1: {
																				ctor: '::',
																				_0: A2(_user$project$Models$MapItem, 'Russian Federation', 'Ռուսաստանի Դաշնություն'),
																				_1: {
																					ctor: '::',
																					_0: A2(_user$project$Models$MapItem, 'Central District', 'Կենտրոնական Շրջան'),
																					_1: {
																						ctor: '::',
																						_0: A2(_user$project$Models$MapItem, 'Southern District', 'Հարավային Շրջան'),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$Models$MapItem, 'Northwestern District', 'Հյուսիս-արևմտյան Շրջան'),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'Far Eastern District', 'Հեռավոր-արևելյան Շրջան'),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$Models$MapItem, 'Siberian District', 'Սիբիրյան Շրջան'),
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	},
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: A2(_user$project$Models$MapItem, 'Urals District', 'Ուրալյան Շրջան'),
																			_1: {
																				ctor: '::',
																				_0: A2(_user$project$Models$MapItem, 'Volga District', 'Մերձվոլգայան Շրջան'),
																				_1: {
																					ctor: '::',
																					_0: A2(_user$project$Models$MapItem, 'Bahrain', 'Բահրեյն'),
																					_1: {
																						ctor: '::',
																						_0: A2(_user$project$Models$MapItem, 'Iraq', 'Իրաք'),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$Models$MapItem, 'Israel', 'Իսրայել'),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'Jordan', 'Հորդանան'),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$Models$MapItem, 'Kuwait', 'Քուվեյթ'),
																									_1: {
																										ctor: '::',
																										_0: A2(_user$project$Models$MapItem, 'Lebanon', 'Լիբանան'),
																										_1: {
																											ctor: '::',
																											_0: A2(_user$project$Models$MapItem, 'Oman', 'Օման'),
																											_1: {
																												ctor: '::',
																												_0: A2(_user$project$Models$MapItem, 'Palestinian Territory', 'Պաղեստին'),
																												_1: {
																													ctor: '::',
																													_0: A2(_user$project$Models$MapItem, 'Qatar', 'Կատար'),
																													_1: {
																														ctor: '::',
																														_0: A2(_user$project$Models$MapItem, 'Saudi Arabia', 'Սաուդյան Արաբիա'),
																														_1: {
																															ctor: '::',
																															_0: A2(_user$project$Models$MapItem, 'Syrian Arab Republic', 'Սիրիա'),
																															_1: {ctor: '[]'}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		},
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			{
																				ctor: '::',
																				_0: A2(_user$project$Models$MapItem, 'United Arab Emirates', 'Արաբական Միացյալ Էմիրություններ'),
																				_1: {
																					ctor: '::',
																					_0: A2(_user$project$Models$MapItem, 'Yemen', 'Եմեն'),
																					_1: {
																						ctor: '::',
																						_0: A2(_user$project$Models$MapItem, 'Afghanistan', 'Աֆղանստան'),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$Models$MapItem, 'Bangladesh', 'Բանգլադեշ'),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'Bhutan', 'Բութան'),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$Models$MapItem, 'India', 'Հնդկաստան'),
																									_1: {
																										ctor: '::',
																										_0: A2(_user$project$Models$MapItem, 'Iran, Islamic Republic of', 'Իրանի Իսլամական Հանրապետություն'),
																										_1: {
																											ctor: '::',
																											_0: A2(_user$project$Models$MapItem, 'Maldives', 'Մալդիվներ'),
																											_1: {
																												ctor: '::',
																												_0: A2(_user$project$Models$MapItem, 'Nepal', 'Նեպալ'),
																												_1: {
																													ctor: '::',
																													_0: A2(_user$project$Models$MapItem, 'Pakistan', 'Պակիստան'),
																													_1: {
																														ctor: '::',
																														_0: A2(_user$project$Models$MapItem, 'Sri Lanka', 'Շրի Լանկա'),
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			},
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				{
																					ctor: '::',
																					_0: A2(_user$project$Models$MapItem, 'Brunei Darussalam', 'Բրունեյ'),
																					_1: {
																						ctor: '::',
																						_0: A2(_user$project$Models$MapItem, 'Cambodia', 'Կամբոջա'),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$Models$MapItem, 'Christmas Island', 'Ծննդյան կղզի'),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'Cocos (Keeling) Islands', 'Կոկոսյան կղզիներ'),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$Models$MapItem, 'Indonesia', 'Ինդոնեզիա'),
																									_1: {
																										ctor: '::',
																										_0: A2(_user$project$Models$MapItem, 'Lao People\'s Democratic Republic', 'Լաոս'),
																										_1: {
																											ctor: '::',
																											_0: A2(_user$project$Models$MapItem, 'Malaysia', 'Մալայզիա'),
																											_1: {
																												ctor: '::',
																												_0: A2(_user$project$Models$MapItem, 'Myanmar', 'Մյանմա'),
																												_1: {
																													ctor: '::',
																													_0: A2(_user$project$Models$MapItem, 'Philippines', 'Ֆիլիպիններ'),
																													_1: {
																														ctor: '::',
																														_0: A2(_user$project$Models$MapItem, 'Singapore', 'Սինգապուր'),
																														_1: {
																															ctor: '::',
																															_0: A2(_user$project$Models$MapItem, 'Thailand', 'Թաիլանդ'),
																															_1: {ctor: '[]'}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				},
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					{
																						ctor: '::',
																						_0: A2(_user$project$Models$MapItem, 'Timor-Leste', 'Արևելյան Թիմոր'),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$Models$MapItem, 'Vietnam', 'Վիետնամ'),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'Cyprus', 'Կիպրոս'),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$Models$MapItem, 'Georgia', 'Վրաստան'),
																									_1: {
																										ctor: '::',
																										_0: A2(_user$project$Models$MapItem, 'Turkey', 'Թուրքիա'),
																										_1: {
																											ctor: '::',
																											_0: A2(_user$project$Models$MapItem, 'Bulgaria', 'Բուլղարիա'),
																											_1: {
																												ctor: '::',
																												_0: A2(_user$project$Models$MapItem, 'Czech Republic', 'Չեխիա'),
																												_1: {
																													ctor: '::',
																													_0: A2(_user$project$Models$MapItem, 'Hungary', 'Հունգարիա'),
																													_1: {
																														ctor: '::',
																														_0: A2(_user$project$Models$MapItem, 'Moldova, Republic of', 'Մոլդովա'),
																														_1: {
																															ctor: '::',
																															_0: A2(_user$project$Models$MapItem, 'Poland', 'Լեհաստան'),
																															_1: {
																																ctor: '::',
																																_0: A2(_user$project$Models$MapItem, 'Romania', 'Ռումինիա'),
																																_1: {ctor: '[]'}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					},
																					A2(
																						_elm_lang$core$Basics_ops['++'],
																						{
																							ctor: '::',
																							_0: A2(_user$project$Models$MapItem, 'Slovakia', 'Սլովակիա'),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'Ukraine', 'Ուկրաինա'),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$Models$MapItem, 'Denmark', 'Դանիա'),
																									_1: {
																										ctor: '::',
																										_0: A2(_user$project$Models$MapItem, 'Estonia', 'Էստոնիա'),
																										_1: {
																											ctor: '::',
																											_0: A2(_user$project$Models$MapItem, 'Faroe Islands', 'Ֆարերյան կղզիներ'),
																											_1: {
																												ctor: '::',
																												_0: A2(_user$project$Models$MapItem, 'Finland', 'Ֆինլանդիա'),
																												_1: {
																													ctor: '::',
																													_0: A2(_user$project$Models$MapItem, 'Iceland', 'Իսլանդիա'),
																													_1: {
																														ctor: '::',
																														_0: A2(_user$project$Models$MapItem, 'Ireland', 'Իռլանդիա'),
																														_1: {
																															ctor: '::',
																															_0: A2(_user$project$Models$MapItem, 'Latvia', 'Լատվիա'),
																															_1: {
																																ctor: '::',
																																_0: A2(_user$project$Models$MapItem, 'Lithuania', 'Լիտվա'),
																																_1: {
																																	ctor: '::',
																																	_0: A2(_user$project$Models$MapItem, 'Norway', 'Նորվեգիա'),
																																	_1: {
																																		ctor: '::',
																																		_0: A2(_user$project$Models$MapItem, 'Sweden', 'Շվեդիա'),
																																		_1: {
																																			ctor: '::',
																																			_0: A2(_user$project$Models$MapItem, 'United Kingdom', 'Միացյալ Թագավորություն'),
																																			_1: {ctor: '[]'}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						},
																						A2(
																							_elm_lang$core$Basics_ops['++'],
																							{
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'Albania', 'Ալբանիա'),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$Models$MapItem, 'Andorra', 'Անդորրա'),
																									_1: {
																										ctor: '::',
																										_0: A2(_user$project$Models$MapItem, 'Bosnia and Herzegovina', 'Բոսնիա և Հերցեգովինա'),
																										_1: {
																											ctor: '::',
																											_0: A2(_user$project$Models$MapItem, 'Croatia', 'Խորվաթիա'),
																											_1: {
																												ctor: '::',
																												_0: A2(_user$project$Models$MapItem, 'Gibraltar', 'Ջիբրալթար'),
																												_1: {
																													ctor: '::',
																													_0: A2(_user$project$Models$MapItem, 'Greece', 'Հունաստան'),
																													_1: {
																														ctor: '::',
																														_0: A2(_user$project$Models$MapItem, 'Holy See (Vatican City State)', 'Վատիկան'),
																														_1: {
																															ctor: '::',
																															_0: A2(_user$project$Models$MapItem, 'Italy', 'Իտալիա'),
																															_1: {
																																ctor: '::',
																																_0: A2(_user$project$Models$MapItem, 'Macedonia', 'Մակեդոնիա'),
																																_1: {
																																	ctor: '::',
																																	_0: A2(_user$project$Models$MapItem, 'Malta', 'Մալթա'),
																																	_1: {
																																		ctor: '::',
																																		_0: A2(_user$project$Models$MapItem, 'Monaco', 'Մոնակո'),
																																		_1: {
																																			ctor: '::',
																																			_0: A2(_user$project$Models$MapItem, 'Montenegro', 'Չեռնոգորիա'),
																																			_1: {ctor: '[]'}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							},
																							{
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'Portugal', 'Պորտուգալիա'),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$Models$MapItem, 'San Marino', 'Սան Մարինո'),
																									_1: {
																										ctor: '::',
																										_0: A2(_user$project$Models$MapItem, 'Serbia', 'Սերբիա'),
																										_1: {
																											ctor: '::',
																											_0: A2(_user$project$Models$MapItem, 'Slovenia', 'Սլովենիա'),
																											_1: {
																												ctor: '::',
																												_0: A2(_user$project$Models$MapItem, 'Spain', 'Իսպանիա'),
																												_1: {
																													ctor: '::',
																													_0: A2(_user$project$Models$MapItem, 'Austria', 'Ավստրիա'),
																													_1: {
																														ctor: '::',
																														_0: A2(_user$project$Models$MapItem, 'Belgium', 'Բելգիա'),
																														_1: {
																															ctor: '::',
																															_0: A2(_user$project$Models$MapItem, 'France', 'Ֆրանսիա'),
																															_1: {
																																ctor: '::',
																																_0: A2(_user$project$Models$MapItem, 'Germany', 'Գերմանիա'),
																																_1: {
																																	ctor: '::',
																																	_0: A2(_user$project$Models$MapItem, 'Liechtenstein', 'Լիխտենշտեյն'),
																																	_1: {
																																		ctor: '::',
																																		_0: A2(_user$project$Models$MapItem, 'Luxembourg', 'Լյուքսեմբուրգ'),
																																		_1: {
																																			ctor: '::',
																																			_0: A2(_user$project$Models$MapItem, 'Netherlands', 'Նիդերլանդներ'),
																																			_1: {
																																				ctor: '::',
																																				_0: A2(_user$project$Models$MapItem, 'Switzerland', 'Շվեյցարիա'),
																																				_1: {ctor: '[]'}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							})))))))))))))))))))))));
var _user$project$CountriesList$getArmLocal = function (countryEng) {
	var locals_list = A2(
		_elm_lang$core$List$filter,
		function (c) {
			return _elm_lang$core$Native_Utils.eq(c.key, countryEng);
		},
		_user$project$CountriesList$countriesMap);
	var local = function () {
		var _p0 = _elm_lang$core$List$head(locals_list);
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return A2(_user$project$Models$MapItem, '', '');
		}
	}();
	return local.value;
};
var _user$project$CountriesList$countries = A2(
	_elm_lang$core$Basics_ops['++'],
	{
		ctor: '::',
		_0: 'Angola',
		_1: {
			ctor: '::',
			_0: 'Cameroon',
			_1: {
				ctor: '::',
				_0: 'Central African Republic',
				_1: {
					ctor: '::',
					_0: 'Chad',
					_1: {
						ctor: '::',
						_0: 'Congo',
						_1: {
							ctor: '::',
							_0: 'Congo, The Democratic Republic of the',
							_1: {
								ctor: '::',
								_0: 'Equatorial Guinea',
								_1: {
									ctor: '::',
									_0: 'Gabon',
									_1: {
										ctor: '::',
										_0: 'Sao Tome and Principe',
										_1: {
											ctor: '::',
											_0: 'South Sudan',
											_1: {
												ctor: '::',
												_0: 'Burundi',
												_1: {
													ctor: '::',
													_0: 'Comoros',
													_1: {
														ctor: '::',
														_0: 'Djibouti',
														_1: {
															ctor: '::',
															_0: 'Eritrea',
															_1: {
																ctor: '::',
																_0: 'Ethiopia',
																_1: {
																	ctor: '::',
																	_0: 'Kenya',
																	_1: {
																		ctor: '::',
																		_0: 'Madagascar',
																		_1: {
																			ctor: '::',
																			_0: 'Malawi',
																			_1: {
																				ctor: '::',
																				_0: 'Mauritius',
																				_1: {
																					ctor: '::',
																					_0: 'Mayotte',
																					_1: {
																						ctor: '::',
																						_0: 'Mozambique',
																						_1: {
																							ctor: '::',
																							_0: 'Reunion',
																							_1: {
																								ctor: '::',
																								_0: 'Rwanda',
																								_1: {
																									ctor: '::',
																									_0: 'Seychelles',
																									_1: {
																										ctor: '::',
																										_0: 'Somalia',
																										_1: {
																											ctor: '::',
																											_0: 'Tanzania, United Republic of',
																											_1: {
																												ctor: '::',
																												_0: 'Uganda',
																												_1: {
																													ctor: '::',
																													_0: 'Zambia',
																													_1: {
																														ctor: '::',
																														_0: 'Zimbabwe',
																														_1: {
																															ctor: '::',
																															_0: 'Algeria',
																															_1: {
																																ctor: '::',
																																_0: 'Egypt',
																																_1: {
																																	ctor: '::',
																																	_0: 'Libya',
																																	_1: {
																																		ctor: '::',
																																		_0: 'Morocco',
																																		_1: {
																																			ctor: '::',
																																			_0: 'Sudan',
																																			_1: {
																																				ctor: '::',
																																				_0: 'Tunisia',
																																				_1: {
																																					ctor: '::',
																																					_0: 'Western Sahara',
																																					_1: {
																																						ctor: '::',
																																						_0: 'Botswana',
																																						_1: {
																																							ctor: '::',
																																							_0: 'Lesotho',
																																							_1: {
																																								ctor: '::',
																																								_0: 'Namibia',
																																								_1: {ctor: '[]'}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: 'South Africa',
			_1: {
				ctor: '::',
				_0: 'Swaziland',
				_1: {
					ctor: '::',
					_0: 'Benin',
					_1: {
						ctor: '::',
						_0: 'Burkina Faso',
						_1: {
							ctor: '::',
							_0: 'Cape Verde',
							_1: {
								ctor: '::',
								_0: 'Côte D\'Ivoire',
								_1: {
									ctor: '::',
									_0: 'Gambia',
									_1: {
										ctor: '::',
										_0: 'Ghana',
										_1: {
											ctor: '::',
											_0: 'Guinea',
											_1: {
												ctor: '::',
												_0: 'Guinea-Bissau',
												_1: {
													ctor: '::',
													_0: 'Liberia',
													_1: {
														ctor: '::',
														_0: 'Mali',
														_1: {
															ctor: '::',
															_0: 'Mauritania',
															_1: {
																ctor: '::',
																_0: 'Niger',
																_1: {
																	ctor: '::',
																	_0: 'Nigeria',
																	_1: {
																		ctor: '::',
																		_0: 'Senegal',
																		_1: {
																			ctor: '::',
																			_0: 'Sierra Leone',
																			_1: {
																				ctor: '::',
																				_0: 'Togo',
																				_1: {
																					ctor: '::',
																					_0: 'Anguilla',
																					_1: {
																						ctor: '::',
																						_0: 'Antigua and Barbuda',
																						_1: {
																							ctor: '::',
																							_0: 'Aruba',
																							_1: {
																								ctor: '::',
																								_0: 'Bahamas',
																								_1: {
																									ctor: '::',
																									_0: 'Barbados',
																									_1: {
																										ctor: '::',
																										_0: 'Cayman Islands',
																										_1: {
																											ctor: '::',
																											_0: 'Cuba',
																											_1: {
																												ctor: '::',
																												_0: 'Dominica',
																												_1: {
																													ctor: '::',
																													_0: 'Dominican Republic',
																													_1: {
																														ctor: '::',
																														_0: 'Grenada',
																														_1: {
																															ctor: '::',
																															_0: 'Guadeloupe',
																															_1: {
																																ctor: '::',
																																_0: 'Haiti',
																																_1: {
																																	ctor: '::',
																																	_0: 'Jamaica',
																																	_1: {
																																		ctor: '::',
																																		_0: 'Martinique',
																																		_1: {
																																			ctor: '::',
																																			_0: 'Montserrat',
																																			_1: {
																																				ctor: '::',
																																				_0: 'Netherlands Antilles',
																																				_1: {
																																					ctor: '::',
																																					_0: 'Puerto Rico',
																																					_1: {
																																						ctor: '::',
																																						_0: 'Saint Kitts and Nevis',
																																						_1: {
																																							ctor: '::',
																																							_0: 'Saint Lucia',
																																							_1: {ctor: '[]'}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: 'Saint Vincent and the Grenadines',
				_1: {
					ctor: '::',
					_0: 'Trinidad and Tobago',
					_1: {
						ctor: '::',
						_0: 'Turks and Caicos Islands',
						_1: {
							ctor: '::',
							_0: 'Virgin Islands, British',
							_1: {
								ctor: '::',
								_0: 'Virgin Islands, U.S.',
								_1: {
									ctor: '::',
									_0: 'Belize',
									_1: {
										ctor: '::',
										_0: 'Costa Rica',
										_1: {
											ctor: '::',
											_0: 'El Salvador',
											_1: {
												ctor: '::',
												_0: 'Guatemala',
												_1: {
													ctor: '::',
													_0: 'Honduras',
													_1: {
														ctor: '::',
														_0: 'Nicaragua',
														_1: {
															ctor: '::',
															_0: 'Panama',
															_1: {
																ctor: '::',
																_0: 'Bermuda',
																_1: {
																	ctor: '::',
																	_0: 'Canada',
																	_1: {
																		ctor: '::',
																		_0: 'Greenland',
																		_1: {
																			ctor: '::',
																			_0: 'Mexico',
																			_1: {
																				ctor: '::',
																				_0: 'United States',
																				_1: {
																					ctor: '::',
																					_0: 'Argentina',
																					_1: {
																						ctor: '::',
																						_0: 'Bolivia',
																						_1: {
																							ctor: '::',
																							_0: 'Brazil',
																							_1: {
																								ctor: '::',
																								_0: 'Chile',
																								_1: {
																									ctor: '::',
																									_0: 'Colombia',
																									_1: {
																										ctor: '::',
																										_0: 'Ecuador',
																										_1: {
																											ctor: '::',
																											_0: 'Falkland Islands (Malvinas)',
																											_1: {
																												ctor: '::',
																												_0: 'French Guiana',
																												_1: {
																													ctor: '::',
																													_0: 'Guyana',
																													_1: {
																														ctor: '::',
																														_0: 'Paraguay',
																														_1: {
																															ctor: '::',
																															_0: 'Peru',
																															_1: {
																																ctor: '::',
																																_0: 'Suriname',
																																_1: {
																																	ctor: '::',
																																	_0: 'Uruguay',
																																	_1: {
																																		ctor: '::',
																																		_0: 'Venezuela',
																																		_1: {
																																			ctor: '::',
																																			_0: 'American Samoa',
																																			_1: {ctor: '[]'}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: 'Australia',
					_1: {
						ctor: '::',
						_0: 'Cook Islands',
						_1: {
							ctor: '::',
							_0: 'Fiji',
							_1: {
								ctor: '::',
								_0: 'French Polynesia',
								_1: {
									ctor: '::',
									_0: 'Guam',
									_1: {
										ctor: '::',
										_0: 'Kiribati',
										_1: {
											ctor: '::',
											_0: 'Marshall Islands',
											_1: {
												ctor: '::',
												_0: 'Micronesia, Federated States of',
												_1: {
													ctor: '::',
													_0: 'Nauru',
													_1: {
														ctor: '::',
														_0: 'New Caledonia',
														_1: {
															ctor: '::',
															_0: 'New Zealand',
															_1: {
																ctor: '::',
																_0: 'Niue',
																_1: {
																	ctor: '::',
																	_0: 'Northern Mariana Islands',
																	_1: {
																		ctor: '::',
																		_0: 'Palau',
																		_1: {
																			ctor: '::',
																			_0: 'Papua New Guinea',
																			_1: {
																				ctor: '::',
																				_0: 'Pitcairn Islands',
																				_1: {
																					ctor: '::',
																					_0: 'Samoa',
																					_1: {
																						ctor: '::',
																						_0: 'Solomon Islands',
																						_1: {
																							ctor: '::',
																							_0: 'Tokelau',
																							_1: {
																								ctor: '::',
																								_0: 'Tonga',
																								_1: {
																									ctor: '::',
																									_0: 'Tuvalu',
																									_1: {
																										ctor: '::',
																										_0: 'Vanuatu',
																										_1: {
																											ctor: '::',
																											_0: 'Wallis and Futuna',
																											_1: {
																												ctor: '::',
																												_0: 'Armenia',
																												_1: {
																													ctor: '::',
																													_0: 'Azerbaijan',
																													_1: {
																														ctor: '::',
																														_0: 'Belarus',
																														_1: {
																															ctor: '::',
																															_0: 'Kazakhstan',
																															_1: {
																																ctor: '::',
																																_0: 'Kyrgyzstan',
																																_1: {
																																	ctor: '::',
																																	_0: 'Tajikistan',
																																	_1: {
																																		ctor: '::',
																																		_0: 'Turkmenistan',
																																		_1: {
																																			ctor: '::',
																																			_0: 'Uzbekistan',
																																			_1: {
																																				ctor: '::',
																																				_0: 'China',
																																				_1: {
																																					ctor: '::',
																																					_0: 'Hong Kong',
																																					_1: {
																																						ctor: '::',
																																						_0: 'Japan',
																																						_1: {ctor: '[]'}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: 'Korea, Democratic People\'s Republic of',
						_1: {
							ctor: '::',
							_0: 'Korea, Republic of',
							_1: {
								ctor: '::',
								_0: 'Macau',
								_1: {
									ctor: '::',
									_0: 'Mongolia',
									_1: {
										ctor: '::',
										_0: 'Taiwan',
										_1: {
											ctor: '::',
											_0: 'Russian Federation',
											_1: {
												ctor: '::',
												_0: 'Bahrain',
												_1: {
													ctor: '::',
													_0: 'Iraq',
													_1: {
														ctor: '::',
														_0: 'Israel',
														_1: {
															ctor: '::',
															_0: 'Jordan',
															_1: {
																ctor: '::',
																_0: 'Kuwait',
																_1: {
																	ctor: '::',
																	_0: 'Lebanon',
																	_1: {
																		ctor: '::',
																		_0: 'Oman',
																		_1: {
																			ctor: '::',
																			_0: 'Palestinian Territory',
																			_1: {
																				ctor: '::',
																				_0: 'Qatar',
																				_1: {
																					ctor: '::',
																					_0: 'Saudi Arabia',
																					_1: {
																						ctor: '::',
																						_0: 'Syrian Arab Republic',
																						_1: {
																							ctor: '::',
																							_0: 'United Arab Emirates',
																							_1: {
																								ctor: '::',
																								_0: 'Yemen',
																								_1: {
																									ctor: '::',
																									_0: 'Afghanistan',
																									_1: {
																										ctor: '::',
																										_0: 'Bangladesh',
																										_1: {
																											ctor: '::',
																											_0: 'Bhutan',
																											_1: {
																												ctor: '::',
																												_0: 'India',
																												_1: {
																													ctor: '::',
																													_0: 'Iran, Islamic Republic of',
																													_1: {
																														ctor: '::',
																														_0: 'Maldives',
																														_1: {
																															ctor: '::',
																															_0: 'Nepal',
																															_1: {
																																ctor: '::',
																																_0: 'Pakistan',
																																_1: {
																																	ctor: '::',
																																	_0: 'Sri Lanka',
																																	_1: {
																																		ctor: '::',
																																		_0: 'Brunei Darussalam',
																																		_1: {
																																			ctor: '::',
																																			_0: 'Cambodia',
																																			_1: {
																																				ctor: '::',
																																				_0: 'Christmas Island',
																																				_1: {
																																					ctor: '::',
																																					_0: 'Cocos (Keeling) Islands',
																																					_1: {ctor: '[]'}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: 'Indonesia',
							_1: {
								ctor: '::',
								_0: 'Lao People\'s Democratic Republic',
								_1: {
									ctor: '::',
									_0: 'Malaysia',
									_1: {
										ctor: '::',
										_0: 'Myanmar',
										_1: {
											ctor: '::',
											_0: 'Philippines',
											_1: {
												ctor: '::',
												_0: 'Singapore',
												_1: {
													ctor: '::',
													_0: 'Thailand',
													_1: {
														ctor: '::',
														_0: 'Timor-Leste',
														_1: {
															ctor: '::',
															_0: 'Vietnam',
															_1: {
																ctor: '::',
																_0: 'Cyprus',
																_1: {
																	ctor: '::',
																	_0: 'Georgia',
																	_1: {
																		ctor: '::',
																		_0: 'Turkey',
																		_1: {
																			ctor: '::',
																			_0: 'Bulgaria',
																			_1: {
																				ctor: '::',
																				_0: 'Czech Republic',
																				_1: {
																					ctor: '::',
																					_0: 'Hungary',
																					_1: {
																						ctor: '::',
																						_0: 'Moldova, Republic of',
																						_1: {
																							ctor: '::',
																							_0: 'Poland',
																							_1: {
																								ctor: '::',
																								_0: 'Romania',
																								_1: {
																									ctor: '::',
																									_0: 'Slovakia',
																									_1: {
																										ctor: '::',
																										_0: 'Ukraine',
																										_1: {
																											ctor: '::',
																											_0: 'Denmark',
																											_1: {
																												ctor: '::',
																												_0: 'Estonia',
																												_1: {
																													ctor: '::',
																													_0: 'Faroe Islands',
																													_1: {
																														ctor: '::',
																														_0: 'Finland',
																														_1: {
																															ctor: '::',
																															_0: 'Iceland',
																															_1: {
																																ctor: '::',
																																_0: 'Ireland',
																																_1: {
																																	ctor: '::',
																																	_0: 'Latvia',
																																	_1: {
																																		ctor: '::',
																																		_0: 'Lithuania',
																																		_1: {
																																			ctor: '::',
																																			_0: 'Norway',
																																			_1: {
																																				ctor: '::',
																																				_0: 'Sweden',
																																				_1: {
																																					ctor: '::',
																																					_0: 'United Kingdom',
																																					_1: {
																																						ctor: '::',
																																						_0: 'Albania',
																																						_1: {
																																							ctor: '::',
																																							_0: 'Andorra',
																																							_1: {
																																								ctor: '::',
																																								_0: 'Bosnia and Herzegovina',
																																								_1: {
																																									ctor: '::',
																																									_0: 'Croatia',
																																									_1: {
																																										ctor: '::',
																																										_0: 'Gibraltar',
																																										_1: {
																																											ctor: '::',
																																											_0: 'Greece',
																																											_1: {ctor: '[]'}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						},
						{
							ctor: '::',
							_0: 'Holy See (Vatican City State)',
							_1: {
								ctor: '::',
								_0: 'Italy',
								_1: {
									ctor: '::',
									_0: 'Macedonia',
									_1: {
										ctor: '::',
										_0: 'Malta',
										_1: {
											ctor: '::',
											_0: 'Monaco',
											_1: {
												ctor: '::',
												_0: 'Montenegro',
												_1: {
													ctor: '::',
													_0: 'Portugal',
													_1: {
														ctor: '::',
														_0: 'San Marino',
														_1: {
															ctor: '::',
															_0: 'Serbia',
															_1: {
																ctor: '::',
																_0: 'Slovenia',
																_1: {
																	ctor: '::',
																	_0: 'Spain',
																	_1: {
																		ctor: '::',
																		_0: 'Austria',
																		_1: {
																			ctor: '::',
																			_0: 'Belgium',
																			_1: {
																				ctor: '::',
																				_0: 'France',
																				_1: {
																					ctor: '::',
																					_0: 'Germany',
																					_1: {
																						ctor: '::',
																						_0: 'Liechtenstein',
																						_1: {
																							ctor: '::',
																							_0: 'Luxembourg',
																							_1: {
																								ctor: '::',
																								_0: 'Netherlands',
																								_1: {
																									ctor: '::',
																									_0: 'Switzerland',
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}))))));

var _user$project$Utils$makeRealString = function (str) {
	var _p0 = str;
	if (_p0.ctor === 'Just') {
		return _p0._0;
	} else {
		return '';
	}
};
var _user$project$Utils$defaultInnovator = A5(_user$project$Models$TopInnovator, 0, 'Innovator Name', 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg', 3, 'Address');
var _user$project$Utils$defaultOrganization = A4(_user$project$Models$TopOrganization, 0, 'Organization Name', 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png', 'Address');
var _user$project$Utils$makeRealInnovator = function (topInno) {
	var _p1 = topInno;
	if (_p1.ctor === 'Just') {
		var _p2 = _p1._0;
		return A5(_user$project$Models$TopInnovator, _p2.id, _p2.name, _p2.pic_uri, _p2.rating, _p2.country);
	} else {
		return _user$project$Utils$defaultInnovator;
	}
};
var _user$project$Utils$makeRealOrganization = function (topOrg) {
	var _p3 = topOrg;
	if (_p3.ctor === 'Just') {
		var _p4 = _p3._0;
		return A4(_user$project$Models$TopOrganization, _p4.id, _p4.name, _p4.pic_uri, _p4.country);
	} else {
		return _user$project$Utils$defaultOrganization;
	}
};

var _user$project$TopMembersList$ratingStarsView = F2(
	function (rating, leftFloat) {
		var lefted = leftFloat ? {ctor: '_Tuple2', _0: 'float', _1: 'left'} : {ctor: '_Tuple2', _0: 'float', _1: 'none'};
		var styledDefault = _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
				_1: {ctor: '[]'}
			});
		var styled = _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
				_1: {ctor: '[]'}
			});
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: lefted,
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.8em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-down', _1: '0.8em'},
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'star'),
						_1: {
							ctor: '::',
							_0: (_elm_lang$core$Native_Utils.cmp(rating, 1) > -1) ? styled : styledDefault,
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'star'),
							_1: {
								ctor: '::',
								_0: (_elm_lang$core$Native_Utils.cmp(rating, 2) > -1) ? styled : styledDefault,
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'star'),
								_1: {
									ctor: '::',
									_0: (_elm_lang$core$Native_Utils.cmp(rating, 3) > -1) ? styled : styledDefault,
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'star'),
									_1: {
										ctor: '::',
										_0: (_elm_lang$core$Native_Utils.cmp(rating, 4) > -1) ? styled : styledDefault,
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'star'),
										_1: {
											ctor: '::',
											_0: (_elm_lang$core$Native_Utils.cmp(rating, 5) > -1) ? styled : styledDefault,
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
	});
var _user$project$TopMembersList$addressView = F2(
	function (country, forInnovators) {
		var centerAlign = _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'margin-down', _1: '0.8em'},
				_1: {ctor: '[]'}
			});
		var rightFloat = _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.8em'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-down', _1: '0.8em'},
						_1: {ctor: '[]'}
					}
				}
			});
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: forInnovators ? rightFloat : centerAlign,
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'location'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(country),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$TopMembersList$innovatorsListItemMobile = F8(
	function (model, id, firstOne, name, bio, rating, country, picUri) {
		var receiverData = A3(_user$project$Models$ChatMessageReceiverData, id, name, false);
		var pic = _elm_lang$core$String$isEmpty(picUri) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : picUri;
		var bioLength = 200;
		var bioProcessed = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(bio),
			bioLength) > 0) ? A2(
			_elm_lang$core$Basics_ops['++'],
			A3(_elm_lang$core$String$slice, 0, bioLength, bio),
			'...') : bio;
		var leftMargined = firstOne ? {ctor: '_Tuple2', _0: 'margin-left', _1: '0'} : {ctor: '_Tuple2', _0: 'margin-left', _1: '1em'};
		var currentUser = model.loggedInMember;
		var mailVisibility = _elm_lang$core$Native_Utils.eq(currentUser.id, 0) ? {ctor: '_Tuple2', _0: 'visibility', _1: 'hidden'} : {ctor: '_Tuple2', _0: 'visibility', _1: 'visible'};
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: leftMargined,
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '40vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'height', _1: '67.5vh'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0'},
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src(pic),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.8em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.8em'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(name),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(_user$project$TopMembersList$addressView, country, false),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '75%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.8em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.8em'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(bioProcessed),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(_user$project$TopMembersList$ratingStarsView, rating, false),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'background', _1: 'darkslategray'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$a,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: mailVisibility,
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onClick(
																	_user$project$Messages$OnToggleChatWindow(
																		_elm_lang$core$Maybe$Just(receiverData))),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$span,
																{
																	ctor: '::',
																	_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: mail'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$TopMembersList$innovatorsListMobile = function (model) {
	var topInnovators = model.topInnovators;
	var innovator1 = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(topInnovators),
		0) > 0) ? _user$project$Utils$makeRealInnovator(
		_elm_lang$core$List$head(topInnovators)) : _user$project$Utils$defaultInnovator;
	var remaining = A2(_elm_lang$core$List$drop, 1, topInnovators);
	var innovator2 = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(remaining),
		0) > 0) ? _user$project$Utils$makeRealInnovator(
		_elm_lang$core$List$head(remaining)) : _user$project$Utils$defaultInnovator;
	var vis = model.mobileIdeaGeneratorsView ? {ctor: '_Tuple2', _0: 'display', _1: 'initial'} : {ctor: '_Tuple2', _0: 'display', _1: 'none'};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('innovators'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityMobile'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: vis,
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'bottom', _1: '10px'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'left', _1: '0'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-5em'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$ul,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('tarrifPlansStyle'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '4em'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A8(_user$project$TopMembersList$innovatorsListItemMobile, model, innovator1.id, true, innovator1.name, 'He determined to drop his litigation with the monastry, and relinguish his claims to the wood-cuting and fishery rihgts at once. He was the more ready to do this becuase the rights had becom much less valuable, and he had indeed the vaguest idea where the wood and river in quedtion were.', innovator1.rating, innovator1.country, innovator1.pic_uri),
					_1: {
						ctor: '::',
						_0: A8(_user$project$TopMembersList$innovatorsListItemMobile, model, innovator2.id, false, innovator2.name, 'He determined to drop his litigation with the monastry, and relinguish his claims to the wood-cuting and fishery rihgts at once. He was the more ready to do this becuase the rights had becom much less valuable, and he had indeed the vaguest idea where the wood and river in quedtion were.', innovator2.rating, innovator2.country, innovator2.pic_uri),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$TopMembersList$innovatorsListItemTab = F7(
	function (model, id, name, bio, rating, country, picUri) {
		var receiverData = A3(_user$project$Models$ChatMessageReceiverData, id, name, false);
		var pic = _elm_lang$core$String$isEmpty(picUri) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : picUri;
		var bioLength = 230;
		var processedBio = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(bio),
			bioLength) > 0) ? A2(
			_elm_lang$core$Basics_ops['++'],
			A3(_elm_lang$core$String$slice, 0, bioLength, bio),
			'...') : bio;
		var currentUser = model.loggedInMember;
		var mailVisibility = _elm_lang$core$Native_Utils.eq(currentUser.id, 0) ? {ctor: '_Tuple2', _0: 'visibility', _1: 'hidden'} : {ctor: '_Tuple2', _0: 'visibility', _1: 'visible'};
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1em'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '26vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'height', _1: '23em'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: mailVisibility,
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										_user$project$Messages$OnToggleChatWindow(
											_elm_lang$core$Maybe$Just(receiverData))),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: mail'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.4em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-2em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1.5em'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src(pic),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.8em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.8em'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(name),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.8em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.8em'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(processedBio),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(_user$project$TopMembersList$ratingStarsView, rating, true),
										_1: {
											ctor: '::',
											_0: A2(_user$project$TopMembersList$addressView, country, true),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$TopMembersList$innovatorsListItem = F7(
	function (model, id, name, bio, rating, country, picUri) {
		var receiverData = A3(_user$project$Models$ChatMessageReceiverData, id, name, false);
		var pic = _elm_lang$core$String$isEmpty(picUri) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : picUri;
		var currentUser = model.loggedInMember;
		var mailVisibility = _elm_lang$core$Native_Utils.eq(currentUser.id, 0) ? {ctor: '_Tuple2', _0: 'visibility', _1: 'hidden'} : {ctor: '_Tuple2', _0: 'visibility', _1: 'visible'};
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '3em'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '16em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'height', _1: '23em'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: mailVisibility,
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										_user$project$Messages$OnToggleChatWindow(
											_elm_lang$core$Maybe$Just(receiverData))),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: mail; ratio: 2'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.4em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src(pic),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.8em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.8em'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(name),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.8em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.8em'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(bio),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(_user$project$TopMembersList$ratingStarsView, rating, true),
										_1: {
											ctor: '::',
											_0: A2(_user$project$TopMembersList$addressView, country, true),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$TopMembersList$innovatorsListTab = function (model) {
	var topInnovators = model.topInnovators;
	var innovator1 = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(topInnovators),
		0) > 0) ? _user$project$Utils$makeRealInnovator(
		_elm_lang$core$List$head(topInnovators)) : _user$project$Utils$defaultInnovator;
	var remaining = A2(_elm_lang$core$List$drop, 1, topInnovators);
	var innovator2 = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(remaining),
		0) > 0) ? _user$project$Utils$makeRealInnovator(
		_elm_lang$core$List$head(remaining)) : _user$project$Utils$defaultInnovator;
	var remaining2 = A2(_elm_lang$core$List$drop, 1, remaining);
	var innovator3 = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(remaining2),
		0) > 0) ? _user$project$Utils$makeRealInnovator(
		_elm_lang$core$List$head(remaining2)) : _user$project$Utils$defaultInnovator;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('innovators-t'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityTab'),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Innovators'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifPlansStyle'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '4em'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A7(_user$project$TopMembersList$innovatorsListItemTab, model, innovator1.id, innovator1.name, 'He determined to drop his litigation with the monastry, and relinguish his claims to the wood-cuting and fishery rihgts at once. He was the more ready to do this becuase the rights had becom much less valuable, and he had indeed the vaguest idea where the wood and river in quedtion were.', innovator1.rating, innovator1.country, innovator1.pic_uri),
						_1: {
							ctor: '::',
							_0: A7(_user$project$TopMembersList$innovatorsListItemTab, model, innovator2.id, innovator2.name, 'He determined to drop his litigation with the monastry, and relinguish his claims to the wood-cuting and fishery rihgts at once. He was the more ready to do this becuase the rights had becom much less valuable, and he had indeed the vaguest idea where the wood and river in quedtion were.', innovator2.rating, innovator2.country, innovator2.pic_uri),
							_1: {
								ctor: '::',
								_0: A7(_user$project$TopMembersList$innovatorsListItemTab, model, innovator3.id, innovator3.name, 'He determined to drop his litigation with the monastry, and relinguish his claims to the wood-cuting and fishery rihgts at once. He was the more ready to do this becuase the rights had becom much less valuable, and he had indeed the vaguest idea where the wood and river in quedtion were.', innovator3.rating, innovator3.country, innovator3.pic_uri),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$TopMembersList$innovatorsList = function (model) {
	var topInnovators = model.topInnovators;
	var innovator1 = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(topInnovators),
		0) > 0) ? _user$project$Utils$makeRealInnovator(
		_elm_lang$core$List$head(topInnovators)) : _user$project$Utils$defaultInnovator;
	var remaining = A2(_elm_lang$core$List$drop, 1, topInnovators);
	var innovator2 = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(remaining),
		0) > 0) ? _user$project$Utils$makeRealInnovator(
		_elm_lang$core$List$head(remaining)) : _user$project$Utils$defaultInnovator;
	var remaining2 = A2(_elm_lang$core$List$drop, 1, remaining);
	var innovator3 = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(remaining2),
		0) > 0) ? _user$project$Utils$makeRealInnovator(
		_elm_lang$core$List$head(remaining2)) : _user$project$Utils$defaultInnovator;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('innovators'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('responsiveVisibility'),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Innovators'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifPlansStyle'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '75%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '4em'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A7(_user$project$TopMembersList$innovatorsListItem, model, innovator1.id, innovator1.name, 'He determined to drop his litigation with the monastry, and relinguish his claims to the wood-cuting and fishery rihgts at once. He was the more ready to do this becuase the rights had becom much less valuable, and he had indeed the vaguest idea where the wood and river in quedtion were.', innovator1.rating, innovator1.country, innovator1.pic_uri),
						_1: {
							ctor: '::',
							_0: A7(_user$project$TopMembersList$innovatorsListItem, model, innovator2.id, innovator2.name, 'He determined to drop his litigation with the monastry, and relinguish his claims to the wood-cuting and fishery rihgts at once. He was the more ready to do this becuase the rights had becom much less valuable, and he had indeed the vaguest idea where the wood and river in quedtion were.', innovator2.rating, innovator2.country, innovator2.pic_uri),
							_1: {
								ctor: '::',
								_0: A7(_user$project$TopMembersList$innovatorsListItem, model, innovator3.id, innovator3.name, 'He determined to drop his litigation with the monastry, and relinguish his claims to the wood-cuting and fishery rihgts at once. He was the more ready to do this becuase the rights had becom much less valuable, and he had indeed the vaguest idea where the wood and river in quedtion were.', innovator3.rating, innovator3.country, innovator3.pic_uri),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$TopMembersList$organizationsListItemMobile = F7(
	function (model, id, firstOne, name, bio, country, picUri) {
		var receiverData = A3(_user$project$Models$ChatMessageReceiverData, id, name, true);
		var pic = _elm_lang$core$String$isEmpty(picUri) ? 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png' : picUri;
		var bioLength = 200;
		var bioProcessed = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(bio),
			bioLength) > 0) ? A2(
			_elm_lang$core$Basics_ops['++'],
			A3(_elm_lang$core$String$slice, 0, bioLength, bio),
			'...') : bio;
		var leftMargined = firstOne ? {ctor: '_Tuple2', _0: 'margin-left', _1: '0'} : {ctor: '_Tuple2', _0: 'margin-left', _1: '1em'};
		var currentUser = model.loggedInMember;
		var mailVisibility = _elm_lang$core$Native_Utils.eq(currentUser.id, 0) ? {ctor: '_Tuple2', _0: 'visibility', _1: 'hidden'} : {ctor: '_Tuple2', _0: 'visibility', _1: 'visible'};
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
						_1: {
							ctor: '::',
							_0: leftMargined,
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '40vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'height', _1: '64vh'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0'},
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src(pic),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.8em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.8em'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(name),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '75%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.8em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.8em'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(bioProcessed),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(_user$project$TopMembersList$addressView, country, false),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'background', _1: 'darkslategray'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: mailVisibility,
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onClick(
																_user$project$Messages$OnToggleChatWindow(
																	_elm_lang$core$Maybe$Just(receiverData))),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: mail'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$TopMembersList$organizationsListMobile = function (model) {
	var vis = model.mobileOrganizationsView ? {ctor: '_Tuple2', _0: 'display', _1: 'initial'} : {ctor: '_Tuple2', _0: 'display', _1: 'none'};
	var topOrganizations = model.topOrganizations;
	var organization1 = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(topOrganizations),
		0) > 0) ? _user$project$Utils$makeRealOrganization(
		_elm_lang$core$List$head(topOrganizations)) : _user$project$Utils$defaultOrganization;
	var remaining = A2(_elm_lang$core$List$drop, 1, topOrganizations);
	var organization2 = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(remaining),
		0) > 0) ? _user$project$Utils$makeRealOrganization(
		_elm_lang$core$List$head(remaining)) : _user$project$Utils$defaultOrganization;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('organizations'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityMobile'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: vis,
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'bottom', _1: '10px'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'left', _1: '0'},
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$ul,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('tarrifPlansStyle'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '4em'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A7(_user$project$TopMembersList$organizationsListItemMobile, model, organization1.id, true, organization1.name, 'He determined to drop his litigation with the monastry, and relinguish his claims to the wood-cuting and fishery rihgts at once. He was the more ready to do this becuase the rights had becom much less valuable, and he had indeed the vaguest idea where the wood and river in quedtion were.', organization1.country, organization1.pic_uri),
					_1: {
						ctor: '::',
						_0: A7(_user$project$TopMembersList$organizationsListItemMobile, model, organization2.id, false, organization2.name, 'He determined to drop his litigation with the monastry, and relinguish his claims to the wood-cuting and fishery rihgts at once. He was the more ready to do this becuase the rights had becom much less valuable, and he had indeed the vaguest idea where the wood and river in quedtion were.', organization2.country, organization2.pic_uri),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$TopMembersList$organizationsListItemTab = F6(
	function (model, id, name, bio, country, picUri) {
		var receiverData = A3(_user$project$Models$ChatMessageReceiverData, id, name, true);
		var pic = _elm_lang$core$String$isEmpty(picUri) ? 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png' : picUri;
		var bioLength = 190;
		var bioProcessed = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(bio),
			bioLength) > 0) ? A2(
			_elm_lang$core$Basics_ops['++'],
			A3(_elm_lang$core$String$slice, 0, bioLength, bio),
			'...') : bio;
		var currentUser = model.loggedInMember;
		var mailVisibility = _elm_lang$core$Native_Utils.eq(currentUser.id, 0) ? {ctor: '_Tuple2', _0: 'visibility', _1: 'hidden'} : {ctor: '_Tuple2', _0: 'visibility', _1: 'visible'};
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1em'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '26vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'height', _1: '23em'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: mailVisibility,
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										_user$project$Messages$OnToggleChatWindow(
											_elm_lang$core$Maybe$Just(receiverData))),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: mail'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.4em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-2em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1.5em'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src(pic),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.8em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.8em'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(name),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.8em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.8em'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(bioProcessed),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(_user$project$TopMembersList$addressView, country, false),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$TopMembersList$organizationsListItem = F6(
	function (model, id, name, bio, country, picUri) {
		var receiverData = A3(_user$project$Models$ChatMessageReceiverData, id, name, true);
		var pic = _elm_lang$core$String$isEmpty(picUri) ? 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png' : picUri;
		var currentUser = model.loggedInMember;
		var mailVisibility = _elm_lang$core$Native_Utils.eq(currentUser.id, 0) ? {ctor: '_Tuple2', _0: 'visibility', _1: 'hidden'} : {ctor: '_Tuple2', _0: 'visibility', _1: 'visible'};
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '3em'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '16em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'height', _1: '23em'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: mailVisibility,
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										_user$project$Messages$OnToggleChatWindow(
											_elm_lang$core$Maybe$Just(receiverData))),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: mail; ratio: 2'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.4em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src(pic),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.8em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.8em'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(name),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.8em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.8em'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(bio),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(_user$project$TopMembersList$addressView, country, false),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$TopMembersList$organizationsListTab = function (model) {
	var topOrganizations = model.topOrganizations;
	var organization1 = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(topOrganizations),
		0) > 0) ? _user$project$Utils$makeRealOrganization(
		_elm_lang$core$List$head(topOrganizations)) : _user$project$Utils$defaultOrganization;
	var remaining = A2(_elm_lang$core$List$drop, 1, topOrganizations);
	var organization2 = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(remaining),
		0) > 0) ? _user$project$Utils$makeRealOrganization(
		_elm_lang$core$List$head(remaining)) : _user$project$Utils$defaultOrganization;
	var remaining2 = A2(_elm_lang$core$List$drop, 1, remaining);
	var organization3 = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(remaining2),
		0) > 0) ? _user$project$Utils$makeRealOrganization(
		_elm_lang$core$List$head(remaining2)) : _user$project$Utils$defaultOrganization;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('organizations-t'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityTab'),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Organisations'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifPlansStyle'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '4em'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A6(_user$project$TopMembersList$organizationsListItemTab, model, organization1.id, organization1.name, 'He determined to drop his litigation with the monastry, and relinguish his claims to the wood-cuting and fishery rihgts at once. He was the more ready to do this becuase the rights had becom much less valuable, and he had indeed the vaguest idea where the wood and river in quedtion were.', organization1.country, organization1.pic_uri),
						_1: {
							ctor: '::',
							_0: A6(_user$project$TopMembersList$organizationsListItemTab, model, organization2.id, organization2.name, 'He determined to drop his litigation with the monastry, and relinguish his claims to the wood-cuting and fishery rihgts at once. He was the more ready to do this becuase the rights had becom much less valuable, and he had indeed the vaguest idea where the wood and river in quedtion were.', organization2.country, organization2.pic_uri),
							_1: {
								ctor: '::',
								_0: A6(_user$project$TopMembersList$organizationsListItemTab, model, organization3.id, organization3.name, 'He determined to drop his litigation with the monastry, and relinguish his claims to the wood-cuting and fishery rihgts at once. He was the more ready to do this becuase the rights had becom much less valuable, and he had indeed the vaguest idea where the wood and river in quedtion were.', organization3.country, organization3.pic_uri),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$TopMembersList$organizationsList = function (model) {
	var topOrganizations = model.topOrganizations;
	var organization1 = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(topOrganizations),
		0) > 0) ? _user$project$Utils$makeRealOrganization(
		_elm_lang$core$List$head(topOrganizations)) : _user$project$Utils$defaultOrganization;
	var remaining = A2(_elm_lang$core$List$drop, 1, topOrganizations);
	var organization2 = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(remaining),
		0) > 0) ? _user$project$Utils$makeRealOrganization(
		_elm_lang$core$List$head(remaining)) : _user$project$Utils$defaultOrganization;
	var remaining2 = A2(_elm_lang$core$List$drop, 1, remaining);
	var organization3 = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(remaining2),
		0) > 0) ? _user$project$Utils$makeRealOrganization(
		_elm_lang$core$List$head(remaining2)) : _user$project$Utils$defaultOrganization;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('organizations'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('responsiveVisibility'),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Organisations'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifPlansStyle'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '75%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '4em'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A6(_user$project$TopMembersList$organizationsListItem, model, organization1.id, organization1.name, 'He determined to drop his litigation with the monastry, and relinguish his claims to the wood-cuting and fishery rihgts at once. He was the more ready to do this becuase the rights had becom much less valuable, and he had indeed the vaguest idea where the wood and river in quedtion were.', organization1.country, organization1.pic_uri),
						_1: {
							ctor: '::',
							_0: A6(_user$project$TopMembersList$organizationsListItem, model, organization2.id, organization2.name, 'He determined to drop his litigation with the monastry, and relinguish his claims to the wood-cuting and fishery rihgts at once. He was the more ready to do this becuase the rights had becom much less valuable, and he had indeed the vaguest idea where the wood and river in quedtion were.', organization2.country, organization2.pic_uri),
							_1: {
								ctor: '::',
								_0: A6(_user$project$TopMembersList$organizationsListItem, model, organization3.id, organization3.name, 'He determined to drop his litigation with the monastry, and relinguish his claims to the wood-cuting and fishery rihgts at once. He was the more ready to do this becuase the rights had becom much less valuable, and he had indeed the vaguest idea where the wood and river in quedtion were.', organization3.country, organization3.pic_uri),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};

var _user$project$LangLocals$locals = {
	ctor: '::',
	_0: A2(_user$project$Models$MapItem, 'Idea generators', 'Գաղափար գեներացնողներ'),
	_1: {
		ctor: '::',
		_0: A2(_user$project$Models$MapItem, 'Organizations', 'Կազմակերպություններ'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Models$MapItem, 'Pricing ', 'Գնացուցակ '),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Models$MapItem, 'About us', 'Մեր մասին'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Models$MapItem, 'Contact', 'Հետադարձ կապ'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Models$MapItem, 'GET STARTED!', 'Գրանցվել'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Models$MapItem, 'LOG IN', 'Մուտք գործել'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Models$MapItem, 'Innovities is a social platform where innovative ideas are found by those who need them.', 'Innovities հարթակը նախատեսված է նորարարական լուծումներ ունեցող օգտատերերի և իրենց բիզնեսի համար նոր լուծումներ փնտրող կազմակերպությունների համար:'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Models$MapItem, 'For Idea generators', 'Գաղափար գեներացնողների համար'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Models$MapItem, 'Free plan', 'Անվճար փաթեթ'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Models$MapItem, 'Basic', 'Հիմնական'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Models$MapItem, 'Plus', 'Պլյուս'),
												_1: {
													ctor: '::',
													_0: A2(_user$project$Models$MapItem, 'Premium', 'Պրեմիում'),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Models$MapItem, 'save', 'խնայեք'),
														_1: {
															ctor: '::',
															_0: A2(_user$project$Models$MapItem, 'Region', 'Տարածաշրջան'),
															_1: {
																ctor: '::',
																_0: A2(_user$project$Models$MapItem, 'Current continent', 'Ընթացիկ մայրցամաք'),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$Models$MapItem, 'Worldwide', 'Ամբողջ աշխարհ'),
																	_1: {
																		ctor: '::',
																		_0: A2(_user$project$Models$MapItem, 'Subscribe', 'Բաժանորդագրվել'),
																		_1: {
																			ctor: '::',
																			_0: A2(_user$project$Models$MapItem, 'Looking for more options?', 'Ցանկանու՞մ եք լրացուցիչ հնարավորություններ:'),
																			_1: {
																				ctor: '::',
																				_0: A2(_user$project$Models$MapItem, 'Contact us', 'Կապվեք մեզ հետ'),
																				_1: {
																					ctor: '::',
																					_0: A2(_user$project$Models$MapItem, 'For organizations', 'Կազմակերպությունների համար'),
																					_1: {
																						ctor: '::',
																						_0: A2(_user$project$Models$MapItem, 'Enterprise', 'Ձեռնարկություն'),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$Models$MapItem, 'short version', 'հակիրճ տարբերակ'),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Models$MapItem, 'complete version', 'ամբողջական տարբերակ'),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$Models$MapItem, 'Tons of innovative ideas are born every day, even every hour, but are quite often not put into action as the right users in need of them are not easy to be found, or idea generators do not know how or whom to approach. On the other hand, there are a lot of companies/organizations seeking/looking for fresh, innovative ideas or solutions, but have limited resources and/or do not know where to find them.', 'Ամեն օր, նույնիսկ ամեն ժամ հազարավոր նորարարական գաղափարներ են ծնվում, բայց շատ հաճախ չեն իրականանում, քանի որ հեշտ չէ գտնել նրանց, ով ունի հենց այդ ուծման կարիքը, կամ գաղափարներ գեներացնողները չգիտեն՝ ինչպես և ում առաջարկել դրանք: Մյուս կողմից, մեծ թվով կազմակերպություններ կան, որոնք փնտրում են նորարարական/թարմ գաղափարներ կամ լուծումներ, բայց ունեն սահմանափակ ռեսուրսներ և/կամ չգիտեն՝ որտեղ գտնեն այդ գաղափարները:'),
																									_1: {
																										ctor: '::',
																										_0: A2(_user$project$Models$MapItem, 'That\'s where our platform provides a helping hand. Innovities is here to help connect both idea generators and companies who are looking for them.', 'Հենց այստեղ է, որ մեր հարթակը օգնության է հասնում: Innovities-ն օգնում է նորարարական լուծումներ ունեցող օգտատերերին և կազմակերպություններին գտնել իրար:'),
																										_1: {
																											ctor: '::',
																											_0: A2(_user$project$Models$MapItem, 'You have a great idea or you need a solution for your business? Get registered and be a part of the world where ideas can turn into solution.', 'Ունեք հետաքրքիր գաղափար, կամ Ձեր բիզնեսի համար հարկավոր են թարմ լուծումնե՞ր: Գրանցվեք և այն աշխարկի մի մասը, որտեղ գաղափարները կարող են վերածվել իրականության:'),
																											_1: {
																												ctor: '::',
																												_0: A2(_user$project$Models$MapItem, 'First name', 'Անուն'),
																												_1: {
																													ctor: '::',
																													_0: A2(_user$project$Models$MapItem, 'Message', 'Հաղորդագրություն'),
																													_1: {
																														ctor: '::',
																														_0: A2(_user$project$Models$MapItem, 'Send', 'Ուղարկել'),
																														_1: {
																															ctor: '::',
																															_0: A2(_user$project$Models$MapItem, 'All rights reserved. Terms of Service.', 'Բոլոր իրավունքները պաշտպանված են: Ծառայությունների մատուցման պայմաններ:'),
																															_1: {
																																ctor: '::',
																																_0: A2(_user$project$Models$MapItem, 'Settings and Privacy', 'Կարգավորումներ և Գաղտնիություն'),
																																_1: {
																																	ctor: '::',
																																	_0: A2(_user$project$Models$MapItem, 'Help Center', 'Օգնության կենտրոն'),
																																	_1: {
																																		ctor: '::',
																																		_0: A2(_user$project$Models$MapItem, 'Sign out', 'Դուրս գալ'),
																																		_1: {
																																			ctor: '::',
																																			_0: A2(_user$project$Models$MapItem, 'Connections', 'Կոնտակտներ'),
																																			_1: {
																																				ctor: '::',
																																				_0: A2(_user$project$Models$MapItem, 'Proposals', 'Առաջարկներ'),
																																				_1: {
																																					ctor: '::',
																																					_0: A2(_user$project$Models$MapItem, 'Photo/Video', 'Նկար/Վիդեո'),
																																					_1: {
																																						ctor: '::',
																																						_0: A2(_user$project$Models$MapItem, 'Suggestions', 'Առաջարկություններ'),
																																						_1: {
																																							ctor: '::',
																																							_0: A2(_user$project$Models$MapItem, 'Edit profile', 'Խմբագրել պրոֆիլը'),
																																							_1: {
																																								ctor: '::',
																																								_0: A2(_user$project$Models$MapItem, 'Share profile', 'Կիսվել պրոֆիլով'),
																																								_1: {
																																									ctor: '::',
																																									_0: A2(_user$project$Models$MapItem, 'Industry', 'Ոլորտ'),
																																									_1: {
																																										ctor: '::',
																																										_0: A2(_user$project$Models$MapItem, 'Industries we are interested in', 'Ոլորտներ՝ որոնցով մենք հետաքրքրված ենք'),
																																										_1: {
																																											ctor: '::',
																																											_0: A2(_user$project$Models$MapItem, 'Education', 'Կրթություն'),
																																											_1: {
																																												ctor: '::',
																																												_0: A2(_user$project$Models$MapItem, 'Experience', 'Փորձ'),
																																												_1: {
																																													ctor: '::',
																																													_0: A2(_user$project$Models$MapItem, 'Generated ideas', 'Գեներացված գաղափարներ'),
																																													_1: {
																																														ctor: '::',
																																														_0: A2(_user$project$Models$MapItem, 'Us', 'Մենք'),
																																														_1: {
																																															ctor: '::',
																																															_0: A2(_user$project$Models$MapItem, 'Me', 'Ես'),
																																															_1: {
																																																ctor: '::',
																																																_0: A2(_user$project$Models$MapItem, 'Follow', 'Հետևել'),
																																																_1: {
																																																	ctor: '::',
																																																	_0: A2(_user$project$Models$MapItem, 'Share', 'Կիսվել'),
																																																	_1: {
																																																		ctor: '::',
																																																		_0: A2(_user$project$Models$MapItem, 'Post', 'Գրառել'),
																																																		_1: {
																																																			ctor: '::',
																																																			_0: A2(_user$project$Models$MapItem, 'Post an Idea', 'Գաղափար տեղադրել'),
																																																			_1: {
																																																				ctor: '::',
																																																				_0: A2(_user$project$Models$MapItem, 'Company', 'Կազմակերպություն'),
																																																				_1: {
																																																					ctor: '::',
																																																					_0: A2(_user$project$Models$MapItem, 'User name', 'Օգտատիրոջ անուն'),
																																																					_1: {
																																																						ctor: '::',
																																																						_0: A2(_user$project$Models$MapItem, 'I agree to the Terms of Service and understand the Privacy statement.', 'Համաձայն եմ ծառայությունների մատուցման պայմաններին և հասկանում եմ գաղտնիության քաղաքականությունը:'),
																																																						_1: {
																																																							ctor: '::',
																																																							_0: A2(_user$project$Models$MapItem, 'Company Name', 'Կազմակերպության անուն'),
																																																							_1: {
																																																								ctor: '::',
																																																								_0: A2(_user$project$Models$MapItem, 'Password', 'Գաղտնաբառ'),
																																																								_1: {
																																																									ctor: '::',
																																																									_0: A2(_user$project$Models$MapItem, 'E-mail', 'Էլ. հասցե'),
																																																									_1: {
																																																										ctor: '::',
																																																										_0: A2(_user$project$Models$MapItem, 'Sign-Up', 'Գրանցվել'),
																																																										_1: {
																																																											ctor: '::',
																																																											_0: A2(_user$project$Models$MapItem, 'Idea Generator', 'Գաղափար գեներացնող'),
																																																											_1: {
																																																												ctor: '::',
																																																												_0: A2(_user$project$Models$MapItem, 'Name Surname', 'Անուն Ազգանուն'),
																																																												_1: {
																																																													ctor: '::',
																																																													_0: A2(_user$project$Models$MapItem, 'Username', 'Օգտատիրոջ անուն'),
																																																													_1: {
																																																														ctor: '::',
																																																														_0: A2(_user$project$Models$MapItem, 'Name', 'Անուն'),
																																																														_1: {
																																																															ctor: '::',
																																																															_0: A2(_user$project$Models$MapItem, 'Surname', 'Ազգանուն'),
																																																															_1: {
																																																																ctor: '::',
																																																																_0: A2(_user$project$Models$MapItem, 'Photo', 'Նկար'),
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: A2(_user$project$Models$MapItem, 'Phone number', 'Հեռախոսահամար'),
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: A2(_user$project$Models$MapItem, 'Email address', 'Էլ. հասցե'),
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: A2(_user$project$Models$MapItem, 'About Me', 'Իմ մասին'),
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: A2(_user$project$Models$MapItem, 'Country', 'Երկիր'),
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: A2(_user$project$Models$MapItem, 'Change Password', 'Փոխեք գաղտնաբառը'),
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: A2(_user$project$Models$MapItem, 'Confirm Password', 'Հաստատել գաղտնաբառը'),
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: A2(_user$project$Models$MapItem, 'Select your tarriff plan', 'Ընտրեք Ձեր սակագնային փաթեթը'),
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: A2(_user$project$Models$MapItem, 'Select Payment Method', 'Ընտրեք վճարման եղանակը'),
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: A2(_user$project$Models$MapItem, 'Logo', 'Լոգո'),
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: A2(_user$project$Models$MapItem, 'Website address', 'Կայք'),
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: A2(_user$project$Models$MapItem, 'About Us', 'Մեր մասին'),
																																																																											_1: {ctor: '[]'}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$LangLocals$getLocal = F2(
	function (key, model) {
		var local_list = A2(
			_elm_lang$core$List$filter,
			function (i) {
				return _elm_lang$core$Native_Utils.eq(i.key, key);
			},
			_user$project$LangLocals$locals);
		var local = function () {
			var _p0 = _elm_lang$core$List$head(local_list);
			if (_p0.ctor === 'Just') {
				return _p0._0;
			} else {
				return A2(_user$project$Models$MapItem, '', '');
			}
		}();
		var o = function () {
			var _p1 = model.language;
			if (_p1.ctor === 'Eng') {
				return local.key;
			} else {
				return local.value;
			}
		}();
		return o;
	});

var _user$project$HeaderView$pricingULViewTab = function (po) {
	var v = function () {
		var _p0 = po;
		if (_p0.ctor === 'Opened') {
			return 'visible';
		} else {
			return 'hidden';
		}
	}();
	return A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'visibility', _1: v},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'listStyleType', _1: 'none'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'right', _1: '42%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'top', _1: '105%'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnPricingClose),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'fontSize', _1: '0.9em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href('#innovators-pricing-t'),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Idea Generators'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('whiteDividerStyle'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$li,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnPricingClose),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'fontSize', _1: '0.9em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href('#organizations-pricing-t'),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Organizations'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$HeaderView$pricingULView = function (po) {
	var v = function () {
		var _p1 = po;
		if (_p1.ctor === 'Opened') {
			return 'visible';
		} else {
			return 'hidden';
		}
	}();
	return A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'visibility', _1: v},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'listStyleType', _1: 'none'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'right', _1: '47%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'top', _1: '105%'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnPricingClose),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'fontSize', _1: '0.9em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href('#innovators-pricing'),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Idea Generators'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('whiteDividerStyle'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$li,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnPricingClose),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'fontSize', _1: '0.9em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href('#organizations-pricing'),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Organizations'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$HeaderView$headerNavigationViewTab = F2(
	function (po, model) {
		return A2(
			_elm_lang$html$Html$ul,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityTab headerNavigationStyle'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href('#innovators-t'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(_user$project$LangLocals$getLocal, 'Idea generators', model)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('|'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$li,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href('#organizations-t'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(_user$project$LangLocals$getLocal, 'Organizations', model)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('|'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$li,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnPricingOpen),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(_user$project$LangLocals$getLocal, 'Pricing ', model)),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: triangle-down'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: _user$project$HeaderView$pricingULViewTab(po),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('|'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$li,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href('#about-us-t'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_user$project$LangLocals$getLocal, 'About us', model)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('|'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$li,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href('#contacts-t'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(_user$project$LangLocals$getLocal, 'Contact', model)),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('|'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$li,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$href('#faq-t'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('FAQ'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(''),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			});
	});
var _user$project$HeaderView$headerNavigationView = F2(
	function (po, model) {
		return A2(
			_elm_lang$html$Html$ul,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('headerNavigationStyle responsiveVisibility'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$id('innovators'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href('#innovators'),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(_user$project$LangLocals$getLocal, 'Idea generators', model)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('|'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$li,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href('#organizations'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(_user$project$LangLocals$getLocal, 'Organizations', model)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('|'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$li,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnPricingOpen),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(_user$project$LangLocals$getLocal, 'Pricing ', model)),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: triangle-down'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: _user$project$HeaderView$pricingULView(po),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('|'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$li,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$id('about-us'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href('#about-us'),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_user$project$LangLocals$getLocal, 'About us', model)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('|'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$li,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href('#contacts'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(_user$project$LangLocals$getLocal, 'Contact', model)),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('|'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$li,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$href('#faq'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('FAQ'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(''),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			});
	});
var _user$project$HeaderView$mobileMenuView = A2(
	_elm_lang$html$Html$span,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '2em'},
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityMobile'),
			_1: {ctor: '[]'}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1em'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							_user$project$Messages$OnSwitchLang(_user$project$Models$Arm)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('arm'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(' | '),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_user$project$Messages$OnSwitchLang(_user$project$Models$Eng)),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('eng'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnMobileMenuOpen),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$href('#menu-m'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'heigh', _1: '10%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src('/images/menu_toggler_trans.png'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _user$project$HeaderView$headerView = function (model) {
	var mobileGeneralDefaultView = model.mobileDefaultView ? {ctor: '_Tuple2', _0: 'display', _1: 'inline-block'} : {ctor: '_Tuple2', _0: 'visibility', _1: 'hidden'};
	var po = model.pricingOpened;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('headerStyle'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: mobileGeneralDefaultView,
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('headerLogo'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: _user$project$HeaderView$mobileMenuView,
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('responsiveVisibility'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												_user$project$Messages$OnSwitchLang(_user$project$Models$Arm)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('arm'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text(' | '),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(
														_user$project$Messages$OnSwitchLang(_user$project$Models$Eng)),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('eng'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(_user$project$HeaderView$headerNavigationView, po, model),
				_1: {
					ctor: '::',
					_0: A2(_user$project$HeaderView$headerNavigationViewTab, po, model),
					_1: {ctor: '[]'}
				}
			}
		});
};

var _user$project$IndustriesList$industries = A2(
	_elm_lang$core$Basics_ops['++'],
	{
		ctor: '::',
		_0: '',
		_1: {
			ctor: '::',
			_0: 'Accounting/Financial & Banking Services',
			_1: {
				ctor: '::',
				_0: 'Airlines/Aviation/Aerospace',
				_1: {
					ctor: '::',
					_0: 'Alternative Medicine',
					_1: {
						ctor: '::',
						_0: 'Animation',
						_1: {
							ctor: '::',
							_0: 'Apparel/Fashion',
							_1: {
								ctor: '::',
								_0: 'Architecture/Planning',
								_1: {
									ctor: '::',
									_0: 'Artificial Intelligence/AI',
									_1: {
										ctor: '::',
										_0: 'Arts/Crafts',
										_1: {
											ctor: '::',
											_0: 'Augmented, Mixed & Virtual Reality/AR, MR, VR',
											_1: {
												ctor: '::',
												_0: 'Automotive',
												_1: {
													ctor: '::',
													_0: 'Biotechnology/Greentech',
													_1: {
														ctor: '::',
														_0: 'Broadcast Media',
														_1: {
															ctor: '::',
															_0: 'Building Materials',
															_1: {
																ctor: '::',
																_0: 'Business Supplies/Equipment',
																_1: {
																	ctor: '::',
																	_0: 'Capital Markets/Hedge Fund/Private Equity',
																	_1: {
																		ctor: '::',
																		_0: 'Chemicals',
																		_1: {
																			ctor: '::',
																			_0: 'Civil Engineering',
																			_1: {
																				ctor: '::',
																				_0: 'Computer Games',
																				_1: {
																					ctor: '::',
																					_0: 'Computer Hardware',
																					_1: {
																						ctor: '::',
																						_0: 'Computer Software/Engineering',
																						_1: {
																							ctor: '::',
																							_0: 'Computer/Network Security',
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: 'Construction',
			_1: {
				ctor: '::',
				_0: 'Consumer Electronics',
				_1: {
					ctor: '::',
					_0: 'Consumer Goods',
					_1: {
						ctor: '::',
						_0: 'Consumer Services',
						_1: {
							ctor: '::',
							_0: 'Cosmetics',
							_1: {
								ctor: '::',
								_0: 'Dairy',
								_1: {
									ctor: '::',
									_0: 'Defense/Space',
									_1: {
										ctor: '::',
										_0: 'Design',
										_1: {
											ctor: '::',
											_0: 'Education/E-Learning',
											_1: {
												ctor: '::',
												_0: 'Electrical/Electronic Manufacturing',
												_1: {
													ctor: '::',
													_0: 'Entertainment/Movie Production',
													_1: {
														ctor: '::',
														_0: 'Environmental Services',
														_1: {
															ctor: '::',
															_0: 'Events Services',
															_1: {
																ctor: '::',
																_0: 'Facilities Services',
																_1: {
																	ctor: '::',
																	_0: 'Farming',
																	_1: {
																		ctor: '::',
																		_0: 'Fine Art',
																		_1: {
																			ctor: '::',
																			_0: 'Fishery',
																			_1: {
																				ctor: '::',
																				_0: 'Food/Beverages',
																				_1: {
																					ctor: '::',
																					_0: 'Furniture',
																					_1: {
																						ctor: '::',
																						_0: 'Gambling/Casinos',
																						_1: {
																							ctor: '::',
																							_0: 'Glass/Ceramics/Concrete',
																							_1: {
																								ctor: '::',
																								_0: 'Graphic Design/Web Design',
																								_1: {
																									ctor: '::',
																									_0: 'Health/Fitness',
																									_1: {
																										ctor: '::',
																										_0: 'Hospital/Health Care',
																										_1: {
																											ctor: '::',
																											_0: 'Human Resources/HR',
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: 'Import/Export',
				_1: {
					ctor: '::',
					_0: 'Industrial Automation',
					_1: {
						ctor: '::',
						_0: 'Information Services',
						_1: {
							ctor: '::',
							_0: 'Information Technology/IT',
							_1: {
								ctor: '::',
								_0: 'Insurance',
								_1: {
									ctor: '::',
									_0: 'International Trade/Development',
									_1: {
										ctor: '::',
										_0: 'Internet',
										_1: {
											ctor: '::',
											_0: 'Legal Services',
											_1: {
												ctor: '::',
												_0: 'Leisure/Travel/Hospitality',
												_1: {
													ctor: '::',
													_0: 'Library',
													_1: {
														ctor: '::',
														_0: 'Logistics/Procurement',
														_1: {
															ctor: '::',
															_0: 'Luxury Goods/Jewelry',
															_1: {
																ctor: '::',
																_0: 'Machinery',
																_1: {
																	ctor: '::',
																	_0: 'Maritime',
																	_1: {
																		ctor: '::',
																		_0: 'Marketing/Advertising & PR/Sales',
																		_1: {
																			ctor: '::',
																			_0: 'Mechanical or Industrial Engineering',
																			_1: {
																				ctor: '::',
																				_0: 'Media Production',
																				_1: {
																					ctor: '::',
																					_0: 'Medical Equipment',
																					_1: {
																						ctor: '::',
																						_0: 'Military Industry',
																						_1: {
																							ctor: '::',
																							_0: 'Mining/Metals',
																							_1: {
																								ctor: '::',
																								_0: 'Motion Pictures/Film',
																								_1: {
																									ctor: '::',
																									_0: 'Museums/Institutions',
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: 'Music',
					_1: {
						ctor: '::',
						_0: 'Nanotechnology',
						_1: {
							ctor: '::',
							_0: 'Newspapers/Journalism',
							_1: {
								ctor: '::',
								_0: 'Non-Profit/Volunteering',
								_1: {
									ctor: '::',
									_0: 'Oil/Energy/Solar/Greentech',
									_1: {
										ctor: '::',
										_0: 'Package/Freight Delivery',
										_1: {
											ctor: '::',
											_0: 'Packaging/Containers',
											_1: {
												ctor: '::',
												_0: 'Paper/Forest Products',
												_1: {
													ctor: '::',
													_0: 'Performing Arts',
													_1: {
														ctor: '::',
														_0: 'Pharmaceuticals',
														_1: {
															ctor: '::',
															_0: 'Philanthropy',
															_1: {
																ctor: '::',
																_0: 'Photography',
																_1: {
																	ctor: '::',
																	_0: 'Plastics',
																	_1: {
																		ctor: '::',
																		_0: 'Political Organization',
																		_1: {
																			ctor: '::',
																			_0: 'Printing',
																			_1: {
																				ctor: '::',
																				_0: 'Professional Training',
																				_1: {
																					ctor: '::',
																					_0: 'Program Development',
																					_1: {
																						ctor: '::',
																						_0: 'Public Safety',
																						_1: {
																							ctor: '::',
																							_0: 'Publishing/Online Publishing',
																							_1: {
																								ctor: '::',
																								_0: 'Railroad Manufacture',
																								_1: {
																									ctor: '::',
																									_0: 'Ranching',
																									_1: {
																										ctor: '::',
																										_0: 'Real Estate',
																										_1: {
																											ctor: '::',
																											_0: 'Recreational Facilities/Services',
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				},
				{
					ctor: '::',
					_0: 'Renewables/Environment',
					_1: {
						ctor: '::',
						_0: 'Restaurants and Bars',
						_1: {
							ctor: '::',
							_0: 'Retail',
							_1: {
								ctor: '::',
								_0: 'Security/Investigations',
								_1: {
									ctor: '::',
									_0: 'Semiconductors',
									_1: {
										ctor: '::',
										_0: 'Shipbuilding',
										_1: {
											ctor: '::',
											_0: 'Sports',
											_1: {
												ctor: '::',
												_0: 'Supermarkets',
												_1: {
													ctor: '::',
													_0: 'Telecommunications',
													_1: {
														ctor: '::',
														_0: 'Textiles',
														_1: {
															ctor: '::',
															_0: 'Tobacco',
															_1: {
																ctor: '::',
																_0: 'Transportation',
																_1: {
																	ctor: '::',
																	_0: 'Utilities',
																	_1: {
																		ctor: '::',
																		_0: 'Venture Capital/VC',
																		_1: {
																			ctor: '::',
																			_0: 'Veterinary',
																			_1: {
																				ctor: '::',
																				_0: 'Warehousing',
																				_1: {
																					ctor: '::',
																					_0: 'Wholesale',
																					_1: {
																						ctor: '::',
																						_0: 'Wine/Spirits',
																						_1: {
																							ctor: '::',
																							_0: 'Wireless',
																							_1: {
																								ctor: '::',
																								_0: 'Writing/Editing',
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}))));

var _user$project$Suggestions$suggestionsListItemForSmallestScreens = F2(
	function (model, suggestedUser) {
		var buttonClickable = _elm_lang$core$Native_Utils.eq(suggestedUser.id, 0) ? A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', '') : A2(_elm_lang$html$Html_Attributes$attribute, 'enabled', '');
		var currentUser = model.loggedInMember;
		var pic = (_elm_lang$core$String$isEmpty(suggestedUser.picture) && currentUser.isOrganization) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : ((_elm_lang$core$String$isEmpty(suggestedUser.picture) && (!currentUser.isOrganization)) ? 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png' : suggestedUser.picture);
		var name = (_elm_lang$core$String$isEmpty(suggestedUser.name) && currentUser.isOrganization) ? 'Name Surename' : ((_elm_lang$core$String$isEmpty(suggestedUser.name) && (!currentUser.isOrganization)) ? 'Company Name' : suggestedUser.name);
		var desc = (_elm_lang$core$String$isEmpty(suggestedUser.description) && (currentUser.isOrganization && _elm_lang$core$Native_Utils.eq(suggestedUser.id, 0))) ? 'Short bio of your yet to be discovered awesome innovator!' : ((_elm_lang$core$String$isEmpty(suggestedUser.description) && ((!currentUser.isOrganization) && _elm_lang$core$Native_Utils.eq(suggestedUser.id, 0))) ? 'Short story about your next yet to be discovered great company!' : suggestedUser.description);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '3em'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '20%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src(pic),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(name),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.5em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(desc),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												_user$project$Messages$OnMakeConnectionInitiated(suggestedUser.id)),
											_1: {
												ctor: '::',
												_0: buttonClickable,
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '75%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Connect'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Suggestions$suggestionsListItemForSmallerScreens = F2(
	function (model, suggestedUser) {
		var buttonClickable = _elm_lang$core$Native_Utils.eq(suggestedUser.id, 0) ? A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', '') : A2(_elm_lang$html$Html_Attributes$attribute, 'enabled', '');
		var currentUser = model.loggedInMember;
		var pic = (_elm_lang$core$String$isEmpty(suggestedUser.picture) && currentUser.isOrganization) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : ((_elm_lang$core$String$isEmpty(suggestedUser.picture) && (!currentUser.isOrganization)) ? 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png' : suggestedUser.picture);
		var name = (_elm_lang$core$String$isEmpty(suggestedUser.name) && currentUser.isOrganization) ? 'Name Surename' : ((_elm_lang$core$String$isEmpty(suggestedUser.name) && (!currentUser.isOrganization)) ? 'Company Name' : suggestedUser.name);
		var desc = (_elm_lang$core$String$isEmpty(suggestedUser.description) && (currentUser.isOrganization && _elm_lang$core$Native_Utils.eq(suggestedUser.id, 0))) ? 'Short bio of your yet to be discovered awesome innovator!' : ((_elm_lang$core$String$isEmpty(suggestedUser.description) && ((!currentUser.isOrganization) && _elm_lang$core$Native_Utils.eq(suggestedUser.id, 0))) ? 'Short story about your next yet to be discovered great company!' : suggestedUser.description);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '3em'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('uk-width-1-5'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src(pic),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('uk-width-3-5'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(name),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(desc),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-width-1-5'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$button,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(
													_user$project$Messages$OnMakeConnectionInitiated(suggestedUser.id)),
												_1: {
													ctor: '::',
													_0: buttonClickable,
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}),
														_1: {ctor: '[]'}
													}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Connect'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Suggestions$suggestionsListItem = F2(
	function (model, suggestedUser) {
		var buttonClickable = _elm_lang$core$Native_Utils.eq(suggestedUser.id, 0) ? A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', '') : A2(_elm_lang$html$Html_Attributes$attribute, 'enabled', '');
		var currentUser = model.loggedInMember;
		var pic = (_elm_lang$core$String$isEmpty(suggestedUser.picture) && currentUser.isOrganization) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : ((_elm_lang$core$String$isEmpty(suggestedUser.picture) && (!currentUser.isOrganization)) ? 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png' : suggestedUser.picture);
		var name = (_elm_lang$core$String$isEmpty(suggestedUser.name) && currentUser.isOrganization) ? 'Name Surename' : ((_elm_lang$core$String$isEmpty(suggestedUser.name) && (!currentUser.isOrganization)) ? 'Company Name' : suggestedUser.name);
		var desc = (_elm_lang$core$String$isEmpty(suggestedUser.description) && (currentUser.isOrganization && _elm_lang$core$Native_Utils.eq(suggestedUser.id, 0))) ? 'Short bio of your yet to be discovered awesome innovator!' : ((_elm_lang$core$String$isEmpty(suggestedUser.description) && ((!currentUser.isOrganization) && _elm_lang$core$Native_Utils.eq(suggestedUser.id, 0))) ? 'Short story about your next yet to be discovered great company!' : suggestedUser.description);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '3em'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '20%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src(pic),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(name),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(desc),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												_user$project$Messages$OnMakeConnectionInitiated(suggestedUser.id)),
											_1: {
												ctor: '::',
												_0: buttonClickable,
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.5em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Connect'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Suggestions$suggestionsMobileView = function (model) {
	var suggestions = A2(
		_elm_lang$core$List$map,
		_user$project$Suggestions$suggestionsListItemForSmallestScreens(model),
		model.suggestedUsers);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-5.5em'},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Suggestions'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$ul,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'overflow', _1: 'auto'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding', _1: '0'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin', _1: '0'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								suggestions),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Suggestions$suggestionsTabView = function (model) {
	var suggestions = A2(
		_elm_lang$core$List$map,
		_user$project$Suggestions$suggestionsListItemForSmallerScreens(model),
		model.suggestedUsers);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-5.5em'},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding', _1: '1em'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Suggestions'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$ul,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'overflow', _1: 'auto'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding', _1: '0'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin', _1: '0'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								suggestions),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Suggestions$rightColumnView = function (model) {
	var suggestions = A2(
		_elm_lang$core$List$map,
		_user$project$Suggestions$suggestionsListItem(model),
		model.suggestedUsers);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding', _1: '1em'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Suggestions'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$ul,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'overflow', _1: 'auto'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding', _1: '0'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin', _1: '0'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								suggestions),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};

var _user$project$SettingsView$settingsMobileItem = F5(
	function (label, val, onClickMsg, editable, onInputMsg) {
		var inputDisabled = editable ? A2(_elm_lang$html$Html_Attributes$attribute, 'enabled', '') : A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', '');
		var inputBorder = editable ? {ctor: '_Tuple2', _0: 'border', _1: '1px solid skyblue'} : {ctor: '_Tuple2', _0: 'border', _1: 'none'};
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('uk-width-2-3 uk-flex-column'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(label),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$input,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onInput(onInputMsg),
											_1: {
												ctor: '::',
												_0: inputDisabled,
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																		_1: {
																			ctor: '::',
																			_0: inputBorder,
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$value(val),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('uk-width-1-3'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(onClickMsg),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'right'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('edit'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-2em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-2em'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$SettingsView$mobileDashboardInnovatorSettingsPageView = function (model) {
	var settingsFieldsForInput = model.innovatorSettingsFields;
	var errorsColor = _elm_lang$core$Native_Utils.eq(settingsFieldsForInput.error, 'Saved!') ? {ctor: '_Tuple2', _0: 'color', _1: 'green'} : {ctor: '_Tuple2', _0: 'color', _1: 'red'};
	var fieldsEditable = model.innovatorSettingsFieldsEditable;
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('General Account Settings'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A5(_user$project$SettingsView$settingsMobileItem, 'Username', settingsFieldsForInput.username, _user$project$Messages$OnSettingsUsernameEditable, fieldsEditable.username, _user$project$Messages$OnInnovatorSettingsUsernameInput),
								_1: {
									ctor: '::',
									_0: A5(_user$project$SettingsView$settingsMobileItem, 'Name', settingsFieldsForInput.name, _user$project$Messages$OnSettingsNameEditable, fieldsEditable.name, _user$project$Messages$OnInnovatorSettingsNameInput),
									_1: {
										ctor: '::',
										_0: A5(_user$project$SettingsView$settingsMobileItem, 'Surname', settingsFieldsForInput.surname, _user$project$Messages$OnSettingsSurnameEditable, fieldsEditable.surname, _user$project$Messages$OnInnovatorSettingsSurnameInput),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('uk-width-2-3 uk-flex-column'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$span,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Photo'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$input,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$value(settingsFieldsForInput.pic_name),
																		_1: {
																			ctor: '::',
																			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$a,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('uk-width-1-3'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'right'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$label,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'normal'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$for('innovator-pic'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('browse'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$input,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$id('innovator-pic'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$type_('file'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$accept('image/*'),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$img,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A5(_user$project$SettingsView$settingsMobileItem, 'Phone number', settingsFieldsForInput.phone, _user$project$Messages$OnSettingsPhoneEditable, fieldsEditable.phone, _user$project$Messages$OnInnovatorSettingsPhoneInput),
													_1: {
														ctor: '::',
														_0: A5(_user$project$SettingsView$settingsMobileItem, 'E-mail address', settingsFieldsForInput.email, _user$project$Messages$OnSettingsEmailEditable, fieldsEditable.email, _user$project$Messages$OnInnovatorSettingsEmailInput),
														_1: {
															ctor: '::',
															_0: A5(_user$project$SettingsView$settingsMobileItem, 'About Me', settingsFieldsForInput.about_me, _user$project$Messages$OnSettingsAboutEditable, fieldsEditable.about, _user$project$Messages$OnInnovatorSettingsAboutInput),
															_1: {
																ctor: '::',
																_0: A5(_user$project$SettingsView$settingsMobileItem, 'Education', settingsFieldsForInput.education, _user$project$Messages$OnSettingsEducationEditable, fieldsEditable.education, _user$project$Messages$OnInnovatorSettingsEducationInput),
																_1: {
																	ctor: '::',
																	_0: A5(_user$project$SettingsView$settingsMobileItem, 'Experience', settingsFieldsForInput.experience, _user$project$Messages$OnSettingsExperienceEditable, fieldsEditable.experience, _user$project$Messages$OnInnovatorSettingsExperienceInput),
																	_1: {
																		ctor: '::',
																		_0: A5(_user$project$SettingsView$settingsMobileItem, 'Country', settingsFieldsForInput.country, _user$project$Messages$OnSettingsCountryEditable, fieldsEditable.country, _user$project$Messages$OnInnovatorSettingsCountryInput),
																		_1: {
																			ctor: '::',
																			_0: A5(_user$project$SettingsView$settingsMobileItem, 'Change Password', settingsFieldsForInput.changePassword, _user$project$Messages$OnSettingsChangePasswordEditable, fieldsEditable.changePassword, _user$project$Messages$OnInnovatorSettingsChangePasswordInput),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$a,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchTariffPlansPage),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.7em'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								}),
																							_1: {ctor: '[]'}
																						}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Select your tariff plan'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$a,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchNDAsPage),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.7em'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('NDAs'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$br,
																							{ctor: '[]'},
																							{ctor: '[]'}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$br,
																								{ctor: '[]'},
																								{ctor: '[]'}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$br,
																									{ctor: '[]'},
																									{ctor: '[]'}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$p,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$style(
																												{
																													ctor: '::',
																													_0: errorsColor,
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																														_1: {ctor: '[]'}
																													}
																												}),
																											_1: {ctor: '[]'}
																										},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text(settingsFieldsForInput.error),
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$button,
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnInnovatorSettingsSaveChanges),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$style(
																														{
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '2em'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2em'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																																			_1: {ctor: '[]'}
																																		}
																																	}
																																}
																															}
																														}),
																													_1: {ctor: '[]'}
																												}
																											},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text('Save Changes'),
																												_1: {ctor: '[]'}
																											}),
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$SettingsView$mobileDashboardOrganizationSettingsPageView = function (model) {
	var settingsFieldsForInput = model.organizationSettingsFields;
	var errorsColor = _elm_lang$core$Native_Utils.eq(settingsFieldsForInput.error, 'Saved!') ? {ctor: '_Tuple2', _0: 'color', _1: 'green'} : {ctor: '_Tuple2', _0: 'color', _1: 'red'};
	var fieldsEditable = model.organizationSettingsFieldsEditable;
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('General Account Settings'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A5(_user$project$SettingsView$settingsMobileItem, 'Username', settingsFieldsForInput.username, _user$project$Messages$OnOrgSettingsUsernameEditable, fieldsEditable.username, _user$project$Messages$OnOrganizationSettingsUsernameInput),
								_1: {
									ctor: '::',
									_0: A5(_user$project$SettingsView$settingsMobileItem, 'Name', settingsFieldsForInput.name, _user$project$Messages$OnOrgSettingsNameEditable, fieldsEditable.name, _user$project$Messages$OnOrganizationSettingsNameInput),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-width-2-3'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Photo'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$input,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$value(settingsFieldsForInput.pic_name),
																	_1: {
																		ctor: '::',
																		_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$a,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('uk-width-1-3'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'right'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$label,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'normal'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$for('organization-pic'),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('browse'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$input,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$id('organization-pic'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$type_('file'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$accept('image/*'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$img,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A5(_user$project$SettingsView$settingsMobileItem, 'Phone number', settingsFieldsForInput.phone, _user$project$Messages$OnOrgSettingsPhoneEditable, fieldsEditable.phone, _user$project$Messages$OnOrganizationSettingsPhoneInput),
												_1: {
													ctor: '::',
													_0: A5(_user$project$SettingsView$settingsMobileItem, 'E-mail address', settingsFieldsForInput.email, _user$project$Messages$OnOrgSettingsEmailEditable, fieldsEditable.email, _user$project$Messages$OnOrganizationSettingsEmailInput),
													_1: {
														ctor: '::',
														_0: A5(_user$project$SettingsView$settingsMobileItem, 'Webpage', settingsFieldsForInput.webpage, _user$project$Messages$OnOrgSettingsWebpageEditable, fieldsEditable.webpage, _user$project$Messages$OnOrganizationSettingsWebpageInput),
														_1: {
															ctor: '::',
															_0: A5(_user$project$SettingsView$settingsMobileItem, 'About Us', settingsFieldsForInput.about_us, _user$project$Messages$OnOrgSettingsAboutEditable, fieldsEditable.about_us, _user$project$Messages$OnOrganizationSettingsAboutInput),
															_1: {
																ctor: '::',
																_0: A5(_user$project$SettingsView$settingsMobileItem, 'Description', settingsFieldsForInput.description, _user$project$Messages$OnOrgSettingsDescriptionEditable, fieldsEditable.description, _user$project$Messages$OnOrganizationSettingsDescriptionInput),
																_1: {
																	ctor: '::',
																	_0: A5(_user$project$SettingsView$settingsMobileItem, 'Industry', settingsFieldsForInput.industry, _user$project$Messages$OnOrgSettingsIndustryEditable, fieldsEditable.industry, _user$project$Messages$OnOrganizationSettingsIndustryInput),
																	_1: {
																		ctor: '::',
																		_0: A5(_user$project$SettingsView$settingsMobileItem, 'Interested Industries', settingsFieldsForInput.interested_industries, _user$project$Messages$OnOrgSettingsInterestedIndustriesEditable, fieldsEditable.interested_industries, _user$project$Messages$OnOrganizationSettingsInterestedIndustriesInput),
																		_1: {
																			ctor: '::',
																			_0: A5(_user$project$SettingsView$settingsMobileItem, 'Country', settingsFieldsForInput.country, _user$project$Messages$OnOrgSettingsCountryEditable, fieldsEditable.country, _user$project$Messages$OnOrganizationSettingsCountryInput),
																			_1: {
																				ctor: '::',
																				_0: A5(_user$project$SettingsView$settingsMobileItem, 'Change Password', settingsFieldsForInput.changePassword, _user$project$Messages$OnOrgSettingsChangePasswordEditable, fieldsEditable.changePassword, _user$project$Messages$OnOrganizationSettingsChangePasswordInput),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$a,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchTariffPlansPage),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.7em'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Select your tariff plan'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$a,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchNDAsPage),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.7em'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																															_1: {ctor: '[]'}
																														}
																													}
																												}
																											}
																										}),
																									_1: {ctor: '[]'}
																								}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('NDAs'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$br,
																								{ctor: '[]'},
																								{ctor: '[]'}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$br,
																									{ctor: '[]'},
																									{ctor: '[]'}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$br,
																										{ctor: '[]'},
																										{ctor: '[]'}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$p,
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$style(
																													{
																														ctor: '::',
																														_0: errorsColor,
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																															_1: {ctor: '[]'}
																														}
																													}),
																												_1: {ctor: '[]'}
																											},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text(settingsFieldsForInput.error),
																												_1: {ctor: '[]'}
																											}),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$button,
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnOrganizationSettingsSaveChanges),
																													_1: {
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$style(
																															{
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '2em'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2em'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																																				_1: {ctor: '[]'}
																																			}
																																		}
																																	}
																																}
																															}),
																														_1: {ctor: '[]'}
																													}
																												},
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html$text('Save Changes'),
																													_1: {ctor: '[]'}
																												}),
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$SettingsView$tabTariffPlanItem = F8(
	function (model, name, ideasCount, connectToOrgsCount, region, priceMth, priceYear, discount) {
		var lang = model.language;
		var currency = function () {
			var _p0 = lang;
			if (_p0.ctor === 'Arm') {
				return 'D';
			} else {
				return '$';
			}
		}();
		var month = function () {
			var _p1 = lang;
			if (_p1.ctor === 'Arm') {
				return ' ամիս / ';
			} else {
				return ' mth / ';
			}
		}();
		var year = function () {
			var _p2 = lang;
			if (_p2.ctor === 'Arm') {
				return 'տարի ';
			} else {
				return 'yr ';
			}
		}();
		var save = function () {
			var _p3 = lang;
			if (_p3.ctor === 'Arm') {
				return ' խնայեք D ';
			} else {
				return ' save $';
			}
		}();
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('uk-flex-column'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(name),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Ideas: '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'Up to ',
												_elm_lang$core$Basics$toString(ideasCount))),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Connect to: '),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(connectToOrgsCount),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Region: '),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(region),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'blue'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(
												_elm_lang$core$Basics_ops['++'],
												currency,
												A2(
													_elm_lang$core$Basics_ops['++'],
													priceMth,
													A2(
														_elm_lang$core$Basics_ops['++'],
														month,
														A2(
															_elm_lang$core$Basics_ops['++'],
															currency,
															A2(_elm_lang$core$Basics_ops['++'], priceYear, year)))))),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														A2(_elm_lang$core$Basics_ops['++'], save, discount)),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$button,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(
													_user$project$Messages$OnSelectTariffPlan(name)),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '2em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Choose'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
	});
var _user$project$SettingsView$mobileOrganizationTariffPlansPageView = function (model) {
	var lang = model.language;
	var bm = function () {
		var _p4 = lang;
		if (_p4.ctor === 'Arm') {
			return '23,190';
		} else {
			return '48';
		}
	}();
	var by = function () {
		var _p5 = lang;
		if (_p5.ctor === 'Arm') {
			return '265,690';
		} else {
			return '548';
		}
	}();
	var bs = function () {
		var _p6 = lang;
		if (_p6.ctor === 'Arm') {
			return '12,590';
		} else {
			return '28';
		}
	}();
	var pm = function () {
		var _p7 = lang;
		if (_p7.ctor === 'Arm') {
			return '36,790';
		} else {
			return '76';
		}
	}();
	var py = function () {
		var _p8 = lang;
		if (_p8.ctor === 'Arm') {
			return '418,090';
		} else {
			return '864';
		}
	}();
	var ps = function () {
		var _p9 = lang;
		if (_p9.ctor === 'Arm') {
			return '23,390';
		} else {
			return '48';
		}
	}();
	var pmm = function () {
		var _p10 = lang;
		if (_p10.ctor === 'Arm') {
			return '61,990';
		} else {
			return '128';
		}
	}();
	var pmy = function () {
		var _p11 = lang;
		if (_p11.ctor === 'Arm') {
			return '715,290';
		} else {
			return '1475';
		}
	}();
	var pms = function () {
		var _p12 = lang;
		if (_p12.ctor === 'Arm') {
			return '28,590';
		} else {
			return '61';
		}
	}();
	var mm = function () {
		var _p13 = lang;
		if (_p13.ctor === 'Arm') {
			return '104,690';
		} else {
			return '216';
		}
	}();
	var my = function () {
		var _p14 = lang;
		if (_p14.ctor === 'Arm') {
			return '1,210,490';
		} else {
			return '2496';
		}
	}();
	var ms = function () {
		var _p15 = lang;
		if (_p15.ctor === 'Arm') {
			return '45,790';
		} else {
			return '96';
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'min-height', _1: '85vh'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'height', _1: '85vh'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'overflow', _1: 'auto'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Select Your Tariff Plan'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A8(_user$project$SettingsView$tabTariffPlanItem, model, 'Basic', 5, '15 idea generators', 'Current country', bm, by, bs),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$br,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A8(_user$project$SettingsView$tabTariffPlanItem, model, 'Plus', 10, '30 idea generators', 'Current region', pm, py, ps),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$br,
													{ctor: '[]'},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$br,
														{ctor: '[]'},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A8(_user$project$SettingsView$tabTariffPlanItem, model, 'Premium', 20, '50 idea generators', 'Current continent', pmm, pmy, pms),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$br,
																{ctor: '[]'},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$br,
																	{ctor: '[]'},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A8(_user$project$SettingsView$tabTariffPlanItem, model, 'Max', 50, 'Unlimited', 'Worldwide', mm, my, ms),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$SettingsView$mobileInnovatorTariffPlansPageView = function (model) {
	var lang = model.language;
	var bm = function () {
		var _p16 = lang;
		if (_p16.ctor === 'Arm') {
			return '3,790';
		} else {
			return '8';
		}
	}();
	var by = function () {
		var _p17 = lang;
		if (_p17.ctor === 'Arm') {
			return '42,590';
		} else {
			return '88';
		}
	}();
	var bs = function () {
		var _p18 = lang;
		if (_p18.ctor === 'Arm') {
			return '2,890';
		} else {
			return '8';
		}
	}();
	var pm = function () {
		var _p19 = lang;
		if (_p19.ctor === 'Arm') {
			return '6,690';
		} else {
			return '14';
		}
	}();
	var py = function () {
		var _p20 = lang;
		if (_p20.ctor === 'Arm') {
			return '76,590';
		} else {
			return '158';
		}
	}();
	var ps = function () {
		var _p21 = lang;
		if (_p21.ctor === 'Arm') {
			return '3,690';
		} else {
			return '10';
		}
	}();
	var pmm = function () {
		var _p22 = lang;
		if (_p22.ctor === 'Arm') {
			return '10,090';
		} else {
			return '21';
		}
	}();
	var pmy = function () {
		var _p23 = lang;
		if (_p23.ctor === 'Arm') {
			return '115,390';
		} else {
			return '238';
		}
	}();
	var pms = function () {
		var _p24 = lang;
		if (_p24.ctor === 'Arm') {
			return '5,690';
		} else {
			return '14';
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Select Your Tariff Plan'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-flex-column'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Free'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Ideas: '),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Up to 2'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Connect to: '),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$span,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('1 Organization'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Region: '),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$span,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Current Country'),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'blue'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Free'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$br,
																{ctor: '[]'},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$button,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(
																			_user$project$Messages$OnSelectTariffPlan('Free')),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2em'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '2em'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Choose'),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$br,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A8(_user$project$SettingsView$tabTariffPlanItem, model, 'Basic', 3, '3 Organization', 'Current Region', bm, by, bs),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$br,
													{ctor: '[]'},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$br,
														{ctor: '[]'},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A8(_user$project$SettingsView$tabTariffPlanItem, model, 'Plus', 6, '5 organizations', 'Current Continent', pm, py, ps),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$br,
																{ctor: '[]'},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$br,
																	{ctor: '[]'},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A8(_user$project$SettingsView$tabTariffPlanItem, model, 'Premium', 8, '8 organizations', 'Worldwide', pmm, pmy, pms),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$SettingsView$mobileDashboardSettingsPageView = function (model) {
	var currentUser = model.loggedInMember;
	var mainPage = _elm_lang$core$Native_Utils.eq(model.desktopPage, _user$project$Models$TariffPlansPage) ? (currentUser.isOrganization ? _user$project$SettingsView$mobileOrganizationTariffPlansPageView(model) : _user$project$SettingsView$mobileInnovatorTariffPlansPageView(model)) : (_elm_lang$core$Native_Utils.eq(model.desktopPage, _user$project$Models$SettingsPage) ? (currentUser.isOrganization ? _user$project$SettingsView$mobileDashboardOrganizationSettingsPageView(model) : _user$project$SettingsView$mobileDashboardInnovatorSettingsPageView(model)) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'}));
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: mainPage,
			_1: {ctor: '[]'}
		});
};
var _user$project$SettingsView$tabInnovatorTariffPlansPageView = function (model) {
	var lang = model.language;
	var bm = function () {
		var _p25 = lang;
		if (_p25.ctor === 'Arm') {
			return '3,790';
		} else {
			return '8';
		}
	}();
	var by = function () {
		var _p26 = lang;
		if (_p26.ctor === 'Arm') {
			return '42,590';
		} else {
			return '88';
		}
	}();
	var bs = function () {
		var _p27 = lang;
		if (_p27.ctor === 'Arm') {
			return '2,890';
		} else {
			return '8';
		}
	}();
	var pm = function () {
		var _p28 = lang;
		if (_p28.ctor === 'Arm') {
			return '6,690';
		} else {
			return '14';
		}
	}();
	var py = function () {
		var _p29 = lang;
		if (_p29.ctor === 'Arm') {
			return '76,590';
		} else {
			return '158';
		}
	}();
	var ps = function () {
		var _p30 = lang;
		if (_p30.ctor === 'Arm') {
			return '3,690';
		} else {
			return '10';
		}
	}();
	var pmm = function () {
		var _p31 = lang;
		if (_p31.ctor === 'Arm') {
			return '10,090';
		} else {
			return '21';
		}
	}();
	var pmy = function () {
		var _p32 = lang;
		if (_p32.ctor === 'Arm') {
			return '115,390';
		} else {
			return '238';
		}
	}();
	var pms = function () {
		var _p33 = lang;
		if (_p33.ctor === 'Arm') {
			return '5,690';
		} else {
			return '14';
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Select Your Tariff Plan'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-2'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('uk-flex-column'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																		_1: {ctor: '[]'}
																	}
																}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Free'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Ideas: '),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$span,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Up to 2'),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Connect to: '),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$span,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('1 Organization'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$span,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Region: '),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$span,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Current Country'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$span,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'blue'},
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Free'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$br,
																		{ctor: '[]'},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$button,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Events$onClick(
																					_user$project$Messages$OnSelectTariffPlan('Free')),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2em'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '2em'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								}
																							}
																						}),
																					_1: {ctor: '[]'}
																				}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Choose'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: A8(_user$project$SettingsView$tabTariffPlanItem, model, 'Basic', 3, '3 Organization', 'Current Region', bm, by, bs),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$br,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$br,
												{ctor: '[]'},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-2'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A8(_user$project$SettingsView$tabTariffPlanItem, model, 'Plus', 6, '5 organizations', 'Current Continent', pm, py, ps),
														_1: {
															ctor: '::',
															_0: A8(_user$project$SettingsView$tabTariffPlanItem, model, 'Premium', 8, '8 organizations', 'Worldwide', pmm, pmy, pms),
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$SettingsView$tabOrganizationTariffPlansPageView = function (model) {
	var lang = model.language;
	var bm = function () {
		var _p34 = lang;
		if (_p34.ctor === 'Arm') {
			return '23,190';
		} else {
			return '48';
		}
	}();
	var by = function () {
		var _p35 = lang;
		if (_p35.ctor === 'Arm') {
			return '265,690';
		} else {
			return '548';
		}
	}();
	var bs = function () {
		var _p36 = lang;
		if (_p36.ctor === 'Arm') {
			return '12,590';
		} else {
			return '28';
		}
	}();
	var pm = function () {
		var _p37 = lang;
		if (_p37.ctor === 'Arm') {
			return '36,790';
		} else {
			return '76';
		}
	}();
	var py = function () {
		var _p38 = lang;
		if (_p38.ctor === 'Arm') {
			return '418,090';
		} else {
			return '864';
		}
	}();
	var ps = function () {
		var _p39 = lang;
		if (_p39.ctor === 'Arm') {
			return '23,390';
		} else {
			return '48';
		}
	}();
	var pmm = function () {
		var _p40 = lang;
		if (_p40.ctor === 'Arm') {
			return '61,990';
		} else {
			return '128';
		}
	}();
	var pmy = function () {
		var _p41 = lang;
		if (_p41.ctor === 'Arm') {
			return '715,290';
		} else {
			return '1475';
		}
	}();
	var pms = function () {
		var _p42 = lang;
		if (_p42.ctor === 'Arm') {
			return '28,590';
		} else {
			return '61';
		}
	}();
	var mm = function () {
		var _p43 = lang;
		if (_p43.ctor === 'Arm') {
			return '104,690';
		} else {
			return '216';
		}
	}();
	var my = function () {
		var _p44 = lang;
		if (_p44.ctor === 'Arm') {
			return '1,210,490';
		} else {
			return '2496';
		}
	}();
	var ms = function () {
		var _p45 = lang;
		if (_p45.ctor === 'Arm') {
			return '45,790';
		} else {
			return '96';
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Select Your Tariff Plan'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-2'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A8(_user$project$SettingsView$tabTariffPlanItem, model, 'Basic', 5, '15 idea generators', 'Current country', bm, by, bs),
										_1: {
											ctor: '::',
											_0: A8(_user$project$SettingsView$tabTariffPlanItem, model, 'Plus', 10, '30 idea generators', 'Current region', pm, py, ps),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$br,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$br,
												{ctor: '[]'},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-2'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A8(_user$project$SettingsView$tabTariffPlanItem, model, 'Premium', 20, '50 idea generators', 'Current continent', pmm, pmy, pms),
														_1: {
															ctor: '::',
															_0: A8(_user$project$SettingsView$tabTariffPlanItem, model, 'Max', 50, 'Unlimited', 'Worldwide', mm, my, ms),
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$SettingsView$tariffPlanItem = F8(
	function (model, name, ideasCount, connectToOrgsCount, region, priceMth, priceYear, discount) {
		var lang = model.language;
		var currency = function () {
			var _p46 = lang;
			if (_p46.ctor === 'Arm') {
				return 'D';
			} else {
				return '$';
			}
		}();
		var month = function () {
			var _p47 = lang;
			if (_p47.ctor === 'Arm') {
				return 'ամիս / ';
			} else {
				return 'mth / ';
			}
		}();
		var year = function () {
			var _p48 = lang;
			if (_p48.ctor === 'Arm') {
				return 'տարի ';
			} else {
				return 'yr ';
			}
		}();
		var save = function () {
			var _p49 = lang;
			if (_p49.ctor === 'Arm') {
				return ' խնայեք D ';
			} else {
				return ' save $';
			}
		}();
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.7em'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										_user$project$Messages$OnSelectTariffPlan(name)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(name),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'Up to ',
												_elm_lang$core$Basics$toString(ideasCount))),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '25%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(connectToOrgsCount),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '25%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(region),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '30%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'blue'},
																	_1: {ctor: '[]'}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														A2(
															_elm_lang$core$Basics_ops['++'],
															currency,
															A2(
																_elm_lang$core$Basics_ops['++'],
																priceMth,
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	month,
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		currency,
																		A2(_elm_lang$core$Basics_ops['++'], priceYear, year)))))),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(
																	A2(_elm_lang$core$Basics_ops['++'], save, discount)),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$SettingsView$dashboardOrganizationTariffPlansPageView = function (model) {
	var lang = model.language;
	var bm = function () {
		var _p50 = lang;
		if (_p50.ctor === 'Arm') {
			return '23,190';
		} else {
			return '48';
		}
	}();
	var by = function () {
		var _p51 = lang;
		if (_p51.ctor === 'Arm') {
			return '265,690';
		} else {
			return '548';
		}
	}();
	var bs = function () {
		var _p52 = lang;
		if (_p52.ctor === 'Arm') {
			return '12,590';
		} else {
			return '28';
		}
	}();
	var pm = function () {
		var _p53 = lang;
		if (_p53.ctor === 'Arm') {
			return '36,790';
		} else {
			return '76';
		}
	}();
	var py = function () {
		var _p54 = lang;
		if (_p54.ctor === 'Arm') {
			return '418,090';
		} else {
			return '864';
		}
	}();
	var ps = function () {
		var _p55 = lang;
		if (_p55.ctor === 'Arm') {
			return '23,390';
		} else {
			return '48';
		}
	}();
	var pmm = function () {
		var _p56 = lang;
		if (_p56.ctor === 'Arm') {
			return '61,990';
		} else {
			return '128';
		}
	}();
	var pmy = function () {
		var _p57 = lang;
		if (_p57.ctor === 'Arm') {
			return '715,290';
		} else {
			return '1475';
		}
	}();
	var pms = function () {
		var _p58 = lang;
		if (_p58.ctor === 'Arm') {
			return '28,590';
		} else {
			return '61';
		}
	}();
	var mm = function () {
		var _p59 = lang;
		if (_p59.ctor === 'Arm') {
			return '104,690';
		} else {
			return '216';
		}
	}();
	var my = function () {
		var _p60 = lang;
		if (_p60.ctor === 'Arm') {
			return '1,210,490';
		} else {
			return '2496';
		}
	}();
	var ms = function () {
		var _p61 = lang;
		if (_p61.ctor === 'Arm') {
			return '45,790';
		} else {
			return '96';
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveDisplay uk-width-3-5 uk-flex uk-flex-column'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Select Your Tariff Plan'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(''),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Ideas'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'width', _1: '25%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Connect to'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '25%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Region'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'width', _1: '30%'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Price'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A8(_user$project$SettingsView$tariffPlanItem, model, 'Basic', 5, '15 idea generators', 'Current country', bm, by, bs),
									_1: {
										ctor: '::',
										_0: A8(_user$project$SettingsView$tariffPlanItem, model, 'Plus', 10, '30 idea generators', 'Current region', pm, py, ps),
										_1: {
											ctor: '::',
											_0: A8(_user$project$SettingsView$tariffPlanItem, model, 'Premium', 20, '50 idea generators', 'Current continent', pmm, pmy, pms),
											_1: {
												ctor: '::',
												_0: A8(_user$project$SettingsView$tariffPlanItem, model, 'Max', 50, 'Unlimited', 'Worldwide', mm, my, ms),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$SettingsView$dashboardTariffPlansPageView = function (model) {
	var lang = model.language;
	var bm = function () {
		var _p62 = lang;
		if (_p62.ctor === 'Arm') {
			return '3,790';
		} else {
			return '8';
		}
	}();
	var by = function () {
		var _p63 = lang;
		if (_p63.ctor === 'Arm') {
			return '42,590';
		} else {
			return '88';
		}
	}();
	var bs = function () {
		var _p64 = lang;
		if (_p64.ctor === 'Arm') {
			return '2,890';
		} else {
			return '8';
		}
	}();
	var pm = function () {
		var _p65 = lang;
		if (_p65.ctor === 'Arm') {
			return '6,690';
		} else {
			return '14';
		}
	}();
	var py = function () {
		var _p66 = lang;
		if (_p66.ctor === 'Arm') {
			return '76,590';
		} else {
			return '158';
		}
	}();
	var ps = function () {
		var _p67 = lang;
		if (_p67.ctor === 'Arm') {
			return '3,690';
		} else {
			return '10';
		}
	}();
	var pmm = function () {
		var _p68 = lang;
		if (_p68.ctor === 'Arm') {
			return '10,090';
		} else {
			return '21';
		}
	}();
	var pmy = function () {
		var _p69 = lang;
		if (_p69.ctor === 'Arm') {
			return '115,390';
		} else {
			return '238';
		}
	}();
	var pms = function () {
		var _p70 = lang;
		if (_p70.ctor === 'Arm') {
			return '5,690';
		} else {
			return '14';
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveDisplay uk-width-3-5 uk-flex uk-flex-column'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Select Your Tariff Plan'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(''),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Ideas'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'width', _1: '25%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Connect to'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '25%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Region'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'width', _1: '30%'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Price'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$img,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.7em'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(
															_user$project$Messages$OnSelectTariffPlan('Free')),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Free'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																			_1: {ctor: '[]'}
																		}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Up to 2'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'width', _1: '25%'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('1 organization'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$span,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'width', _1: '25%'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Current Country'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$span,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'width', _1: '30%'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'blue'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Free'),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: A8(_user$project$SettingsView$tariffPlanItem, model, 'Basic', 3, '3 organizations', 'Current Region', bm, by, bs),
											_1: {
												ctor: '::',
												_0: A8(_user$project$SettingsView$tariffPlanItem, model, 'Plus', 6, '5 organizations', 'Current Continent', pm, py, ps),
												_1: {
													ctor: '::',
													_0: A8(_user$project$SettingsView$tariffPlanItem, model, 'Premium', 8, '8 organizations', 'Worldwide', pmm, pmy, pms),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(model.tariffPlanSubError),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$SettingsView$settingsItem = F5(
	function (label, val, onClickMsg, editable, onInputMsg) {
		var inputDisabled = editable ? A2(_elm_lang$html$Html_Attributes$attribute, 'enabled', '') : A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', '');
		var inputBorder = editable ? {ctor: '_Tuple2', _0: 'border', _1: '1px solid skyblue'} : {ctor: '_Tuple2', _0: 'border', _1: 'none'};
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-3'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(label),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(onInputMsg),
									_1: {
										ctor: '::',
										_0: inputDisabled,
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
															_1: {
																ctor: '::',
																_0: inputBorder,
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(val),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(onClickMsg),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'right'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('edit'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.7em'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$SettingsView$tabDashboardOrganizationSettingsPageView = function (model) {
	var settingsFieldsForInput = model.organizationSettingsFields;
	var errorsColor = _elm_lang$core$Native_Utils.eq(settingsFieldsForInput.error, 'Saved!') ? {ctor: '_Tuple2', _0: 'color', _1: 'green'} : {ctor: '_Tuple2', _0: 'color', _1: 'red'};
	var fieldsEditable = model.organizationSettingsFieldsEditable;
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('General Account Settings'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A5(_user$project$SettingsView$settingsItem, 'Username', settingsFieldsForInput.username, _user$project$Messages$OnOrgSettingsUsernameEditable, fieldsEditable.username, _user$project$Messages$OnOrganizationSettingsUsernameInput),
								_1: {
									ctor: '::',
									_0: A5(_user$project$SettingsView$settingsItem, 'Name', settingsFieldsForInput.name, _user$project$Messages$OnOrgSettingsNameEditable, fieldsEditable.name, _user$project$Messages$OnOrganizationSettingsNameInput),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-3'),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Photo'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$input,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$value(settingsFieldsForInput.pic_name),
															_1: {
																ctor: '::',
																_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$a,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'right'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$label,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'normal'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$for('organization-pic'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('browse'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$input,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$id('organization-pic'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$type_('file'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$accept('image/*'),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$img,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A5(_user$project$SettingsView$settingsItem, 'Phone number', settingsFieldsForInput.phone, _user$project$Messages$OnOrgSettingsPhoneEditable, fieldsEditable.phone, _user$project$Messages$OnOrganizationSettingsPhoneInput),
												_1: {
													ctor: '::',
													_0: A5(_user$project$SettingsView$settingsItem, 'E-mail address', settingsFieldsForInput.email, _user$project$Messages$OnOrgSettingsEmailEditable, fieldsEditable.email, _user$project$Messages$OnOrganizationSettingsEmailInput),
													_1: {
														ctor: '::',
														_0: A5(_user$project$SettingsView$settingsItem, 'Webpage', settingsFieldsForInput.webpage, _user$project$Messages$OnOrgSettingsWebpageEditable, fieldsEditable.webpage, _user$project$Messages$OnOrganizationSettingsWebpageInput),
														_1: {
															ctor: '::',
															_0: A5(_user$project$SettingsView$settingsItem, 'About Us', settingsFieldsForInput.about_us, _user$project$Messages$OnOrgSettingsAboutEditable, fieldsEditable.about_us, _user$project$Messages$OnOrganizationSettingsAboutInput),
															_1: {
																ctor: '::',
																_0: A5(_user$project$SettingsView$settingsItem, 'Description', settingsFieldsForInput.description, _user$project$Messages$OnOrgSettingsDescriptionEditable, fieldsEditable.description, _user$project$Messages$OnOrganizationSettingsDescriptionInput),
																_1: {
																	ctor: '::',
																	_0: A5(_user$project$SettingsView$settingsItem, 'Industry', settingsFieldsForInput.industry, _user$project$Messages$OnOrgSettingsIndustryEditable, fieldsEditable.industry, _user$project$Messages$OnOrganizationSettingsIndustryInput),
																	_1: {
																		ctor: '::',
																		_0: A5(_user$project$SettingsView$settingsItem, 'Interested Industries', settingsFieldsForInput.interested_industries, _user$project$Messages$OnOrgSettingsInterestedIndustriesEditable, fieldsEditable.interested_industries, _user$project$Messages$OnOrganizationSettingsInterestedIndustriesInput),
																		_1: {
																			ctor: '::',
																			_0: A5(_user$project$SettingsView$settingsItem, 'Country', settingsFieldsForInput.country, _user$project$Messages$OnOrgSettingsCountryEditable, fieldsEditable.country, _user$project$Messages$OnOrganizationSettingsCountryInput),
																			_1: {
																				ctor: '::',
																				_0: A5(_user$project$SettingsView$settingsItem, 'Change Password', settingsFieldsForInput.changePassword, _user$project$Messages$OnOrgSettingsChangePasswordEditable, fieldsEditable.changePassword, _user$project$Messages$OnOrganizationSettingsChangePasswordInput),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$a,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchTariffPlansPage),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.7em'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Select your tariff plan'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$a,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchNDAsPage),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.7em'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																															_1: {ctor: '[]'}
																														}
																													}
																												}
																											}
																										}),
																									_1: {ctor: '[]'}
																								}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('NDAs'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$br,
																								{ctor: '[]'},
																								{ctor: '[]'}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$br,
																									{ctor: '[]'},
																									{ctor: '[]'}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$br,
																										{ctor: '[]'},
																										{ctor: '[]'}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$p,
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$style(
																													{
																														ctor: '::',
																														_0: errorsColor,
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																															_1: {ctor: '[]'}
																														}
																													}),
																												_1: {ctor: '[]'}
																											},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text(settingsFieldsForInput.error),
																												_1: {ctor: '[]'}
																											}),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$button,
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnOrganizationSettingsSaveChanges),
																													_1: {
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$style(
																															{
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '2em'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2em'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																																				_1: {ctor: '[]'}
																																			}
																																		}
																																	}
																																}
																															}),
																														_1: {ctor: '[]'}
																													}
																												},
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html$text('Save Changes'),
																													_1: {ctor: '[]'}
																												}),
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$SettingsView$tabDashboardInnovatorSettingsPageView = function (model) {
	var settingsFieldsForInput = model.innovatorSettingsFields;
	var errorsColor = _elm_lang$core$Native_Utils.eq(settingsFieldsForInput.error, 'Saved!') ? {ctor: '_Tuple2', _0: 'color', _1: 'green'} : {ctor: '_Tuple2', _0: 'color', _1: 'red'};
	var fieldsEditable = model.innovatorSettingsFieldsEditable;
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('General Account Settings'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A5(_user$project$SettingsView$settingsItem, 'Username', settingsFieldsForInput.username, _user$project$Messages$OnSettingsUsernameEditable, fieldsEditable.username, _user$project$Messages$OnInnovatorSettingsUsernameInput),
								_1: {
									ctor: '::',
									_0: A5(_user$project$SettingsView$settingsItem, 'Name', settingsFieldsForInput.name, _user$project$Messages$OnSettingsNameEditable, fieldsEditable.name, _user$project$Messages$OnInnovatorSettingsNameInput),
									_1: {
										ctor: '::',
										_0: A5(_user$project$SettingsView$settingsItem, 'Surname', settingsFieldsForInput.surname, _user$project$Messages$OnSettingsSurnameEditable, fieldsEditable.surname, _user$project$Messages$OnInnovatorSettingsSurnameInput),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-3'),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Photo'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$input,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$value(settingsFieldsForInput.pic_name),
																_1: {
																	ctor: '::',
																	_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$a,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'right'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$label,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'normal'},
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$for('innovator-pic'),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('browse'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$input,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$id('innovator-pic'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$type_('file'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$accept('image/*'),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$img,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A5(_user$project$SettingsView$settingsItem, 'Phone number', settingsFieldsForInput.phone, _user$project$Messages$OnSettingsPhoneEditable, fieldsEditable.phone, _user$project$Messages$OnInnovatorSettingsPhoneInput),
													_1: {
														ctor: '::',
														_0: A5(_user$project$SettingsView$settingsItem, 'E-mail address', settingsFieldsForInput.email, _user$project$Messages$OnSettingsEmailEditable, fieldsEditable.email, _user$project$Messages$OnInnovatorSettingsEmailInput),
														_1: {
															ctor: '::',
															_0: A5(_user$project$SettingsView$settingsItem, 'About Me', settingsFieldsForInput.about_me, _user$project$Messages$OnSettingsAboutEditable, fieldsEditable.about, _user$project$Messages$OnInnovatorSettingsAboutInput),
															_1: {
																ctor: '::',
																_0: A5(_user$project$SettingsView$settingsItem, 'Education', settingsFieldsForInput.education, _user$project$Messages$OnSettingsEducationEditable, fieldsEditable.education, _user$project$Messages$OnInnovatorSettingsEducationInput),
																_1: {
																	ctor: '::',
																	_0: A5(_user$project$SettingsView$settingsItem, 'Experience', settingsFieldsForInput.experience, _user$project$Messages$OnSettingsExperienceEditable, fieldsEditable.experience, _user$project$Messages$OnInnovatorSettingsExperienceInput),
																	_1: {
																		ctor: '::',
																		_0: A5(_user$project$SettingsView$settingsItem, 'Country', settingsFieldsForInput.country, _user$project$Messages$OnSettingsCountryEditable, fieldsEditable.country, _user$project$Messages$OnInnovatorSettingsCountryInput),
																		_1: {
																			ctor: '::',
																			_0: A5(_user$project$SettingsView$settingsItem, 'Change Password', settingsFieldsForInput.changePassword, _user$project$Messages$OnSettingsChangePasswordEditable, fieldsEditable.changePassword, _user$project$Messages$OnInnovatorSettingsChangePasswordInput),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$a,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchTariffPlansPage),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.7em'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								}),
																							_1: {ctor: '[]'}
																						}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Select your tariff plan'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$a,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchNDAsPage),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.7em'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('NDAs'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$br,
																							{ctor: '[]'},
																							{ctor: '[]'}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$br,
																								{ctor: '[]'},
																								{ctor: '[]'}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$br,
																									{ctor: '[]'},
																									{ctor: '[]'}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$p,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$style(
																												{
																													ctor: '::',
																													_0: errorsColor,
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																														_1: {ctor: '[]'}
																													}
																												}),
																											_1: {ctor: '[]'}
																										},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text(settingsFieldsForInput.error),
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$button,
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnInnovatorSettingsSaveChanges),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$style(
																														{
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '2em'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2em'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																																			_1: {ctor: '[]'}
																																		}
																																	}
																																}
																															}
																														}),
																													_1: {ctor: '[]'}
																												}
																											},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text('Save Changes'),
																												_1: {ctor: '[]'}
																											}),
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$SettingsView$tabDashboardSettingsPageView = function (model) {
	var currentUser = model.loggedInMember;
	var mainPage = _elm_lang$core$Native_Utils.eq(model.desktopPage, _user$project$Models$TariffPlansPage) ? (currentUser.isOrganization ? _user$project$SettingsView$tabOrganizationTariffPlansPageView(model) : _user$project$SettingsView$tabInnovatorTariffPlansPageView(model)) : (_elm_lang$core$Native_Utils.eq(model.desktopPage, _user$project$Models$SettingsPage) ? (currentUser.isOrganization ? _user$project$SettingsView$tabDashboardOrganizationSettingsPageView(model) : _user$project$SettingsView$tabDashboardInnovatorSettingsPageView(model)) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'}));
	return mainPage;
};
var _user$project$SettingsView$dashboardOrganizationSettingsPageView = function (model) {
	var settingsFieldsForInput = model.organizationSettingsFields;
	var errorsColor = _elm_lang$core$Native_Utils.eq(settingsFieldsForInput.error, 'Saved!') ? {ctor: '_Tuple2', _0: 'color', _1: 'green'} : {ctor: '_Tuple2', _0: 'color', _1: 'red'};
	var fieldsEditable = model.organizationSettingsFieldsEditable;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveDisplay uk-width-3-5 uk-flex uk-flex-column'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('General Account Settings'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A5(_user$project$SettingsView$settingsItem, 'Username', settingsFieldsForInput.username, _user$project$Messages$OnOrgSettingsUsernameEditable, fieldsEditable.username, _user$project$Messages$OnOrganizationSettingsUsernameInput),
								_1: {
									ctor: '::',
									_0: A5(_user$project$SettingsView$settingsItem, 'Name', settingsFieldsForInput.name, _user$project$Messages$OnOrgSettingsNameEditable, fieldsEditable.name, _user$project$Messages$OnOrganizationSettingsNameInput),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-3'),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Photo'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$input,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$value(settingsFieldsForInput.pic_name),
															_1: {
																ctor: '::',
																_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$a,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'right'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$label,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'normal'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$for('organization-pic'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('browse'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$input,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$id('organization-pic'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$type_('file'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$accept('image/*'),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$img,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A5(_user$project$SettingsView$settingsItem, 'Phone number', settingsFieldsForInput.phone, _user$project$Messages$OnOrgSettingsPhoneEditable, fieldsEditable.phone, _user$project$Messages$OnOrganizationSettingsPhoneInput),
												_1: {
													ctor: '::',
													_0: A5(_user$project$SettingsView$settingsItem, 'E-mail address', settingsFieldsForInput.email, _user$project$Messages$OnOrgSettingsEmailEditable, fieldsEditable.email, _user$project$Messages$OnOrganizationSettingsEmailInput),
													_1: {
														ctor: '::',
														_0: A5(_user$project$SettingsView$settingsItem, 'Webpage', settingsFieldsForInput.webpage, _user$project$Messages$OnOrgSettingsWebpageEditable, fieldsEditable.webpage, _user$project$Messages$OnOrganizationSettingsWebpageInput),
														_1: {
															ctor: '::',
															_0: A5(_user$project$SettingsView$settingsItem, 'About Us', settingsFieldsForInput.about_us, _user$project$Messages$OnOrgSettingsAboutEditable, fieldsEditable.about_us, _user$project$Messages$OnOrganizationSettingsAboutInput),
															_1: {
																ctor: '::',
																_0: A5(_user$project$SettingsView$settingsItem, 'Description', settingsFieldsForInput.description, _user$project$Messages$OnOrgSettingsDescriptionEditable, fieldsEditable.description, _user$project$Messages$OnOrganizationSettingsDescriptionInput),
																_1: {
																	ctor: '::',
																	_0: A5(_user$project$SettingsView$settingsItem, 'Industry', settingsFieldsForInput.industry, _user$project$Messages$OnOrgSettingsIndustryEditable, fieldsEditable.industry, _user$project$Messages$OnOrganizationSettingsIndustryInput),
																	_1: {
																		ctor: '::',
																		_0: A5(_user$project$SettingsView$settingsItem, 'Interested Industries', settingsFieldsForInput.interested_industries, _user$project$Messages$OnOrgSettingsInterestedIndustriesEditable, fieldsEditable.interested_industries, _user$project$Messages$OnOrganizationSettingsInterestedIndustriesInput),
																		_1: {
																			ctor: '::',
																			_0: A5(_user$project$SettingsView$settingsItem, 'Country', settingsFieldsForInput.country, _user$project$Messages$OnOrgSettingsCountryEditable, fieldsEditable.country, _user$project$Messages$OnOrganizationSettingsCountryInput),
																			_1: {
																				ctor: '::',
																				_0: A5(_user$project$SettingsView$settingsItem, 'Change Password', settingsFieldsForInput.changePassword, _user$project$Messages$OnOrgSettingsChangePasswordEditable, fieldsEditable.changePassword, _user$project$Messages$OnOrganizationSettingsChangePasswordInput),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$a,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchTariffPlansPage),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.7em'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Select your tariff plan'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$a,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchNDAsPage),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.7em'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																															_1: {ctor: '[]'}
																														}
																													}
																												}
																											}
																										}),
																									_1: {ctor: '[]'}
																								}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('NDAs'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$br,
																								{ctor: '[]'},
																								{ctor: '[]'}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$br,
																									{ctor: '[]'},
																									{ctor: '[]'}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$br,
																										{ctor: '[]'},
																										{ctor: '[]'}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$p,
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$style(
																													{
																														ctor: '::',
																														_0: errorsColor,
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																															_1: {ctor: '[]'}
																														}
																													}),
																												_1: {ctor: '[]'}
																											},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text(settingsFieldsForInput.error),
																												_1: {ctor: '[]'}
																											}),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$button,
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnOrganizationSettingsSaveChanges),
																													_1: {
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$style(
																															{
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '2em'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2em'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																																				_1: {ctor: '[]'}
																																			}
																																		}
																																	}
																																}
																															}),
																														_1: {ctor: '[]'}
																													}
																												},
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html$text('Save Changes'),
																													_1: {ctor: '[]'}
																												}),
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$SettingsView$dashboardSettingsPageView = function (model) {
	var settingsFieldsForInput = model.innovatorSettingsFields;
	var errorsColor = _elm_lang$core$Native_Utils.eq(settingsFieldsForInput.error, 'Saved!') ? {ctor: '_Tuple2', _0: 'color', _1: 'green'} : {ctor: '_Tuple2', _0: 'color', _1: 'red'};
	var fieldsEditable = model.innovatorSettingsFieldsEditable;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveDisplay uk-width-3-5 uk-flex uk-flex-column'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('General Account Settings'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A5(_user$project$SettingsView$settingsItem, 'Username', settingsFieldsForInput.username, _user$project$Messages$OnSettingsUsernameEditable, fieldsEditable.username, _user$project$Messages$OnInnovatorSettingsUsernameInput),
								_1: {
									ctor: '::',
									_0: A5(_user$project$SettingsView$settingsItem, 'Name', settingsFieldsForInput.name, _user$project$Messages$OnSettingsNameEditable, fieldsEditable.name, _user$project$Messages$OnInnovatorSettingsNameInput),
									_1: {
										ctor: '::',
										_0: A5(_user$project$SettingsView$settingsItem, 'Surname', settingsFieldsForInput.surname, _user$project$Messages$OnSettingsSurnameEditable, fieldsEditable.surname, _user$project$Messages$OnInnovatorSettingsSurnameInput),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-3'),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Photo'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$input,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$value(settingsFieldsForInput.pic_name),
																_1: {
																	ctor: '::',
																	_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$a,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'right'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$label,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'normal'},
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$for('innovator-pic'),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('browse'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$input,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$id('innovator-pic'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$type_('file'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$accept('image/*'),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$img,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A5(_user$project$SettingsView$settingsItem, 'Phone number', settingsFieldsForInput.phone, _user$project$Messages$OnSettingsPhoneEditable, fieldsEditable.phone, _user$project$Messages$OnInnovatorSettingsPhoneInput),
													_1: {
														ctor: '::',
														_0: A5(_user$project$SettingsView$settingsItem, 'E-mail address', settingsFieldsForInput.email, _user$project$Messages$OnSettingsEmailEditable, fieldsEditable.email, _user$project$Messages$OnInnovatorSettingsEmailInput),
														_1: {
															ctor: '::',
															_0: A5(_user$project$SettingsView$settingsItem, 'About Me', settingsFieldsForInput.about_me, _user$project$Messages$OnSettingsAboutEditable, fieldsEditable.about, _user$project$Messages$OnInnovatorSettingsAboutInput),
															_1: {
																ctor: '::',
																_0: A5(_user$project$SettingsView$settingsItem, 'Education', settingsFieldsForInput.education, _user$project$Messages$OnSettingsEducationEditable, fieldsEditable.education, _user$project$Messages$OnInnovatorSettingsEducationInput),
																_1: {
																	ctor: '::',
																	_0: A5(_user$project$SettingsView$settingsItem, 'Experience', settingsFieldsForInput.experience, _user$project$Messages$OnSettingsExperienceEditable, fieldsEditable.experience, _user$project$Messages$OnInnovatorSettingsExperienceInput),
																	_1: {
																		ctor: '::',
																		_0: A5(_user$project$SettingsView$settingsItem, 'Country', settingsFieldsForInput.country, _user$project$Messages$OnSettingsCountryEditable, fieldsEditable.country, _user$project$Messages$OnInnovatorSettingsCountryInput),
																		_1: {
																			ctor: '::',
																			_0: A5(_user$project$SettingsView$settingsItem, 'Change Password', settingsFieldsForInput.changePassword, _user$project$Messages$OnSettingsChangePasswordEditable, fieldsEditable.changePassword, _user$project$Messages$OnInnovatorSettingsChangePasswordInput),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$a,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchTariffPlansPage),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.7em'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								}),
																							_1: {ctor: '[]'}
																						}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Select your tariff plan'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$a,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchNDAsPage),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.7em'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('NDAs'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$br,
																							{ctor: '[]'},
																							{ctor: '[]'}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$br,
																								{ctor: '[]'},
																								{ctor: '[]'}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$br,
																									{ctor: '[]'},
																									{ctor: '[]'}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$p,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$style(
																												{
																													ctor: '::',
																													_0: errorsColor,
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																														_1: {ctor: '[]'}
																													}
																												}),
																											_1: {ctor: '[]'}
																										},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text(settingsFieldsForInput.error),
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$button,
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnInnovatorSettingsSaveChanges),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$style(
																														{
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '2em'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2em'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																																			_1: {ctor: '[]'}
																																		}
																																	}
																																}
																															}
																														}),
																													_1: {ctor: '[]'}
																												}
																											},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text('Save Changes'),
																												_1: {ctor: '[]'}
																											}),
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};

var _user$project$NotificationsView$newNotifItem = function (item) {
	return A2(
		_elm_lang$html$Html$li,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid orange'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '5%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '0.2em'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						_user$project$Messages$OnNewNotifItemClick(item.id)),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2%'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-5%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(item.title),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(item.body),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$NotificationsView$acceptedFullDescNotifItem = function (item) {
	return A2(
		_elm_lang$html$Html$li,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid orange'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '5%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '0.2em'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2%'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-5%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(item.title),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(item.body),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '2px'},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												A3(_user$project$Messages$OnViewFullIdeaData, item.requestedIdeaId, item.id, item.body)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid orange'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Read'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$NotificationsView$newFullDescNotifItem = function (item) {
	return A2(
		_elm_lang$html$Html$li,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid orange'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '5%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '0.2em'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2%'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-5%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(item.title),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(item.body),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '2px'},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												A2(_user$project$Messages$OnAcceptRejectFullDescInitiated, item.id, 0)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.3em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid orange'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Reject'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$button,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(
													A2(_user$project$Messages$OnAcceptRejectFullDescInitiated, item.id, 1)),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.3em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'background', _1: 'orange'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid orange'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Accept'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$NotificationsView$newNotifsListView = function (model) {
	var remainingNotifs = A2(
		_elm_lang$core$List$filter,
		function (n) {
			return (!_elm_lang$core$Native_Utils.eq(n.notificationType, 'COMPLETE_DESC_REQ')) && (!_elm_lang$core$Native_Utils.eq(n.notificationType, 'DESC_REQ_ACCEPTED'));
		},
		model.notifications);
	var newNotifsItems = A2(_elm_lang$core$List$map, _user$project$NotificationsView$newNotifItem, remainingNotifs);
	var acceptedFullDescNotifs = A2(
		_elm_lang$core$List$filter,
		function (n) {
			return _elm_lang$core$Native_Utils.eq(n.notificationType, 'DESC_REQ_ACCEPTED');
		},
		model.notifications);
	var acceptedFullDescNotifsList = A2(_elm_lang$core$List$map, _user$project$NotificationsView$acceptedFullDescNotifItem, acceptedFullDescNotifs);
	var fullDescReqNotifs = A2(
		_elm_lang$core$List$filter,
		function (n) {
			return _elm_lang$core$Native_Utils.eq(n.notificationType, 'COMPLETE_DESC_REQ');
		},
		model.notifications);
	var fullDescNotifs = A2(_elm_lang$core$List$map, _user$project$NotificationsView$newFullDescNotifItem, fullDescReqNotifs);
	var completeItems = A2(
		_elm_lang$core$Basics_ops['++'],
		fullDescNotifs,
		A2(_elm_lang$core$Basics_ops['++'], acceptedFullDescNotifsList, newNotifsItems));
	var newNotifsVisible = model.newNotificationsVisible ? {ctor: '_Tuple2', _0: 'display', _1: 'initial'} : {ctor: '_Tuple2', _0: 'display', _1: 'none'};
	return A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('newNotifsListStyle'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: newNotifsVisible,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		},
		completeItems);
};

var _user$project$IdeaPageView$industriesListItem = function (industry) {
	return A2(
		_elm_lang$html$Html$option,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$value(industry),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(industry),
			_1: {ctor: '[]'}
		});
};
var _user$project$IdeaPageView$industriesList = A2(_elm_lang$core$List$map, _user$project$IdeaPageView$industriesListItem, _user$project$IndustriesList$industries);
var _user$project$IdeaPageView$newIdeaPageMobileView = function (model) {
	var newIdeaData = model.newIdeaData;
	var videoInfo = _elm_lang$core$String$isEmpty(newIdeaData.videoName) ? A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'}) : A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'green'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(_elm_lang$core$Basics_ops['++'], 'Video: ', newIdeaData.videoName)),
			_1: {ctor: '[]'}
		});
	var picturesInfo = _elm_lang$core$String$isEmpty(newIdeaData.pictureNames) ? A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'}) : A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'green'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(_elm_lang$core$Basics_ops['++'], 'Pictures: ', newIdeaData.pictureNames)),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'padding', _1: '3% 5%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$label,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$for('project-name'),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Idea/Project Name'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('*'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$value(newIdeaData.ideaName),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaNameInput),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '10%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$id('project-name'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$br,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$br,
												{ctor: '[]'},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$label,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$for('industries'),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Industry'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('*'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$select,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$value(newIdeaData.industry),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaIndustryInput),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '10%'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$id('industries'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															},
															_user$project$IdeaPageView$industriesList),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$br,
																{ctor: '[]'},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$br,
																	{ctor: '[]'},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$label,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$for('project-tags'),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Tags'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$br,
																			{ctor: '[]'},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$input,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$value(newIdeaData.tags),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaTagsInput),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '10%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								}),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$id('project-tags'),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				},
																				{ctor: '[]'}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$br,
																					{ctor: '[]'},
																					{ctor: '[]'}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$br,
																						{ctor: '[]'},
																						{ctor: '[]'}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$label,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																											_1: {ctor: '[]'}
																										}
																									}),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$for('short-description'),
																									_1: {ctor: '[]'}
																								}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('Short Description '),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$span,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1px'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}),
																									_1: {ctor: '[]'}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('(seen by everyone)'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$span,
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																													_1: {ctor: '[]'}
																												}
																											}),
																										_1: {ctor: '[]'}
																									},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('*'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$br,
																										{ctor: '[]'},
																										{ctor: '[]'}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$textarea,
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$value(newIdeaData.shortDescription),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaShortDescriptionInput),
																													_1: {
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$style(
																															{
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '1.5em'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'resize', _1: 'none'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '10%'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																																						_1: {ctor: '[]'}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}),
																														_1: {
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$id('short-description'),
																															_1: {
																																ctor: '::',
																																_0: _elm_lang$html$Html_Attributes$rows(3),
																																_1: {
																																	ctor: '::',
																																	_0: _elm_lang$html$Html_Attributes$placeholder('Describe your idea/project in 3-4 sentences'),
																																	_1: {ctor: '[]'}
																																}
																															}
																														}
																													}
																												}
																											},
																											{ctor: '[]'}),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$br,
																												{ctor: '[]'},
																												{ctor: '[]'}),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													_elm_lang$html$Html$label,
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$style(
																															{
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																	_1: {ctor: '[]'}
																																}
																															}),
																														_1: {
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$for('long-description'),
																															_1: {ctor: '[]'}
																														}
																													},
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html$text('Long Description'),
																														_1: {ctor: '[]'}
																													}),
																												_1: {
																													ctor: '::',
																													_0: A2(
																														_elm_lang$html$Html$span,
																														{
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$style(
																																{
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1px'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																				_1: {ctor: '[]'}
																																			}
																																		}
																																	}
																																}),
																															_1: {ctor: '[]'}
																														},
																														{
																															ctor: '::',
																															_0: _elm_lang$html$Html$text('(seen after your approval)'),
																															_1: {ctor: '[]'}
																														}),
																													_1: {
																														ctor: '::',
																														_0: A2(
																															_elm_lang$html$Html$span,
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html_Attributes$style(
																																	{
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																																			_1: {ctor: '[]'}
																																		}
																																	}),
																																_1: {ctor: '[]'}
																															},
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html$text('*'),
																																_1: {ctor: '[]'}
																															}),
																														_1: {
																															ctor: '::',
																															_0: A2(
																																_elm_lang$html$Html$br,
																																{ctor: '[]'},
																																{ctor: '[]'}),
																															_1: {
																																ctor: '::',
																																_0: A2(
																																	_elm_lang$html$Html$textarea,
																																	{
																																		ctor: '::',
																																		_0: _elm_lang$html$Html_Attributes$value(newIdeaData.longDescription),
																																		_1: {
																																			ctor: '::',
																																			_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaLongDescriptionInput),
																																			_1: {
																																				ctor: '::',
																																				_0: _elm_lang$html$Html_Attributes$style(
																																					{
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '1.5em'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'resize', _1: 'none'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '2%'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																																												_1: {ctor: '[]'}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}),
																																				_1: {
																																					ctor: '::',
																																					_0: _elm_lang$html$Html_Attributes$id('long-description'),
																																					_1: {
																																						ctor: '::',
																																						_0: _elm_lang$html$Html_Attributes$rows(15),
																																						_1: {
																																							ctor: '::',
																																							_0: _elm_lang$html$Html_Attributes$placeholder('Write detailed information of your idea/project'),
																																							_1: {ctor: '[]'}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	},
																																	{ctor: '[]'}),
																																_1: {
																																	ctor: '::',
																																	_0: A2(
																																		_elm_lang$html$Html$br,
																																		{ctor: '[]'},
																																		{ctor: '[]'}),
																																	_1: {
																																		ctor: '::',
																																		_0: A2(
																																			_elm_lang$html$Html$div,
																																			{ctor: '[]'},
																																			{
																																				ctor: '::',
																																				_0: A2(
																																					_elm_lang$html$Html$a,
																																					{
																																						ctor: '::',
																																						_0: _elm_lang$html$Html_Attributes$style(
																																							{
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
																																									_1: {ctor: '[]'}
																																								}
																																							}),
																																						_1: {ctor: '[]'}
																																					},
																																					{
																																						ctor: '::',
																																						_0: A2(
																																							_elm_lang$html$Html$label,
																																							{
																																								ctor: '::',
																																								_0: _elm_lang$html$Html_Attributes$class('btn'),
																																								_1: {
																																									ctor: '::',
																																									_0: _elm_lang$html$Html_Attributes$for('pictures'),
																																									_1: {
																																										ctor: '::',
																																										_0: _elm_lang$html$Html_Attributes$style(
																																											{
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'padding', _1: '0 0.8em'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																																																_1: {ctor: '[]'}
																																															}
																																														}
																																													}
																																												}
																																											}),
																																										_1: {ctor: '[]'}
																																									}
																																								}
																																							},
																																							{
																																								ctor: '::',
																																								_0: _elm_lang$html$Html$text('Attach pictures'),
																																								_1: {ctor: '[]'}
																																							}),
																																						_1: {
																																							ctor: '::',
																																							_0: A2(
																																								_elm_lang$html$Html$input,
																																								{
																																									ctor: '::',
																																									_0: _elm_lang$html$Html_Attributes$id('pictures'),
																																									_1: {
																																										ctor: '::',
																																										_0: _elm_lang$html$Html_Attributes$style(
																																											{
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
																																												_1: {ctor: '[]'}
																																											}),
																																										_1: {
																																											ctor: '::',
																																											_0: _elm_lang$html$Html_Attributes$type_('file'),
																																											_1: {
																																												ctor: '::',
																																												_0: _elm_lang$html$Html_Attributes$accept('image/*'),
																																												_1: {ctor: '[]'}
																																											}
																																										}
																																									}
																																								},
																																								{ctor: '[]'}),
																																							_1: {ctor: '[]'}
																																						}
																																					}),
																																				_1: {
																																					ctor: '::',
																																					_0: A2(
																																						_elm_lang$html$Html$a,
																																						{
																																							ctor: '::',
																																							_0: _elm_lang$html$Html_Attributes$style(
																																								{
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.5em'},
																																										_1: {ctor: '[]'}
																																									}
																																								}),
																																							_1: {ctor: '[]'}
																																						},
																																						{
																																							ctor: '::',
																																							_0: A2(
																																								_elm_lang$html$Html$label,
																																								{
																																									ctor: '::',
																																									_0: _elm_lang$html$Html_Attributes$class('btn'),
																																									_1: {
																																										ctor: '::',
																																										_0: _elm_lang$html$Html_Attributes$for('video'),
																																										_1: {
																																											ctor: '::',
																																											_0: _elm_lang$html$Html_Attributes$style(
																																												{
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'padding', _1: '0 0.8em'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																																																	_1: {ctor: '[]'}
																																																}
																																															}
																																														}
																																													}
																																												}),
																																											_1: {ctor: '[]'}
																																										}
																																									}
																																								},
																																								{
																																									ctor: '::',
																																									_0: _elm_lang$html$Html$text('Attach video'),
																																									_1: {ctor: '[]'}
																																								}),
																																							_1: {
																																								ctor: '::',
																																								_0: A2(
																																									_elm_lang$html$Html$input,
																																									{
																																										ctor: '::',
																																										_0: _elm_lang$html$Html_Attributes$id('video'),
																																										_1: {
																																											ctor: '::',
																																											_0: _elm_lang$html$Html_Attributes$style(
																																												{
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
																																													_1: {ctor: '[]'}
																																												}),
																																											_1: {
																																												ctor: '::',
																																												_0: _elm_lang$html$Html_Attributes$type_('file'),
																																												_1: {
																																													ctor: '::',
																																													_0: _elm_lang$html$Html_Attributes$accept('video/*'),
																																													_1: {ctor: '[]'}
																																												}
																																											}
																																										}
																																									},
																																									{ctor: '[]'}),
																																								_1: {ctor: '[]'}
																																							}
																																						}),
																																					_1: {ctor: '[]'}
																																				}
																																			}),
																																		_1: {
																																			ctor: '::',
																																			_0: A2(
																																				_elm_lang$html$Html$label,
																																				{
																																					ctor: '::',
																																					_0: _elm_lang$html$Html_Attributes$style(
																																						{
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1.5em'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																									_1: {ctor: '[]'}
																																								}
																																							}
																																						}),
																																					_1: {
																																						ctor: '::',
																																						_0: _elm_lang$html$Html_Attributes$for('idea-price'),
																																						_1: {ctor: '[]'}
																																					}
																																				},
																																				{
																																					ctor: '::',
																																					_0: _elm_lang$html$Html$text('How much do you value your idea/project?'),
																																					_1: {ctor: '[]'}
																																				}),
																																			_1: {
																																				ctor: '::',
																																				_0: A2(
																																					_elm_lang$html$Html$br,
																																					{ctor: '[]'},
																																					{ctor: '[]'}),
																																				_1: {
																																					ctor: '::',
																																					_0: A2(
																																						_elm_lang$html$Html$span,
																																						{
																																							ctor: '::',
																																							_0: _elm_lang$html$Html_Attributes$style(
																																								{
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.5em'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																																												_1: {ctor: '[]'}
																																											}
																																										}
																																									}
																																								}),
																																							_1: {ctor: '[]'}
																																						},
																																						{
																																							ctor: '::',
																																							_0: _elm_lang$html$Html$text('(Please, mention the currency)'),
																																							_1: {ctor: '[]'}
																																						}),
																																					_1: {
																																						ctor: '::',
																																						_0: A2(
																																							_elm_lang$html$Html$input,
																																							{
																																								ctor: '::',
																																								_0: _elm_lang$html$Html_Attributes$value(newIdeaData.ideaPrice),
																																								_1: {
																																									ctor: '::',
																																									_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaPriceInput),
																																									_1: {
																																										ctor: '::',
																																										_0: _elm_lang$html$Html_Attributes$style(
																																											{
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '10%'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																																																_1: {ctor: '[]'}
																																															}
																																														}
																																													}
																																												}
																																											}),
																																										_1: {
																																											ctor: '::',
																																											_0: _elm_lang$html$Html_Attributes$id('idea-price'),
																																											_1: {ctor: '[]'}
																																										}
																																									}
																																								}
																																							},
																																							{ctor: '[]'}),
																																						_1: {
																																							ctor: '::',
																																							_0: A2(
																																								_elm_lang$html$Html$br,
																																								{ctor: '[]'},
																																								{ctor: '[]'}),
																																							_1: {
																																								ctor: '::',
																																								_0: A2(
																																									_elm_lang$html$Html$br,
																																									{ctor: '[]'},
																																									{ctor: '[]'}),
																																								_1: {
																																									ctor: '::',
																																									_0: A2(
																																										_elm_lang$html$Html$p,
																																										{
																																											ctor: '::',
																																											_0: _elm_lang$html$Html_Attributes$style(
																																												{
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																																														_1: {ctor: '[]'}
																																													}
																																												}),
																																											_1: {ctor: '[]'}
																																										},
																																										{
																																											ctor: '::',
																																											_0: _elm_lang$html$Html$text(newIdeaData.error),
																																											_1: {ctor: '[]'}
																																										}),
																																									_1: {
																																										ctor: '::',
																																										_0: videoInfo,
																																										_1: {
																																											ctor: '::',
																																											_0: picturesInfo,
																																											_1: {
																																												ctor: '::',
																																												_0: A2(
																																													_elm_lang$html$Html$button,
																																													{
																																														ctor: '::',
																																														_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnNewIdeaSubmit),
																																														_1: {
																																															ctor: '::',
																																															_0: _elm_lang$html$Html_Attributes$style(
																																																{
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'width', _1: '40%'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '3em'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																																																						_1: {ctor: '[]'}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}),
																																															_1: {ctor: '[]'}
																																														}
																																													},
																																													{
																																														ctor: '::',
																																														_0: _elm_lang$html$Html$text('Post an Idea'),
																																														_1: {ctor: '[]'}
																																													}),
																																												_1: {ctor: '[]'}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$IdeaPageView$newIdeaPageTabView = function (model) {
	var newIdeaData = model.newIdeaData;
	var videoInfo = _elm_lang$core$String$isEmpty(newIdeaData.videoName) ? A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'}) : A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'green'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(_elm_lang$core$Basics_ops['++'], 'Video: ', newIdeaData.videoName)),
			_1: {ctor: '[]'}
		});
	var picturesInfo = _elm_lang$core$String$isEmpty(newIdeaData.pictureNames) ? A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'}) : A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'green'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(_elm_lang$core$Basics_ops['++'], 'Pictures: ', newIdeaData.pictureNames)),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'padding', _1: '3% 10%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '60%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '20%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$label,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$for('project-name'),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Idea/Project Name'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('*'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$value(newIdeaData.ideaName),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaNameInput),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '10%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$id('project-name'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$br,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$br,
												{ctor: '[]'},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$label,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$for('industries'),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Industry'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('*'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$select,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$value(newIdeaData.industry),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaIndustryInput),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '10%'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$id('industries'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															},
															_user$project$IdeaPageView$industriesList),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$br,
																{ctor: '[]'},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$br,
																	{ctor: '[]'},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$label,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$for('project-tags'),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Tags'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$br,
																			{ctor: '[]'},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$input,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$value(newIdeaData.tags),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaTagsInput),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '10%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								}),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$id('project-tags'),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				},
																				{ctor: '[]'}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$br,
																					{ctor: '[]'},
																					{ctor: '[]'}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$br,
																						{ctor: '[]'},
																						{ctor: '[]'}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$label,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																											_1: {ctor: '[]'}
																										}
																									}),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$for('short-description'),
																									_1: {ctor: '[]'}
																								}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('Short Description '),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$span,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1px'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}),
																									_1: {ctor: '[]'}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('(seen by everyone)'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$span,
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																													_1: {ctor: '[]'}
																												}
																											}),
																										_1: {ctor: '[]'}
																									},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('*'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$br,
																										{ctor: '[]'},
																										{ctor: '[]'}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$textarea,
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$value(newIdeaData.shortDescription),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaShortDescriptionInput),
																													_1: {
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$style(
																															{
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '1.5em'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'resize', _1: 'none'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '10%'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																																						_1: {ctor: '[]'}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}),
																														_1: {
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$id('short-description'),
																															_1: {
																																ctor: '::',
																																_0: _elm_lang$html$Html_Attributes$rows(3),
																																_1: {
																																	ctor: '::',
																																	_0: _elm_lang$html$Html_Attributes$placeholder('Describe your idea/project in 3-4 sentences'),
																																	_1: {ctor: '[]'}
																																}
																															}
																														}
																													}
																												}
																											},
																											{ctor: '[]'}),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$br,
																												{ctor: '[]'},
																												{ctor: '[]'}),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													_elm_lang$html$Html$label,
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$style(
																															{
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																	_1: {ctor: '[]'}
																																}
																															}),
																														_1: {
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$for('long-description'),
																															_1: {ctor: '[]'}
																														}
																													},
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html$text('Long Description'),
																														_1: {ctor: '[]'}
																													}),
																												_1: {
																													ctor: '::',
																													_0: A2(
																														_elm_lang$html$Html$span,
																														{
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$style(
																																{
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1px'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																				_1: {ctor: '[]'}
																																			}
																																		}
																																	}
																																}),
																															_1: {ctor: '[]'}
																														},
																														{
																															ctor: '::',
																															_0: _elm_lang$html$Html$text('(seen after your approval)'),
																															_1: {ctor: '[]'}
																														}),
																													_1: {
																														ctor: '::',
																														_0: A2(
																															_elm_lang$html$Html$span,
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html_Attributes$style(
																																	{
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																																			_1: {ctor: '[]'}
																																		}
																																	}),
																																_1: {ctor: '[]'}
																															},
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html$text('*'),
																																_1: {ctor: '[]'}
																															}),
																														_1: {
																															ctor: '::',
																															_0: A2(
																																_elm_lang$html$Html$br,
																																{ctor: '[]'},
																																{ctor: '[]'}),
																															_1: {
																																ctor: '::',
																																_0: A2(
																																	_elm_lang$html$Html$textarea,
																																	{
																																		ctor: '::',
																																		_0: _elm_lang$html$Html_Attributes$value(newIdeaData.longDescription),
																																		_1: {
																																			ctor: '::',
																																			_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaLongDescriptionInput),
																																			_1: {
																																				ctor: '::',
																																				_0: _elm_lang$html$Html_Attributes$style(
																																					{
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '1.5em'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'resize', _1: 'none'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '2%'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																																												_1: {ctor: '[]'}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}),
																																				_1: {
																																					ctor: '::',
																																					_0: _elm_lang$html$Html_Attributes$id('long-description'),
																																					_1: {
																																						ctor: '::',
																																						_0: _elm_lang$html$Html_Attributes$rows(15),
																																						_1: {
																																							ctor: '::',
																																							_0: _elm_lang$html$Html_Attributes$placeholder('Write detailed information of your idea/project'),
																																							_1: {ctor: '[]'}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	},
																																	{ctor: '[]'}),
																																_1: {
																																	ctor: '::',
																																	_0: A2(
																																		_elm_lang$html$Html$br,
																																		{ctor: '[]'},
																																		{ctor: '[]'}),
																																	_1: {
																																		ctor: '::',
																																		_0: A2(
																																			_elm_lang$html$Html$div,
																																			{ctor: '[]'},
																																			{
																																				ctor: '::',
																																				_0: A2(
																																					_elm_lang$html$Html$a,
																																					{
																																						ctor: '::',
																																						_0: _elm_lang$html$Html_Attributes$style(
																																							{
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
																																									_1: {ctor: '[]'}
																																								}
																																							}),
																																						_1: {ctor: '[]'}
																																					},
																																					{
																																						ctor: '::',
																																						_0: A2(
																																							_elm_lang$html$Html$label,
																																							{
																																								ctor: '::',
																																								_0: _elm_lang$html$Html_Attributes$class('btn'),
																																								_1: {
																																									ctor: '::',
																																									_0: _elm_lang$html$Html_Attributes$for('pictures'),
																																									_1: {
																																										ctor: '::',
																																										_0: _elm_lang$html$Html_Attributes$style(
																																											{
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'padding', _1: '0 0.8em'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																																																_1: {ctor: '[]'}
																																															}
																																														}
																																													}
																																												}
																																											}),
																																										_1: {ctor: '[]'}
																																									}
																																								}
																																							},
																																							{
																																								ctor: '::',
																																								_0: _elm_lang$html$Html$text('Attach pictures'),
																																								_1: {ctor: '[]'}
																																							}),
																																						_1: {
																																							ctor: '::',
																																							_0: A2(
																																								_elm_lang$html$Html$input,
																																								{
																																									ctor: '::',
																																									_0: _elm_lang$html$Html_Attributes$id('pictures'),
																																									_1: {
																																										ctor: '::',
																																										_0: _elm_lang$html$Html_Attributes$style(
																																											{
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
																																												_1: {ctor: '[]'}
																																											}),
																																										_1: {
																																											ctor: '::',
																																											_0: _elm_lang$html$Html_Attributes$type_('file'),
																																											_1: {
																																												ctor: '::',
																																												_0: _elm_lang$html$Html_Attributes$accept('image/*'),
																																												_1: {ctor: '[]'}
																																											}
																																										}
																																									}
																																								},
																																								{ctor: '[]'}),
																																							_1: {ctor: '[]'}
																																						}
																																					}),
																																				_1: {
																																					ctor: '::',
																																					_0: A2(
																																						_elm_lang$html$Html$a,
																																						{
																																							ctor: '::',
																																							_0: _elm_lang$html$Html_Attributes$style(
																																								{
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.5em'},
																																										_1: {ctor: '[]'}
																																									}
																																								}),
																																							_1: {ctor: '[]'}
																																						},
																																						{
																																							ctor: '::',
																																							_0: A2(
																																								_elm_lang$html$Html$label,
																																								{
																																									ctor: '::',
																																									_0: _elm_lang$html$Html_Attributes$class('btn'),
																																									_1: {
																																										ctor: '::',
																																										_0: _elm_lang$html$Html_Attributes$for('video'),
																																										_1: {
																																											ctor: '::',
																																											_0: _elm_lang$html$Html_Attributes$style(
																																												{
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'padding', _1: '0 0.8em'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																																																	_1: {ctor: '[]'}
																																																}
																																															}
																																														}
																																													}
																																												}),
																																											_1: {ctor: '[]'}
																																										}
																																									}
																																								},
																																								{
																																									ctor: '::',
																																									_0: _elm_lang$html$Html$text('Attach video'),
																																									_1: {ctor: '[]'}
																																								}),
																																							_1: {
																																								ctor: '::',
																																								_0: A2(
																																									_elm_lang$html$Html$input,
																																									{
																																										ctor: '::',
																																										_0: _elm_lang$html$Html_Attributes$id('video'),
																																										_1: {
																																											ctor: '::',
																																											_0: _elm_lang$html$Html_Attributes$style(
																																												{
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
																																													_1: {ctor: '[]'}
																																												}),
																																											_1: {
																																												ctor: '::',
																																												_0: _elm_lang$html$Html_Attributes$type_('file'),
																																												_1: {
																																													ctor: '::',
																																													_0: _elm_lang$html$Html_Attributes$accept('video/*'),
																																													_1: {ctor: '[]'}
																																												}
																																											}
																																										}
																																									},
																																									{ctor: '[]'}),
																																								_1: {ctor: '[]'}
																																							}
																																						}),
																																					_1: {ctor: '[]'}
																																				}
																																			}),
																																		_1: {
																																			ctor: '::',
																																			_0: A2(
																																				_elm_lang$html$Html$label,
																																				{
																																					ctor: '::',
																																					_0: _elm_lang$html$Html_Attributes$style(
																																						{
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1.5em'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																									_1: {ctor: '[]'}
																																								}
																																							}
																																						}),
																																					_1: {
																																						ctor: '::',
																																						_0: _elm_lang$html$Html_Attributes$for('idea-price'),
																																						_1: {ctor: '[]'}
																																					}
																																				},
																																				{
																																					ctor: '::',
																																					_0: _elm_lang$html$Html$text('How much do you value your idea/project?'),
																																					_1: {ctor: '[]'}
																																				}),
																																			_1: {
																																				ctor: '::',
																																				_0: A2(
																																					_elm_lang$html$Html$br,
																																					{ctor: '[]'},
																																					{ctor: '[]'}),
																																				_1: {
																																					ctor: '::',
																																					_0: A2(
																																						_elm_lang$html$Html$span,
																																						{
																																							ctor: '::',
																																							_0: _elm_lang$html$Html_Attributes$style(
																																								{
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.5em'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																																												_1: {ctor: '[]'}
																																											}
																																										}
																																									}
																																								}),
																																							_1: {ctor: '[]'}
																																						},
																																						{
																																							ctor: '::',
																																							_0: _elm_lang$html$Html$text('(Please, mention the currency)'),
																																							_1: {ctor: '[]'}
																																						}),
																																					_1: {
																																						ctor: '::',
																																						_0: A2(
																																							_elm_lang$html$Html$input,
																																							{
																																								ctor: '::',
																																								_0: _elm_lang$html$Html_Attributes$value(newIdeaData.ideaPrice),
																																								_1: {
																																									ctor: '::',
																																									_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaPriceInput),
																																									_1: {
																																										ctor: '::',
																																										_0: _elm_lang$html$Html_Attributes$style(
																																											{
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '10%'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																																																_1: {ctor: '[]'}
																																															}
																																														}
																																													}
																																												}
																																											}),
																																										_1: {
																																											ctor: '::',
																																											_0: _elm_lang$html$Html_Attributes$id('idea-price'),
																																											_1: {ctor: '[]'}
																																										}
																																									}
																																								}
																																							},
																																							{ctor: '[]'}),
																																						_1: {
																																							ctor: '::',
																																							_0: A2(
																																								_elm_lang$html$Html$br,
																																								{ctor: '[]'},
																																								{ctor: '[]'}),
																																							_1: {
																																								ctor: '::',
																																								_0: A2(
																																									_elm_lang$html$Html$br,
																																									{ctor: '[]'},
																																									{ctor: '[]'}),
																																								_1: {
																																									ctor: '::',
																																									_0: A2(
																																										_elm_lang$html$Html$p,
																																										{
																																											ctor: '::',
																																											_0: _elm_lang$html$Html_Attributes$style(
																																												{
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																																														_1: {ctor: '[]'}
																																													}
																																												}),
																																											_1: {ctor: '[]'}
																																										},
																																										{
																																											ctor: '::',
																																											_0: _elm_lang$html$Html$text(newIdeaData.error),
																																											_1: {ctor: '[]'}
																																										}),
																																									_1: {
																																										ctor: '::',
																																										_0: videoInfo,
																																										_1: {
																																											ctor: '::',
																																											_0: picturesInfo,
																																											_1: {
																																												ctor: '::',
																																												_0: A2(
																																													_elm_lang$html$Html$button,
																																													{
																																														ctor: '::',
																																														_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnNewIdeaSubmit),
																																														_1: {
																																															ctor: '::',
																																															_0: _elm_lang$html$Html_Attributes$style(
																																																{
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'width', _1: '40%'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '3em'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																																																						_1: {ctor: '[]'}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}),
																																															_1: {ctor: '[]'}
																																														}
																																													},
																																													{
																																														ctor: '::',
																																														_0: _elm_lang$html$Html$text('Post an Idea'),
																																														_1: {ctor: '[]'}
																																													}),
																																												_1: {ctor: '[]'}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$IdeaPageView$newIdeaPageView = function (model) {
	var newIdeaData = model.newIdeaData;
	var videoInfo = _elm_lang$core$String$isEmpty(newIdeaData.videoName) ? A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'}) : A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'green'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(_elm_lang$core$Basics_ops['++'], 'Video: ', newIdeaData.videoName)),
			_1: {ctor: '[]'}
		});
	var picturesInfo = _elm_lang$core$String$isEmpty(newIdeaData.pictureNames) ? A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'}) : A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'green'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(_elm_lang$core$Basics_ops['++'], 'Pictures: ', newIdeaData.pictureNames)),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-width-3-5 uk-flex uk-flex-column'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-width-1-2'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-5%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '3%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$label,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$for('project-name'),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Idea/Project Name'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('*'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$input,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$value(newIdeaData.ideaName),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaNameInput),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'width', _1: '110%'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '10%'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$id('project-name'),
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$br,
														{ctor: '[]'},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$br,
															{ctor: '[]'},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$br,
																{ctor: '[]'},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$label,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$for('industries'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Industry'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$span,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('*'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$select,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$value(newIdeaData.industry),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaIndustryInput),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'width', _1: '110%'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '10%'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}
																							}),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$id('industries'),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			},
																			_user$project$IdeaPageView$industriesList),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$br,
																				{ctor: '[]'},
																				{ctor: '[]'}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$br,
																					{ctor: '[]'},
																					{ctor: '[]'}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$label,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																										_1: {ctor: '[]'}
																									}
																								}),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$for('project-tags'),
																								_1: {ctor: '[]'}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Tags'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$br,
																							{ctor: '[]'},
																							{ctor: '[]'}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$input,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$value(newIdeaData.tags),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaTagsInput),
																										_1: {
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$style(
																												{
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'width', _1: '110%'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '10%'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																																	_1: {ctor: '[]'}
																																}
																															}
																														}
																													}
																												}),
																											_1: {
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$id('project-tags'),
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								},
																								{ctor: '[]'}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$br,
																									{ctor: '[]'},
																									{ctor: '[]'}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$br,
																										{ctor: '[]'},
																										{ctor: '[]'}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$label,
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$style(
																													{
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																															_1: {ctor: '[]'}
																														}
																													}),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$for('short-description'),
																													_1: {ctor: '[]'}
																												}
																											},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text('Short Description '),
																												_1: {ctor: '[]'}
																											}),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$span,
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$style(
																														{
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1px'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																		_1: {ctor: '[]'}
																																	}
																																}
																															}
																														}),
																													_1: {ctor: '[]'}
																												},
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html$text('(seen by everyone)'),
																													_1: {ctor: '[]'}
																												}),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													_elm_lang$html$Html$span,
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$style(
																															{
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																																	_1: {ctor: '[]'}
																																}
																															}),
																														_1: {ctor: '[]'}
																													},
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html$text('*'),
																														_1: {ctor: '[]'}
																													}),
																												_1: {
																													ctor: '::',
																													_0: A2(
																														_elm_lang$html$Html$br,
																														{ctor: '[]'},
																														{ctor: '[]'}),
																													_1: {
																														ctor: '::',
																														_0: A2(
																															_elm_lang$html$Html$textarea,
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html_Attributes$value(newIdeaData.shortDescription),
																																_1: {
																																	ctor: '::',
																																	_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaShortDescriptionInput),
																																	_1: {
																																		ctor: '::',
																																		_0: _elm_lang$html$Html_Attributes$style(
																																			{
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'width', _1: '110%'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'resize', _1: 'none'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '10%'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																																									_1: {ctor: '[]'}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}),
																																		_1: {
																																			ctor: '::',
																																			_0: _elm_lang$html$Html_Attributes$id('short-description'),
																																			_1: {
																																				ctor: '::',
																																				_0: _elm_lang$html$Html_Attributes$rows(3),
																																				_1: {
																																					ctor: '::',
																																					_0: _elm_lang$html$Html_Attributes$placeholder('Describe your idea/project in 3-4 sentences'),
																																					_1: {ctor: '[]'}
																																				}
																																			}
																																		}
																																	}
																																}
																															},
																															{ctor: '[]'}),
																														_1: {
																															ctor: '::',
																															_0: A2(
																																_elm_lang$html$Html$br,
																																{ctor: '[]'},
																																{ctor: '[]'}),
																															_1: {
																																ctor: '::',
																																_0: A2(
																																	_elm_lang$html$Html$label,
																																	{
																																		ctor: '::',
																																		_0: _elm_lang$html$Html_Attributes$style(
																																			{
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1.5em'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																						_1: {ctor: '[]'}
																																					}
																																				}
																																			}),
																																		_1: {
																																			ctor: '::',
																																			_0: _elm_lang$html$Html_Attributes$for('idea-price'),
																																			_1: {ctor: '[]'}
																																		}
																																	},
																																	{
																																		ctor: '::',
																																		_0: _elm_lang$html$Html$text('How much do you value your idea/project?'),
																																		_1: {ctor: '[]'}
																																	}),
																																_1: {
																																	ctor: '::',
																																	_0: A2(
																																		_elm_lang$html$Html$br,
																																		{ctor: '[]'},
																																		{ctor: '[]'}),
																																	_1: {
																																		ctor: '::',
																																		_0: A2(
																																			_elm_lang$html$Html$span,
																																			{
																																				ctor: '::',
																																				_0: _elm_lang$html$Html_Attributes$style(
																																					{
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.5em'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																																									_1: {ctor: '[]'}
																																								}
																																							}
																																						}
																																					}),
																																				_1: {ctor: '[]'}
																																			},
																																			{
																																				ctor: '::',
																																				_0: _elm_lang$html$Html$text('(Please, mention the currency)'),
																																				_1: {ctor: '[]'}
																																			}),
																																		_1: {
																																			ctor: '::',
																																			_0: A2(
																																				_elm_lang$html$Html$input,
																																				{
																																					ctor: '::',
																																					_0: _elm_lang$html$Html_Attributes$value(newIdeaData.ideaPrice),
																																					_1: {
																																						ctor: '::',
																																						_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaPriceInput),
																																						_1: {
																																							ctor: '::',
																																							_0: _elm_lang$html$Html_Attributes$style(
																																								{
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'width', _1: '110%'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '10%'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																																													_1: {ctor: '[]'}
																																												}
																																											}
																																										}
																																									}
																																								}),
																																							_1: {
																																								ctor: '::',
																																								_0: _elm_lang$html$Html_Attributes$id('idea-price'),
																																								_1: {ctor: '[]'}
																																							}
																																						}
																																					}
																																				},
																																				{ctor: '[]'}),
																																			_1: {ctor: '[]'}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('uk-width-1-2'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '3%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$label,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$for('long-description'),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Long Description'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1px'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('(seen after your approval)'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('*'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$br,
															{ctor: '[]'},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$textarea,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$value(newIdeaData.longDescription),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnNewIdeaLongDescriptionInput),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'width', _1: '110%'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'resize', _1: 'none'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '2%'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid lightgrey'},
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						}
																					}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$id('long-description'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$rows(15),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$placeholder('Write detailed information of your idea/project'),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$br,
																	{ctor: '[]'},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$div,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '18.5%'},
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$a,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
																								_1: {ctor: '[]'}
																							}
																						}),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$label,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$class('btn'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$for('pictures'),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'padding', _1: '0 0.8em'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																															_1: {ctor: '[]'}
																														}
																													}
																												}
																											}
																										}),
																									_1: {ctor: '[]'}
																								}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Attach pictures'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$input,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$id('pictures'),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$type_('file'),
																										_1: {
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$accept('image/*'),
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							},
																							{ctor: '[]'}),
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$a,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.5em'},
																									_1: {ctor: '[]'}
																								}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$label,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$class('btn'),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$for('video'),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'padding', _1: '0 0.8em'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																																_1: {ctor: '[]'}
																															}
																														}
																													}
																												}
																											}),
																										_1: {ctor: '[]'}
																									}
																								}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('Attach video'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$input,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$id('video'),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
																												_1: {ctor: '[]'}
																											}),
																										_1: {
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$type_('file'),
																											_1: {
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$accept('video/*'),
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								},
																								{ctor: '[]'}),
																							_1: {ctor: '[]'}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(newIdeaData.error),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: videoInfo,
								_1: {
									ctor: '::',
									_0: picturesInfo,
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$button,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnNewIdeaSubmit),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '23%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Post an Idea'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$IdeaPageView$viewIdeaPage = function (model) {
	var selectedIdea = model.viewingCurrentIdea;
	var avatar = _elm_lang$core$String$isEmpty(selectedIdea.innovator_pic) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : selectedIdea.innovator_pic;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-width-3-5 uk-flex uk-flex-column'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-8em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-1em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '27%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src(avatar),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(selectedIdea.innovator_name),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h2,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(selectedIdea.idea_name),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(selectedIdea.short_description),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																A2(_elm_lang$core$Basics_ops['++'], selectedIdea.industry, '  |  ')),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(
																	A2(_elm_lang$core$Basics_ops['++'], selectedIdea.price, '  |  ')),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$span,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'blue'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(selectedIdea.tags),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$br,
													{ctor: '[]'},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$button,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onClick(
																A2(_user$project$Messages$OnFullDescRequestInitiated, selectedIdea.id, selectedIdea.innovator_id)),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '1em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '1em'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Request Full Access'),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$IdeaPageView$viewFullIdeaPageMobile = function (model) {
	var imageWidthStr = '80%';
	var selectedIdea = model.viewingCurrentFullIdea;
	var avatar = _elm_lang$core$String$isEmpty(selectedIdea.innovator_pic) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : selectedIdea.innovator_pic;
	var imagesListInitial = A2(_elm_lang$core$String$split, ':::', selectedIdea.picture_uris);
	var imagesList = A2(
		_elm_lang$core$List$filter,
		function (i) {
			return !_elm_lang$core$String$isEmpty(i);
		},
		imagesListInitial);
	var imagesCount = _elm_lang$core$List$length(imagesList);
	var imagesListView = A2(
		_elm_lang$core$List$map,
		function (i) {
			return A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: imageWidthStr},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin', _1: '0.2em 0'},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src(i),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'});
		},
		imagesList);
	var imagesView = _elm_lang$core$Native_Utils.eq(imagesCount, 0) ? A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'}) : A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
			_1: {ctor: '[]'}
		},
		imagesListView);
	var videoUri = selectedIdea.video_uri;
	var videoView = _elm_lang$core$String$isEmpty(videoUri) ? A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'}) : A2(
		_elm_lang$html$Html$iframe,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin', _1: '0.5em 0'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$src(videoUri),
				_1: {ctor: '[]'}
			}
		},
		{ctor: '[]'});
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-5.5em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-8em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-1em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '27%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src(avatar),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(selectedIdea.innovator_name),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$img,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$h2,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(selectedIdea.idea_name),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(selectedIdea.short_description),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(
																	A2(_elm_lang$core$Basics_ops['++'], selectedIdea.industry, '  |  ')),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$span,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(
																		A2(_elm_lang$core$Basics_ops['++'], selectedIdea.price, '  |  ')),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$span,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'blue'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(selectedIdea.tags),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(selectedIdea.long_description),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: imagesView,
														_1: {
															ctor: '::',
															_0: videoView,
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$br,
																	{ctor: '[]'},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$button,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '1em'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '1em'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Pay For Idea'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$IdeaPageView$viewFullIdeaPage = function (model) {
	var selectedIdea = model.viewingCurrentFullIdea;
	var avatar = _elm_lang$core$String$isEmpty(selectedIdea.innovator_pic) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : selectedIdea.innovator_pic;
	var imagesListInitial = A2(_elm_lang$core$String$split, ':::', selectedIdea.picture_uris);
	var imagesList = A2(
		_elm_lang$core$List$filter,
		function (i) {
			return !_elm_lang$core$String$isEmpty(i);
		},
		imagesListInitial);
	var imagesCount = _elm_lang$core$List$length(imagesList);
	var imageWidth = (95 / imagesCount) | 0;
	var imageWidthStr = A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(imageWidth),
		'%');
	var imagesListView = A2(
		_elm_lang$core$List$map,
		function (i) {
			return A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: imageWidthStr},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: imageWidthStr},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin', _1: '0 0.2em'},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src(i),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'});
		},
		imagesList);
	var imagesView = _elm_lang$core$Native_Utils.eq(imagesCount, 0) ? A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'}) : A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
			_1: {ctor: '[]'}
		},
		imagesListView);
	var videoUri = selectedIdea.video_uri;
	var videoView = _elm_lang$core$String$isEmpty(videoUri) ? A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'}) : A2(
		_elm_lang$html$Html$iframe,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin', _1: '0.5em 0'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$src(videoUri),
				_1: {ctor: '[]'}
			}
		},
		{ctor: '[]'});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveDisplay uk-width-3-5 uk-flex uk-flex-column'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-8em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-1em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '27%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src(avatar),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(selectedIdea.innovator_name),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h2,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(selectedIdea.idea_name),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(selectedIdea.short_description),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																A2(_elm_lang$core$Basics_ops['++'], selectedIdea.industry, '  |  ')),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(
																	A2(_elm_lang$core$Basics_ops['++'], selectedIdea.price, '  |  ')),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$span,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'blue'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(selectedIdea.tags),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(selectedIdea.long_description),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: imagesView,
													_1: {
														ctor: '::',
														_0: videoView,
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$br,
																{ctor: '[]'},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$button,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '1em'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '1em'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Pay For Idea'),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};

var _user$project$SearchedPageView$postCommentsItem = function (item) {
	return A2(
		_elm_lang$html$Html$li,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid orange'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '5%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '0.2em'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-2'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(item.author_name),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(item.input_date),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(item.body),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$SearchedPageView$postCommentsItemMobile = function (item) {
	return A2(
		_elm_lang$html$Html$li,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid orange'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '5%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '0.2em'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(item.author_name),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(item.input_date),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('___________'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(item.body),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$SearchedPageView$ideasListItemMobile = F2(
	function (model, postData) {
		var postWithComments = model.currentPostWithComments;
		var currentCommentData = model.currentCommentData;
		var sendButtonDisabled = _elm_lang$core$String$isEmpty(currentCommentData.body) ? A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', 'disabled') : A2(_elm_lang$html$Html_Attributes$attribute, 'enabled', 'enabled');
		var postId = postData.post_id;
		var commentsView = _elm_lang$core$Native_Utils.eq(postId, postWithComments) ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'padding', _1: '0'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin', _1: '0'},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						A2(_elm_lang$core$List$map, _user$project$SearchedPageView$postCommentsItemMobile, model.currentPostComments)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnCurrentPostCommentInput),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$placeholder('Your comment here...'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: sendButtonDisabled,
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSubmitComment),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.4em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'background', _1: 'blue'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Send'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}) : A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			{ctor: '[]'});
		var postLikes = postData.post_likes;
		var postMessage = postData.post_message;
		var authorDesc = postData.author_desc;
		var authorName = postData.author_name;
		var avatar = _elm_lang$core$String$isEmpty(postData.author_pic) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : postData.author_pic;
		var pic = _elm_lang$core$String$isEmpty(postData.post_media_file) ? A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'}) : A2(
			_elm_lang$html$Html$img,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$src(postData.post_media_file),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'});
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src(avatar),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '75%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(authorName),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(authorDesc),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$img,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '5%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '13%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(postMessage),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: pic,
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.5em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(
															A2(
																_elm_lang$core$Basics_ops['++'],
																_elm_lang$core$Basics$toString(postLikes),
																' likes')),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$img,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$a,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(
																			_user$project$Messages$OnPostLikeClicked(postId)),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20px'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$span,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '7px'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: heart; ratio: 0.7'),
																					_1: {ctor: '[]'}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Like'),
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$a,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Events$onClick(
																				_user$project$Messages$OnPostCommentsClicked(postId)),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20px'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$span,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '7px'},
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: comment; ratio: 0.7'),
																						_1: {ctor: '[]'}
																					}
																				},
																				{ctor: '[]'}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Comment'),
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$a,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Events$onClick(
																					_user$project$Messages$OnSharePostOnFacebook(postMessage)),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}),
																					_1: {ctor: '[]'}
																				}
																			},
																			{
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$span,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '7px'},
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: social; ratio: 0.7'),
																							_1: {ctor: '[]'}
																						}
																					},
																					{ctor: '[]'}),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Share'),
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																}
															}),
														_1: {
															ctor: '::',
															_0: commentsView,
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$SearchedPageView$ideasListItem = F2(
	function (model, postData) {
		var postWithComments = model.currentPostWithComments;
		var currentCommentData = model.currentCommentData;
		var sendButtonDisabled = _elm_lang$core$String$isEmpty(currentCommentData.body) ? A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', 'disabled') : A2(_elm_lang$html$Html_Attributes$attribute, 'enabled', 'enabled');
		var postId = postData.post_id;
		var commentsView = _elm_lang$core$Native_Utils.eq(postId, postWithComments) ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'padding', _1: '0'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin', _1: '0'},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						A2(_elm_lang$core$List$map, _user$project$SearchedPageView$postCommentsItem, model.currentPostComments)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnCurrentPostCommentInput),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$placeholder('Your comment here...'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: sendButtonDisabled,
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSubmitComment),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.4em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'background', _1: 'blue'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Send'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}) : A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			{ctor: '[]'});
		var postLikes = postData.post_likes;
		var postMessage = postData.post_message;
		var authorDesc = postData.author_desc;
		var authorName = postData.author_name;
		var avatar = _elm_lang$core$String$isEmpty(postData.author_pic) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : postData.author_pic;
		var pic = _elm_lang$core$String$isEmpty(postData.post_media_file) ? A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'}) : A2(
			_elm_lang$html$Html$img,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$src(postData.post_media_file),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'});
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src(avatar),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '75%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(authorName),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(authorDesc),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$img,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '5%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '13%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(postMessage),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: pic,
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.5em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(
															A2(
																_elm_lang$core$Basics_ops['++'],
																_elm_lang$core$Basics$toString(postLikes),
																' likes')),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$img,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$a,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(
																			_user$project$Messages$OnPostLikeClicked(postId)),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20px'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$span,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '7px'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: heart; ratio: 0.7'),
																					_1: {ctor: '[]'}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Like'),
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$a,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Events$onClick(
																				_user$project$Messages$OnPostCommentsClicked(postId)),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20px'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$span,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '7px'},
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: comment; ratio: 0.7'),
																						_1: {ctor: '[]'}
																					}
																				},
																				{ctor: '[]'}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Comment'),
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$a,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Events$onClick(
																					_user$project$Messages$OnSharePostOnFacebook(postMessage)),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}),
																					_1: {ctor: '[]'}
																				}
																			},
																			{
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$span,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '7px'},
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: social; ratio: 0.7'),
																							_1: {ctor: '[]'}
																						}
																					},
																					{ctor: '[]'}),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Share'),
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																}
															}),
														_1: {
															ctor: '::',
															_0: commentsView,
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$SearchedPageView$realIdeasListItem = F2(
	function (model, ideaData) {
		var price = ideaData.price;
		var tags = ideaData.tags;
		var industry = ideaData.industry;
		var authorName = ideaData.innovator_name;
		var ideaName = ideaData.idea_name;
		var ideaDesc = ideaData.short_description;
		var avatar = _elm_lang$core$String$isEmpty(ideaData.innovator_pic) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : ideaData.innovator_pic;
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src(avatar),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '75%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(
															_user$project$Messages$OnViewIdeaPageSwitch(ideaData)),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(ideaName),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$img,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '5%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '13%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(ideaDesc),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.5em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(authorName),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$img,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$span,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20px'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(price),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$span,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20px'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(industry),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$span,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'blue'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(tags),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$SearchedPageView$organizationsListItem = F2(
	function (model, organizationData) {
		var organizationId = organizationData.id;
		var username = organizationData.username;
		var industry = organizationData.industry;
		var country = organizationData.country;
		var website = organizationData.webpage;
		var about = organizationData.about_us;
		var authorDesc = organizationData.description;
		var authorName = organizationData.name;
		var avatar = _elm_lang$core$String$isEmpty(organizationData.pic_uri) ? 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png' : organizationData.pic_uri;
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src(avatar),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '75%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(
															_user$project$Messages$OnSeeOtherOrganization(organizationData)),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(authorName),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(authorDesc),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$img,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '5%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '13%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(about),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.5em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(website),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$img,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$span,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20px'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(country),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$span,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20px'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(industry),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$span,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'blue'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(username),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$SearchedPageView$innovatorsListItem = F2(
	function (model, innovatorData) {
		var innovatorId = innovatorData.id;
		var username = innovatorData.username;
		var rating = innovatorData.rating;
		var country = innovatorData.country;
		var ideasCount = innovatorData.ideas_count;
		var about = innovatorData.about_me;
		var authorDesc = innovatorData.description;
		var authorName = innovatorData.name;
		var avatar = _elm_lang$core$String$isEmpty(innovatorData.pic_uri) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : innovatorData.pic_uri;
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src(avatar),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '75%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(
															_user$project$Messages$OnSeeOtherInnovator(innovatorData)),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(authorName),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(authorDesc),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$img,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '5%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '13%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(about),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.5em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														A2(
															_elm_lang$core$Basics_ops['++'],
															'Ideas: ',
															_elm_lang$core$Basics$toString(ideasCount))),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$img,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$span,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20px'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(country),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$span,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20px'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(
																			_elm_lang$core$Basics$toString(rating)),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$span,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'blue'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(username),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$SearchedPageView$searchedPageViewMobile = function (model) {
	var searchedDataAll = model.searchedData;
	var searchedPosts = searchedDataAll.posts;
	var postsWrapped = A2(
		_elm_lang$core$List$map,
		_user$project$SearchedPageView$ideasListItemMobile(model),
		searchedPosts);
	var postsView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(searchedPosts),
		0) > 0) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h4,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Posts'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					postsWrapped),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var searchedIdeas = searchedDataAll.ideas;
	var ideasWrapped = A2(
		_elm_lang$core$List$map,
		_user$project$SearchedPageView$realIdeasListItem(model),
		searchedIdeas);
	var ideasView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(searchedIdeas),
		0) > 0) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h4,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Ideas'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					ideasWrapped),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var searchedInnovators = searchedDataAll.innovators;
	var innovatorsWrapped = A2(
		_elm_lang$core$List$map,
		_user$project$SearchedPageView$innovatorsListItem(model),
		searchedInnovators);
	var innovatorsView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(searchedInnovators),
		0) > 0) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h4,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Innovators'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					innovatorsWrapped),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var searchedOrganizations = searchedDataAll.organizations;
	var organizationsWrapped = A2(
		_elm_lang$core$List$map,
		_user$project$SearchedPageView$organizationsListItem(model),
		searchedOrganizations);
	var organizationsView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(searchedOrganizations),
		0) > 0) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h4,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Organizations'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					organizationsWrapped),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var emptyView = (_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(searchedPosts),
		0) && (_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(searchedIdeas),
		0) && (_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(searchedInnovators),
		0) && _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(searchedOrganizations),
		0)))) ? A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Nothing found!'),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-width-5-5 uk-flex uk-flex-column'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'min-height', _1: '85vh'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: '85vh'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'overflow', _1: 'auto'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h2,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Searched'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: postsView,
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: ideasView,
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$br,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: innovatorsView,
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$br,
													{ctor: '[]'},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: organizationsView,
													_1: {
														ctor: '::',
														_0: emptyView,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$SearchedPageView$searchedPageViewTab = function (model) {
	var searchedDataAll = model.searchedData;
	var searchedPosts = searchedDataAll.posts;
	var postsWrapped = A2(
		_elm_lang$core$List$map,
		_user$project$SearchedPageView$ideasListItem(model),
		searchedPosts);
	var postsView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(searchedPosts),
		0) > 0) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h4,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Posts'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					postsWrapped),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var searchedIdeas = searchedDataAll.ideas;
	var ideasWrapped = A2(
		_elm_lang$core$List$map,
		_user$project$SearchedPageView$realIdeasListItem(model),
		searchedIdeas);
	var ideasView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(searchedIdeas),
		0) > 0) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h4,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Ideas'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					ideasWrapped),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var searchedInnovators = searchedDataAll.innovators;
	var innovatorsWrapped = A2(
		_elm_lang$core$List$map,
		_user$project$SearchedPageView$innovatorsListItem(model),
		searchedInnovators);
	var innovatorsView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(searchedInnovators),
		0) > 0) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h4,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Innovators'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					innovatorsWrapped),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var searchedOrganizations = searchedDataAll.organizations;
	var organizationsWrapped = A2(
		_elm_lang$core$List$map,
		_user$project$SearchedPageView$organizationsListItem(model),
		searchedOrganizations);
	var organizationsView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(searchedOrganizations),
		0) > 0) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h4,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Organizations'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					organizationsWrapped),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var emptyView = (_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(searchedPosts),
		0) && (_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(searchedIdeas),
		0) && (_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(searchedInnovators),
		0) && _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(searchedOrganizations),
		0)))) ? A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Nothing found!'),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-width-5-5 uk-flex uk-flex-column'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'min-height', _1: '85vh'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'height', _1: '85vh'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'overflow', _1: 'auto'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h2,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Searched'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: postsView,
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: ideasView,
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$br,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: innovatorsView,
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$br,
													{ctor: '[]'},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: organizationsView,
													_1: {
														ctor: '::',
														_0: emptyView,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$SearchedPageView$searchedPageView = function (model) {
	var searchedDataAll = model.searchedData;
	var searchedPosts = searchedDataAll.posts;
	var postsWrapped = A2(
		_elm_lang$core$List$map,
		_user$project$SearchedPageView$ideasListItem(model),
		searchedPosts);
	var postsView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(searchedPosts),
		0) > 0) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h4,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Posts'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					postsWrapped),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var searchedIdeas = searchedDataAll.ideas;
	var ideasWrapped = A2(
		_elm_lang$core$List$map,
		_user$project$SearchedPageView$realIdeasListItem(model),
		searchedIdeas);
	var ideasView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(searchedIdeas),
		0) > 0) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h4,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Ideas'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					ideasWrapped),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var searchedInnovators = searchedDataAll.innovators;
	var innovatorsWrapped = A2(
		_elm_lang$core$List$map,
		_user$project$SearchedPageView$innovatorsListItem(model),
		searchedInnovators);
	var innovatorsView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(searchedInnovators),
		0) > 0) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h4,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Innovators'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					innovatorsWrapped),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var searchedOrganizations = searchedDataAll.organizations;
	var organizationsWrapped = A2(
		_elm_lang$core$List$map,
		_user$project$SearchedPageView$organizationsListItem(model),
		searchedOrganizations);
	var organizationsView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(searchedOrganizations),
		0) > 0) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h4,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Organizations'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					organizationsWrapped),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var emptyView = (_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(searchedPosts),
		0) && (_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(searchedIdeas),
		0) && (_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(searchedInnovators),
		0) && _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(searchedOrganizations),
		0)))) ? A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Nothing found!'),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-width-3-5 uk-flex uk-flex-column'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h2,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Searched'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: postsView,
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: ideasView,
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$br,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: innovatorsView,
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$br,
													{ctor: '[]'},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: organizationsView,
													_1: {
														ctor: '::',
														_0: emptyView,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};

var _user$project$NDAsPageView$signedNdasListItemForMobile = function (item) {
	return A2(
		_elm_lang$html$Html$li,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(item.signing_date),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(item.idea_name),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(item.idea_industry),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(item.idea_price),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												_user$project$Messages$OnOpenNDAsIdea(item.idea_id)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('View'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'orange'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('______________'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$NDAsPageView$ndasPageViewMobile = function (model) {
	var ndas = model.signedNDAs;
	var view = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(ndas),
		0) > 0) ? A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin', _1: '0'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding', _1: '0'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, _user$project$NDAsPageView$signedNdasListItemForMobile, ndas)) : A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('No signed NDAs!'),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'min-height', _1: '85vh'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'height', _1: '85vh'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'overflow', _1: 'auto'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Signed NDAs'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: view,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$NDAsPageView$signedNdasListItem = function (item) {
	return A2(
		_elm_lang$html$Html$li,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-5'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(item.signing_date),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(item.idea_name),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(item.idea_industry),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(item.idea_price),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												_user$project$Messages$OnOpenNDAsIdea(item.idea_id)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('View'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'orange'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('______________'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$NDAsPageView$ndasPageViewTab = function (model) {
	var ndas = model.signedNDAs;
	var view = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(ndas),
		0) > 0) ? A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin', _1: '0'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding', _1: '0'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, _user$project$NDAsPageView$signedNdasListItem, ndas)) : A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('No signed NDAs!'),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Signed NDAs'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: view,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$NDAsPageView$ndasPageView = function (model) {
	var ndas = model.signedNDAs;
	var view = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(ndas),
		0) > 0) ? A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin', _1: '0'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding', _1: '0'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, _user$project$NDAsPageView$signedNdasListItem, ndas)) : A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('No signed NDAs!'),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveDisplay uk-width-3-5 uk-flex uk-flex-column'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h5,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Signed NDAs'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: view,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};

var _user$project$DashboardView$ideasListItemMobile = F2(
	function (model, postData) {
		var postWithComments = model.currentPostWithComments;
		var currentCommentData = model.currentCommentData;
		var sendButtonDisabled = _elm_lang$core$String$isEmpty(currentCommentData.body) ? A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', 'disabled') : A2(_elm_lang$html$Html_Attributes$attribute, 'enabled', 'enabled');
		var postId = postData.post_id;
		var commentsView = _elm_lang$core$Native_Utils.eq(postId, postWithComments) ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'padding', _1: '0'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin', _1: '0'},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						A2(_elm_lang$core$List$map, _user$project$SearchedPageView$postCommentsItem, model.currentPostComments)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnCurrentPostCommentInput),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$placeholder('Your comment here...'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: sendButtonDisabled,
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSubmitComment),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.4em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'background', _1: 'blue'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Send'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}) : A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			{ctor: '[]'});
		var postLikes = postData.post_likes;
		var postMessage = postData.post_message;
		var authorDesc = postData.author_desc;
		var authorName = postData.author_name;
		var avatar = _elm_lang$core$String$isEmpty(postData.author_pic) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : postData.author_pic;
		var pic = _elm_lang$core$String$isEmpty(postData.post_media_file) ? A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'}) : A2(
			_elm_lang$html$Html$img,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$src(postData.post_media_file),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'});
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src(avatar),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '75%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(authorName),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(authorDesc),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$img,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '13%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(postMessage),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: pic,
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.5em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(
															A2(
																_elm_lang$core$Basics_ops['++'],
																_elm_lang$core$Basics$toString(postLikes),
																' likes')),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$img,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$a,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(
																			_user$project$Messages$OnPostLikeClicked(postId)),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20px'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$span,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '7px'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: heart; ratio: 0.7'),
																					_1: {ctor: '[]'}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Like'),
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$a,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Events$onClick(
																				_user$project$Messages$OnPostCommentsClicked(postId)),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20px'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$span,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '7px'},
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: comment; ratio: 0.7'),
																						_1: {ctor: '[]'}
																					}
																				},
																				{ctor: '[]'}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Comment'),
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$a,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$span,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '7px'},
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: social; ratio: 0.7'),
																							_1: {ctor: '[]'}
																						}
																					},
																					{ctor: '[]'}),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Share'),
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																}
															}),
														_1: {
															ctor: '::',
															_0: commentsView,
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$DashboardView$middleColumnView = function (model) {
	var posts = model.postList;
	var postsWrapped = A2(
		_elm_lang$core$List$map,
		_user$project$SearchedPageView$ideasListItem(model),
		posts);
	var postsView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(postsWrapped),
		0) > 0) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		postsWrapped) : A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$br,
				{ctor: '[]'},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text('No posts were fetched!'),
				_1: {ctor: '[]'}
			}
		});
	var postData = model.postData;
	var errors = (!_elm_lang$core$String$isEmpty(postData.error)) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$br,
				{ctor: '[]'},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(postData.error),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var report = (!_elm_lang$core$String$isEmpty(postData.mediaFileName)) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$br,
				{ctor: '[]'},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'green'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(postData.mediaFileName),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibility'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$textarea,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$value(postData.message),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnPostMessageInput),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'resize', _1: 'none'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$rows(3),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$placeholder('Lorem ipsum'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1px'},
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'image'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$label,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('btn'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$for('files'),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Photo/Video'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$input,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$id('files'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$type_('file'),
																		_1: {ctor: '[]'}
																	}
																}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$button,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSubmitPost),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.4em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'padding', _1: '0 1em'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Post'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: errors,
												_1: {
													ctor: '::',
													_0: report,
													_1: {ctor: '[]'}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: postsView,
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$DashboardView$leftColumnInnovatorView = function (model) {
	var currentExtendedUser = model.currentInnovatorExtended;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityBlock'),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '60%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3.5em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '40%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: '50%'},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src('https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg'),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.7em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.7em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding', _1: '1em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$h6,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.5em'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Company name'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.1em'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Some company description will go here!'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$img,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$span,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Connections'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$span,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(
																			_elm_lang$core$Basics$toString(currentExtendedUser.connections_count)),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$br,
															{ctor: '[]'},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$span,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Generated Ideas'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$span,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('14'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$br,
																	{ctor: '[]'},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$div,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$span,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						}),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(
																						_elm_lang$core$Basics$toString(currentExtendedUser.rating)),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(_user$project$TopMembersList$ratingStarsView, currentExtendedUser.rating, true),
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};
var _user$project$DashboardView$leftColumnView = function (model) {
	var currentExtendedUser = model.currentOrganizationExtended;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityBlock'),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '60%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3.5em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '40%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: '50%'},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src('https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png'),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.7em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.7em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding', _1: '1em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$h6,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.5em'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Company name'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.1em'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Some company description will go here!'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$href('www.google.com'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$target('_blank'),
																_1: {ctor: '[]'}
															}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('www.example.com'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$img,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$span,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Connections'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$span,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(
																				_elm_lang$core$Basics$toString(currentExtendedUser.connections_count)),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$br,
																{ctor: '[]'},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$div,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$span,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						}
																					}),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Proposals'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$span,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						}),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('14'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$br,
																		{ctor: '[]'},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$div,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																							_1: {ctor: '[]'}
																						}
																					}),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$span,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text(
																							_elm_lang$core$Basics$toString(currentExtendedUser.rating)),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(_user$project$TopMembersList$ratingStarsView, currentExtendedUser.rating, true),
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};
var _user$project$DashboardView$pricingULViewBlack = function (po) {
	var v = function () {
		var _p0 = po;
		if (_p0.ctor === 'Opened') {
			return 'visible';
		} else {
			return 'hidden';
		}
	}();
	return A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'visibility', _1: v},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'listStyleType', _1: 'none'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'right', _1: '40%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'top', _1: '270%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'white'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_user$project$Messages$OnSwitchToHomePage('innovators-pricing')),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'fontSize', _1: '0.9em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href('#innovators-pricing'),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Idea Generators'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('boldDividerStyle'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$li,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										_user$project$Messages$OnSwitchToHomePage('organizations-pricing')),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'fontSize', _1: '0.9em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href('#organizations-pricing'),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Organizations'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$DashboardView$headerNavigationViewBlack = function (po) {
	return A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('headerNavigationStyleBlack responsiveVisibility'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'white'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_user$project$Messages$OnSwitchToHomePage('innovators')),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Idea Generators'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('|'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_user$project$Messages$OnSwitchToHomePage('organizations')),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Organizations'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('|'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$li,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnPricingOpen),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Pricing '),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: triangle-down'),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: _user$project$DashboardView$pricingULViewBlack(po),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('|'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$li,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											_user$project$Messages$OnSwitchToHomePage('about-us')),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('About us'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('|'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$li,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												_user$project$Messages$OnSwitchToHomePage('contacts')),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Contact'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('|'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$li,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(
													_user$project$Messages$OnSwitchToHomePage('faq')),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('FAQ'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('headerNavigationBar'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(''),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};
var _user$project$DashboardView$headerComplexViewMobile = function (model) {
	var unredsNotifs = model.notifications;
	var unredNotifsCount = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(unredsNotifs),
		0) > 0) ? _elm_lang$core$Basics$toString(
		_elm_lang$core$List$length(unredsNotifs)) : '';
	var unredNotifsView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(unredsNotifs),
		0) > 0) ? A2(
		_elm_lang$html$Html$button,
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.5em'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '1em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '40%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(unredNotifsCount),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$button,
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.5em'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '1em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '40%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{ctor: '[]'});
	var unredsList = model.pendingUnredMessages;
	var unredsCount = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(unredsList),
		0) > 0) ? _elm_lang$core$Basics$toString(
		_elm_lang$core$List$length(unredsList)) : '';
	var unredsCountView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(unredsList),
		0) > 0) ? A2(
		_elm_lang$html$Html$button,
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.5em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '1em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '40%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(unredsCount),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$button,
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.5em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '1em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '40%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{ctor: '[]'});
	var currentPage = model.dashboardMobilePage;
	var homeTabIconStyle = _elm_lang$core$Native_Utils.eq(currentPage, _user$project$Models$MobileHomePage) ? {ctor: '_Tuple2', _0: 'color', _1: 'white'} : {ctor: '_Tuple2', _0: 'color', _1: 'black'};
	var homeTabBottomlineStyle = _elm_lang$core$Native_Utils.eq(currentPage, _user$project$Models$MobileHomePage) ? {ctor: '_Tuple2', _0: 'background', _1: 'white'} : {ctor: '_Tuple2', _0: 'background', _1: 'gold'};
	var profileTabIconStyle = _elm_lang$core$Native_Utils.eq(currentPage, _user$project$Models$MobileProfilePage) ? {ctor: '_Tuple2', _0: 'color', _1: 'white'} : {ctor: '_Tuple2', _0: 'color', _1: 'black'};
	var profileTabBottomlineStyle = _elm_lang$core$Native_Utils.eq(currentPage, _user$project$Models$MobileProfilePage) ? {ctor: '_Tuple2', _0: 'background', _1: 'white'} : {ctor: '_Tuple2', _0: 'background', _1: 'gold'};
	var settingsTabIconStyle = _elm_lang$core$Native_Utils.eq(currentPage, _user$project$Models$MobileSettingsPage) ? {ctor: '_Tuple2', _0: 'color', _1: 'white'} : {ctor: '_Tuple2', _0: 'color', _1: 'black'};
	var settingsTabBottomlineStyle = _elm_lang$core$Native_Utils.eq(currentPage, _user$project$Models$MobileSettingsPage) ? {ctor: '_Tuple2', _0: 'background', _1: 'white'} : {ctor: '_Tuple2', _0: 'background', _1: 'gold'};
	var letters = 1;
	var buttonsBack = (_elm_lang$core$Native_Utils.cmp(letters, 0) > 0) ? {ctor: '_Tuple2', _0: 'background', _1: 'white'} : {ctor: '_Tuple2', _0: 'background', _1: 'gold'};
	var buttonsTextColor = (_elm_lang$core$Native_Utils.cmp(letters, 0) > 0) ? {ctor: '_Tuple2', _0: 'color', _1: 'black'} : {ctor: '_Tuple2', _0: 'color', _1: 'gold'};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityMobile'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'left', _1: '0'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'top', _1: '2em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em 0'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '10vw'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-width-3-3 uk-child-width-auto'),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-grid', ''),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-flex-center'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnDashboardMobileHomePageOpen),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '80%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '10%'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: homeTabIconStyle,
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: home; ratio: 0.8'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: homeTabBottomlineStyle,
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'height', _1: '0.3em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-0.5em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.5em'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-flex-center'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.7em'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnDashboardMobileProfilePageOpen),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '80%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '10%'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: profileTabIconStyle,
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: user; ratio: 0.8'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: profileTabBottomlineStyle,
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'height', _1: '0.3em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-0.5em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.5em'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-flex-center'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.4em'},
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnNewNotifsVisibilityToggle),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '40%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '45%'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-1em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {
																ctor: '::',
																_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: bell; ratio: 0.8'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: unredNotifsView,
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-flex-center'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.7em'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnNewMessagesNotifsVisibilityToggle),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '40%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '45%'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-1em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: comments; ratio: 0.8'),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: unredsCountView,
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-flex-center'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-1.7em'},
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$a,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '80%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '10%'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$span,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnToggleMobileSearchInput),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: search; ratio: 0.8'),
																			_1: {ctor: '[]'}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'height', _1: '0.3em'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-0.5em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.5em'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-flex-center'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.7em'},
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$a,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnDashboardMobileSettingsPageOpen),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '80%'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '10%'},
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$span,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: settingsTabIconStyle,
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: cog; ratio: 0.8'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: settingsTabBottomlineStyle,
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'height', _1: '0.3em'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-0.5em'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.5em'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-flex-center'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.7em'},
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$a,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSignOutInitiated),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '80%'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '10%'},
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$span,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: table; ratio: 0.8'),
																				_1: {ctor: '[]'}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$div,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'height', _1: '0.3em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-0.5em'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.5em'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$DashboardView$headerComplexViewTab = function (model) {
	var unredsNotifs = model.notifications;
	var unredNotifsCount = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(unredsNotifs),
		0) > 0) ? _elm_lang$core$Basics$toString(
		_elm_lang$core$List$length(unredsNotifs)) : '';
	var unredNotifsView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(unredsNotifs),
		0) > 0) ? A2(
		_elm_lang$html$Html$button,
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.5em'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '1em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '40%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(unredNotifsCount),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$button,
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.5em'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '1em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '40%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{ctor: '[]'});
	var unredsList = model.pendingUnredMessages;
	var unredsCount = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(unredsList),
		0) > 0) ? _elm_lang$core$Basics$toString(
		_elm_lang$core$List$length(unredsList)) : '';
	var unredsCountView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(unredsList),
		0) > 0) ? A2(
		_elm_lang$html$Html$button,
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.5em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '1em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '40%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(unredsCount),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$button,
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.5em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '1em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '40%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{ctor: '[]'});
	var currentPage = model.dashboardMobilePage;
	var homeTabIconStyle = _elm_lang$core$Native_Utils.eq(currentPage, _user$project$Models$MobileHomePage) ? {ctor: '_Tuple2', _0: 'color', _1: 'white'} : {ctor: '_Tuple2', _0: 'color', _1: 'black'};
	var homeTabBottomlineStyle = _elm_lang$core$Native_Utils.eq(currentPage, _user$project$Models$MobileHomePage) ? {ctor: '_Tuple2', _0: 'background', _1: 'white'} : {ctor: '_Tuple2', _0: 'background', _1: 'gold'};
	var profileTabIconStyle = _elm_lang$core$Native_Utils.eq(currentPage, _user$project$Models$MobileProfilePage) ? {ctor: '_Tuple2', _0: 'color', _1: 'white'} : {ctor: '_Tuple2', _0: 'color', _1: 'black'};
	var profileTabBottomlineStyle = _elm_lang$core$Native_Utils.eq(currentPage, _user$project$Models$MobileProfilePage) ? {ctor: '_Tuple2', _0: 'background', _1: 'white'} : {ctor: '_Tuple2', _0: 'background', _1: 'gold'};
	var settingsTabIconStyle = _elm_lang$core$Native_Utils.eq(currentPage, _user$project$Models$MobileSettingsPage) ? {ctor: '_Tuple2', _0: 'color', _1: 'white'} : {ctor: '_Tuple2', _0: 'color', _1: 'black'};
	var settingsTabBottomlineStyle = _elm_lang$core$Native_Utils.eq(currentPage, _user$project$Models$MobileSettingsPage) ? {ctor: '_Tuple2', _0: 'background', _1: 'white'} : {ctor: '_Tuple2', _0: 'background', _1: 'gold'};
	var letters = 1;
	var buttonsBack = (_elm_lang$core$Native_Utils.cmp(letters, 0) > 0) ? {ctor: '_Tuple2', _0: 'background', _1: 'white'} : {ctor: '_Tuple2', _0: 'background', _1: 'gold'};
	var buttonsTextColor = (_elm_lang$core$Native_Utils.cmp(letters, 0) > 0) ? {ctor: '_Tuple2', _0: 'color', _1: 'black'} : {ctor: '_Tuple2', _0: 'color', _1: 'gold'};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityTab'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'left', _1: '0'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'top', _1: '1em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-width-1-3'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('headerLogoBlack'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('uk-width-2-3 uk-child-width-auto'),
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-grid', ''),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-flex-center'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnDashboardMobileHomePageOpen),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '80%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '10%'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: homeTabIconStyle,
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: home'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: homeTabBottomlineStyle,
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'height', _1: '0.3em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-1em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-1em'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-flex-center'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnDashboardMobileProfilePageOpen),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '80%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '10%'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: profileTabIconStyle,
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: user'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: profileTabBottomlineStyle,
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'height', _1: '0.3em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-1em'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-1em'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-flex-center'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnNewNotifsVisibilityToggle),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '40%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '45%'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-1em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: bell'),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: unredNotifsView,
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-flex-center'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$a,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnNewMessagesNotifsVisibilityToggle),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '40%'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '45%'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$span,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-1em'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: comments'),
																		_1: {ctor: '[]'}
																	}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: unredsCountView,
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-flex-center'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-1em'},
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$a,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '80%'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '10%'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$span,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnToggleMobileSearchInput),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: search'),
																				_1: {ctor: '[]'}
																			}
																		}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'height', _1: '0.3em'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-1em'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-1em'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-flex-center'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$a,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnDashboardMobileSettingsPageOpen),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '80%'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '10%'},
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$span,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: settingsTabIconStyle,
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: cog'),
																				_1: {ctor: '[]'}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$div,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: settingsTabBottomlineStyle,
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'height', _1: '0.3em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-1em'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-1em'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-flex-center'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$a,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSignOutInitiated),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '80%'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '10%'},
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$span,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: table'),
																					_1: {ctor: '[]'}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$div,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'height', _1: '0.3em'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-1em'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-1em'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{ctor: '[]'}),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$DashboardView$unredMessageItem = function (item) {
	var picUri = (!_elm_lang$core$String$isEmpty(item.sender_picture_uri)) ? item.sender_picture_uri : (item.sender_is_organization ? 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png' : 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg');
	var msg = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$String$length(item.body),
		30) > 0) ? A3(_elm_lang$core$String$slice, 0, 30, item.body) : item.body;
	return A2(
		_elm_lang$html$Html$li,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid orange'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '5%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '0.2em'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						_user$project$Messages$OnUnredChatMessageClick(item.id)),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('uk-width-1-4'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$img,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src(picUri),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-width-3-4'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2%'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-5%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(item.inserted_at),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {ctor: '[]'}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(msg),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$DashboardView$unredMessagesListView = function (model) {
	var unredMessagesItems = A2(_elm_lang$core$List$map, _user$project$DashboardView$unredMessageItem, model.pendingUnredMessages);
	var unredMessagesNotifsVisible = model.newMessagesNotifsVisible ? {ctor: '_Tuple2', _0: 'display', _1: 'initial'} : {ctor: '_Tuple2', _0: 'display', _1: 'none'};
	return A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('unredMessgesNotifsStyle'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: unredMessagesNotifsVisible,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		},
		unredMessagesItems);
};
var _user$project$DashboardView$headerComplexView = function (model) {
	var searchProgress = model.searchProgress;
	var searchedDataAll = model.searchedData;
	var unredsNotifs = model.notifications;
	var unredNotifsCount = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(unredsNotifs),
		0) > 0) ? _elm_lang$core$Basics$toString(
		_elm_lang$core$List$length(unredsNotifs)) : '';
	var unredNotifsView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(unredsNotifs),
		0) > 0) ? A2(
		_elm_lang$html$Html$button,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibility'),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.5em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '1em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '40%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(unredNotifsCount),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$button,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibility'),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.5em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '1em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '40%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{ctor: '[]'});
	var newNotifs = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(unredsNotifs),
		0) > 0) ? _user$project$NotificationsView$newNotifsListView(model) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var unredsList = model.pendingUnredMessages;
	var unredsCount = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(unredsList),
		0) > 0) ? _elm_lang$core$Basics$toString(
		_elm_lang$core$List$length(unredsList)) : '';
	var unredsCountView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(unredsList),
		0) > 0) ? A2(
		_elm_lang$html$Html$button,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibility'),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.3em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '1em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '40%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(unredsCount),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$button,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibility'),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-0.3em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '1em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border-radius', _1: '40%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{ctor: '[]'});
	var messagesNotifs = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(unredsList),
		0) > 0) ? _user$project$DashboardView$unredMessagesListView(model) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var optionsVisible = model.dashboardOptionsVisible ? {ctor: '_Tuple2', _0: 'display', _1: 'block'} : {ctor: '_Tuple2', _0: 'display', _1: 'none'};
	var pricingVisible = model.pricingOpened;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-flex responsiveVisibility'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('headerLogoBlack responsiveVisibility'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: newNotifs,
				_1: {
					ctor: '::',
					_0: messagesNotifs,
					_1: {
						ctor: '::',
						_0: _user$project$DashboardView$headerNavigationViewBlack(pricingVisible),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '45%'},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('responsiveVisibility'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '3em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '2em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid grey'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSubmitSearch),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'search'),
															_1: {ctor: '[]'}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$input,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnInputSearch),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '7vw'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																			_1: {ctor: '[]'}
																		}
																	}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$placeholder('Search'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$value(searchProgress.typedSearch),
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnNewNotifsVisibilityToggle),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('responsiveDisplay'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: bell; ratio: 1.3'),
																_1: {ctor: '[]'}
															}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: unredNotifsView,
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnNewMessagesNotifsVisibilityToggle),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('responsiveDisplay'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'icon: comments; ratio: 1.3'),
																	_1: {ctor: '[]'}
																}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: unredsCountView,
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column responsiveDisplay'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '10vw'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$a,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$href('#profile'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnLocationChangeProfilePage),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$img,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '30%'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'width', _1: '40%'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$src('https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg'),
																				_1: {ctor: '[]'}
																			}
																		}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$a,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchDashboardOptionsVisible),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Us'),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$span,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'triangle-down'),
																					_1: {ctor: '[]'}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$div,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: optionsVisible,
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'top', _1: '21%'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'right', _1: '10%'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$a,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchSettingsPage),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0'},
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						}),
																					_1: {ctor: '[]'}
																				}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Settings & Privacy'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$a,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'right'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						}),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Help Center'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$a,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'right'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Language'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$a,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'pointer-events', _1: 'none'},
																											_1: {ctor: '[]'}
																										}
																									}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', ''),
																								_1: {ctor: '[]'}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('______________'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$a,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSignOutInitiated),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'right'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}),
																									_1: {ctor: '[]'}
																								}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('Sign Out'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$DashboardView$infoChunkTab = F2(
	function (title, info) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '95%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.1em'},
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(title),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.1em'},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(info),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$DashboardView$infoChunkMobile = F2(
	function (title, info) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '75%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.1em'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(title),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.1em'},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(info),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$DashboardView$infoChunk = F2(
	function (title, info) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '95%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.1em'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(title),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.1em'},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(info),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$DashboardView$innovatorProfilePageView = function (model) {
	var currentInnovator = model.currentInnovatorExtended;
	var pic = _elm_lang$core$String$isEmpty(currentInnovator.pic_uri) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : currentInnovator.pic_uri;
	var profileInfo = A2(
		_elm_lang$core$Basics_ops['++'],
		'Name: ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			currentInnovator.name,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'\n',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Short info: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						currentInnovator.description,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\n',
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Username: ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									currentInnovator.username,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'\n',
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Email: ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												currentInnovator.email,
												A2(
													_elm_lang$core$Basics_ops['++'],
													'\n',
													A2(
														_elm_lang$core$Basics_ops['++'],
														'About me: ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															currentInnovator.about_me,
															A2(
																_elm_lang$core$Basics_ops['++'],
																'\n',
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	'Education: ',
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		currentInnovator.education,
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			'\n',
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				'Experience: ',
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					currentInnovator.experience,
																					A2(
																						_elm_lang$core$Basics_ops['++'],
																						'\n',
																						A2(
																							_elm_lang$core$Basics_ops['++'],
																							'Rating: ',
																							_elm_lang$core$Basics$toString(currentInnovator.rating)))))))))))))))))))))));
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-4.5em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '20%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src(pic),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.7em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.7em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '5%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$h6,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.5em'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(currentInnovator.name),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding-right', _1: '10%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(currentInnovator.description),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '25%'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$button,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchSettingsPage),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Edit profile'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$button,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onClick(
																_user$project$Messages$OnShareProfileOnFacebook(profileInfo)),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Share profile'),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding', _1: '1em'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$img,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(_user$project$DashboardView$infoChunk, 'About:', currentInnovator.about_me),
														_1: {
															ctor: '::',
															_0: A2(_user$project$DashboardView$infoChunk, 'Education:', currentInnovator.education),
															_1: {
																ctor: '::',
																_0: A2(_user$project$DashboardView$infoChunk, 'Experience:', currentInnovator.experience),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$img,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																			_1: {ctor: '[]'}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$br,
																			{ctor: '[]'},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$div,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																								_1: {ctor: '[]'}
																							}
																						}),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$span,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								}),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Connections'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$span,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text(
																									_elm_lang$core$Basics$toString(currentInnovator.connections_count)),
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$button,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnDashboardNewIdeaPageVisible),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}),
																							_1: {ctor: '[]'}
																						}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Post an Idea'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$br,
																						{ctor: '[]'},
																						{ctor: '[]'}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$div,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																										_1: {ctor: '[]'}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$span,
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																																_1: {ctor: '[]'}
																															}
																														}
																													}
																												}
																											}),
																										_1: {ctor: '[]'}
																									},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('Generated ideas'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$span,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$style(
																												{
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																																_1: {ctor: '[]'}
																															}
																														}
																													}
																												}),
																											_1: {ctor: '[]'}
																										},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text(
																												_elm_lang$core$Basics$toString(currentInnovator.ideas_count)),
																											_1: {ctor: '[]'}
																										}),
																									_1: {ctor: '[]'}
																								}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$br,
																								{ctor: '[]'},
																								{ctor: '[]'}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$br,
																									{ctor: '[]'},
																									{ctor: '[]'}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$div,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$style(
																												{
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																														_1: {ctor: '[]'}
																													}
																												}),
																											_1: {ctor: '[]'}
																										},
																										{
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$span,
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$style(
																														{
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																		_1: {ctor: '[]'}
																																	}
																																}
																															}
																														}),
																													_1: {ctor: '[]'}
																												},
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html$text(
																														_elm_lang$core$Basics$toString(currentInnovator.rating)),
																													_1: {ctor: '[]'}
																												}),
																											_1: {
																												ctor: '::',
																												_0: A2(_user$project$TopMembersList$ratingStarsView, currentInnovator.rating, true),
																												_1: {ctor: '[]'}
																											}
																										}),
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$DashboardView$seeOtherInnovatorProfilePageView = F2(
	function (model, innovator) {
		var connections = model.connections;
		var connected = A2(
			_elm_lang$core$List$filter,
			function (c) {
				return _elm_lang$core$Native_Utils.eq(
					c.key,
					_elm_lang$core$Basics$toString(innovator.id)) && _elm_lang$core$Native_Utils.eq(c.value, 'false');
			},
			connections);
		var connectEnabled = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(connected),
			0) > 0) ? A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', 'disabled') : A2(_elm_lang$html$Html_Attributes$attribute, 'enabled', 'enabled');
		var connectBtnText = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(connected),
			0) > 0) ? 'Connected!' : 'Connect';
		var receiverData = A3(_user$project$Models$ChatMessageReceiverData, innovator.id, innovator.name, false);
		var pic = _elm_lang$core$String$isEmpty(innovator.pic_uri) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : innovator.pic_uri;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-4.5em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '20%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
													_1: {ctor: '[]'}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$src(pic),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.7em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.7em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '5%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h6,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.5em'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(innovator.name),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(innovator.description),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '25%'},
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$button,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onClick(
																_user$project$Messages$OnToggleChatWindow(
																	_elm_lang$core$Maybe$Just(receiverData))),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Message'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$button,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onClick(
																	A2(_user$project$Messages$OnConnectInitiated, innovator.id, false)),
																_1: {
																	ctor: '::',
																	_0: connectEnabled,
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(connectBtnText),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding', _1: '1em'},
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$img,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																_1: {ctor: '[]'}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(_user$project$DashboardView$infoChunk, 'About:', innovator.about_me),
															_1: {
																ctor: '::',
																_0: A2(_user$project$DashboardView$infoChunk, 'Education:', innovator.education),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$DashboardView$infoChunk, 'Experience:', innovator.experience),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$img,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																				_1: {ctor: '[]'}
																			},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$br,
																				{ctor: '[]'},
																				{ctor: '[]'}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$div,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																									_1: {ctor: '[]'}
																								}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$span,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('Connections'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$span,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}),
																									_1: {ctor: '[]'}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text(
																										_elm_lang$core$Basics$toString(innovator.connections_count)),
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$br,
																						{ctor: '[]'},
																						{ctor: '[]'}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$div,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																											_1: {ctor: '[]'}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$span,
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																																_1: {ctor: '[]'}
																															}
																														}
																													}
																												}
																											}),
																										_1: {ctor: '[]'}
																									},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('Generated ideas'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$span,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$style(
																												{
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																																_1: {ctor: '[]'}
																															}
																														}
																													}
																												}),
																											_1: {ctor: '[]'}
																										},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text(
																												_elm_lang$core$Basics$toString(innovator.ideas_count)),
																											_1: {ctor: '[]'}
																										}),
																									_1: {ctor: '[]'}
																								}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$br,
																								{ctor: '[]'},
																								{ctor: '[]'}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$br,
																									{ctor: '[]'},
																									{ctor: '[]'}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$div,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$style(
																												{
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																														_1: {ctor: '[]'}
																													}
																												}),
																											_1: {ctor: '[]'}
																										},
																										{
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$span,
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$style(
																														{
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																		_1: {ctor: '[]'}
																																	}
																																}
																															}
																														}),
																													_1: {ctor: '[]'}
																												},
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html$text(
																														_elm_lang$core$Basics$toString(innovator.rating)),
																													_1: {ctor: '[]'}
																												}),
																											_1: {
																												ctor: '::',
																												_0: A2(_user$project$TopMembersList$ratingStarsView, innovator.rating, true),
																												_1: {ctor: '[]'}
																											}
																										}),
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _user$project$DashboardView$seeOtherOrganizationProfilePageView = F2(
	function (model, organization) {
		var connections = model.connections;
		var connected = A2(
			_elm_lang$core$List$filter,
			function (c) {
				return _elm_lang$core$Native_Utils.eq(
					c.key,
					_elm_lang$core$Basics$toString(organization.id)) && _elm_lang$core$Native_Utils.eq(c.value, 'true');
			},
			connections);
		var connectEnabled = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(connected),
			0) > 0) ? A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', 'disabled') : A2(_elm_lang$html$Html_Attributes$attribute, 'enabled', 'enabled');
		var connectBtnText = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(connected),
			0) > 0) ? 'Connected!' : 'Connect';
		var receiverData = A3(_user$project$Models$ChatMessageReceiverData, organization.id, organization.name, true);
		var pic = _elm_lang$core$String$isEmpty(organization.pic_uri) ? 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png' : organization.pic_uri;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-4.5em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '20%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
													_1: {ctor: '[]'}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$src(pic),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.7em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.7em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '5%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h6,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.5em'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(organization.name),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(organization.description),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '25%'},
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$button,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onClick(
																_user$project$Messages$OnToggleChatWindow(
																	_elm_lang$core$Maybe$Just(receiverData))),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Message'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$button,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onClick(
																	A2(_user$project$Messages$OnConnectInitiated, organization.id, true)),
																_1: {
																	ctor: '::',
																	_0: connectEnabled,
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(connectBtnText),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding', _1: '1em'},
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$img,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																_1: {ctor: '[]'}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(_user$project$DashboardView$infoChunk, 'About:', organization.about_us),
															_1: {
																ctor: '::',
																_0: A2(_user$project$DashboardView$infoChunk, 'Industry:', organization.industry),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$DashboardView$infoChunk, 'Industries we are interested in:', organization.interested_industries),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$img,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																				_1: {ctor: '[]'}
																			},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$br,
																				{ctor: '[]'},
																				{ctor: '[]'}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$div,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																									_1: {ctor: '[]'}
																								}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$span,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('Connections'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$span,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}),
																									_1: {ctor: '[]'}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text(
																										_elm_lang$core$Basics$toString(organization.connections_count)),
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$br,
																						{ctor: '[]'},
																						{ctor: '[]'}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$br,
																							{ctor: '[]'},
																							{ctor: '[]'}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$div,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																												_1: {ctor: '[]'}
																											}
																										}),
																									_1: {ctor: '[]'}
																								},
																								{
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$span,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$style(
																												{
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																_1: {ctor: '[]'}
																															}
																														}
																													}
																												}),
																											_1: {ctor: '[]'}
																										},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text(
																												_elm_lang$core$Basics$toString(organization.rating)),
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: A2(_user$project$TopMembersList$ratingStarsView, organization.rating, true),
																										_1: {ctor: '[]'}
																									}
																								}),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _user$project$DashboardView$profilePageView = function (model) {
	var currentOrganization = model.currentOrganizationExtended;
	var pic = _elm_lang$core$String$isEmpty(currentOrganization.pic_uri) ? 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png' : currentOrganization.pic_uri;
	var profileInfo = A2(
		_elm_lang$core$Basics_ops['++'],
		'Name: ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			currentOrganization.name,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'\n',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Short info: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						currentOrganization.description,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\n',
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Username: ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									currentOrganization.username,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'\n',
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Webpage: ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												currentOrganization.webpage,
												A2(
													_elm_lang$core$Basics_ops['++'],
													'\n',
													A2(
														_elm_lang$core$Basics_ops['++'],
														'Email: ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															currentOrganization.email,
															A2(
																_elm_lang$core$Basics_ops['++'],
																'\n',
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	'About us: ',
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		currentOrganization.about_us,
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			'\n',
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				'Industry: ',
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					currentOrganization.industry,
																					A2(
																						_elm_lang$core$Basics_ops['++'],
																						'\n',
																						A2(_elm_lang$core$Basics_ops['++'], 'Interested industries: ', currentOrganization.interested_industries))))))))))))))))))))));
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-4.5em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '20%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src(pic),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.7em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.7em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '5%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$h6,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.5em'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(currentOrganization.name),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(currentOrganization.description),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '25%'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$button,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchSettingsPage),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Edit profile'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$button,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onClick(
																_user$project$Messages$OnShareProfileOnFacebook(profileInfo)),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Share profile'),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding', _1: '1em'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$img,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(_user$project$DashboardView$infoChunk, 'About Us:', currentOrganization.about_us),
														_1: {
															ctor: '::',
															_0: A2(_user$project$DashboardView$infoChunk, 'Industry:', currentOrganization.industry),
															_1: {
																ctor: '::',
																_0: A2(_user$project$DashboardView$infoChunk, 'Industries we are interested in:', currentOrganization.interested_industries),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$img,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																			_1: {ctor: '[]'}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$br,
																			{ctor: '[]'},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$div,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																								_1: {ctor: '[]'}
																							}
																						}),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$span,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								}),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Connections'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$span,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text(
																									_elm_lang$core$Basics$toString(currentOrganization.connections_count)),
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$br,
																					{ctor: '[]'},
																					{ctor: '[]'}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$br,
																						{ctor: '[]'},
																						{ctor: '[]'}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$div,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																											_1: {ctor: '[]'}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$span,
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																															_1: {ctor: '[]'}
																														}
																													}
																												}
																											}),
																										_1: {ctor: '[]'}
																									},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text(
																											_elm_lang$core$Basics$toString(currentOrganization.rating)),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$TopMembersList$ratingStarsView, currentOrganization.rating, true),
																									_1: {ctor: '[]'}
																								}
																							}),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$DashboardView$leftAndMiddleColumnsView = function (model) {
	var loggedMember = model.loggedInMember;
	var leftColumn = loggedMember.isOrganization ? _user$project$DashboardView$leftColumnView(model) : _user$project$DashboardView$leftColumnInnovatorView(model);
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-width-3-5 uk-flex responsiveVisibility'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('uk-width-1-3'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: leftColumn,
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-width-2-3'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _user$project$DashboardView$middleColumnView(model),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$DashboardView$mobileDashboardInnovatorProfilePageViewSmall = function (model) {
	var currentInnovator = model.currentInnovatorExtended;
	var pic = _elm_lang$core$String$isEmpty(currentInnovator.pic_uri) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : currentInnovator.pic_uri;
	var profileInfo = A2(
		_elm_lang$core$Basics_ops['++'],
		'Name: ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			currentInnovator.name,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'\n',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Short info: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						currentInnovator.description,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\n',
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Username: ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									currentInnovator.username,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'\n',
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Email: ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												currentInnovator.email,
												A2(
													_elm_lang$core$Basics_ops['++'],
													'\n',
													A2(
														_elm_lang$core$Basics_ops['++'],
														'About me: ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															currentInnovator.about_me,
															A2(
																_elm_lang$core$Basics_ops['++'],
																'\n',
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	'Education: ',
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		currentInnovator.education,
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			'\n',
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				'Experience: ',
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					currentInnovator.experience,
																					A2(
																						_elm_lang$core$Basics_ops['++'],
																						'\n',
																						A2(
																							_elm_lang$core$Basics_ops['++'],
																							'Rating: ',
																							_elm_lang$core$Basics$toString(currentInnovator.rating)))))))))))))))))))))));
	var user = model.loggedInMember;
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-5.5em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-8em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-1em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src(pic),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.7em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h6,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.5em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(currentInnovator.name),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '10%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(currentInnovator.description),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5%'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$button,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnDashboardMobileSettingsPageOpen),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '65%'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Edit profile'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$button,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onClick(
																	_user$project$Messages$OnShareProfileOnFacebook(profileInfo)),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '65%'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Share profile'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$img,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(_user$project$DashboardView$infoChunkMobile, 'About me:', currentInnovator.about_me),
													_1: {
														ctor: '::',
														_0: A2(_user$project$DashboardView$infoChunkMobile, 'Education:', currentInnovator.education),
														_1: {
															ctor: '::',
															_0: A2(_user$project$DashboardView$infoChunkMobile, 'Experience:', currentInnovator.experience),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$img,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$div,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$span,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Connections'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$span,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text(
																							_elm_lang$core$Basics$toString(currentInnovator.connections_count)),
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$br,
																			{ctor: '[]'},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$div,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$span,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								}),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Generated ideas'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$span,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text(
																									_elm_lang$core$Basics$toString(currentInnovator.ideas_count)),
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$br,
																					{ctor: '[]'},
																					{ctor: '[]'}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$button,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnMobileDashboardNewIdeaPageVisible),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Post an Idea'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$br,
																							{ctor: '[]'},
																							{ctor: '[]'}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$div,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																												_1: {ctor: '[]'}
																											}
																										}),
																									_1: {ctor: '[]'}
																								},
																								{
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$span,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$style(
																												{
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																																_1: {ctor: '[]'}
																															}
																														}
																													}
																												}),
																											_1: {ctor: '[]'}
																										},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text(
																												_elm_lang$core$Basics$toString(currentInnovator.rating)),
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: A2(_user$project$TopMembersList$ratingStarsView, currentInnovator.rating, true),
																										_1: {ctor: '[]'}
																									}
																								}),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '2em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _user$project$Suggestions$suggestionsMobileView(model),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$DashboardView$mobileDashboardProfilePageViewSmall = function (model) {
	var currentOrganization = model.currentOrganizationExtended;
	var pic = _elm_lang$core$String$isEmpty(currentOrganization.pic_uri) ? 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png' : currentOrganization.pic_uri;
	var profileInfo = A2(
		_elm_lang$core$Basics_ops['++'],
		'Name: ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			currentOrganization.name,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'\n',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Short info: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						currentOrganization.description,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\n',
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Username: ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									currentOrganization.username,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'\n',
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Webpage: ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												currentOrganization.webpage,
												A2(
													_elm_lang$core$Basics_ops['++'],
													'\n',
													A2(
														_elm_lang$core$Basics_ops['++'],
														'Email: ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															currentOrganization.email,
															A2(
																_elm_lang$core$Basics_ops['++'],
																'\n',
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	'About us: ',
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		currentOrganization.about_us,
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			'\n',
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				'Industry: ',
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					currentOrganization.industry,
																					A2(
																						_elm_lang$core$Basics_ops['++'],
																						'\n',
																						A2(_elm_lang$core$Basics_ops['++'], 'Interested industries: ', currentOrganization.interested_industries))))))))))))))))))))));
	var user = model.loggedInMember;
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-5.5em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-8em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-1em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src(pic),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.7em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h6,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.5em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(currentOrganization.name),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '10%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(currentOrganization.description),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																	_1: {ctor: '[]'}
																}
															}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$href('www.google.com'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$target('_blank'),
															_1: {ctor: '[]'}
														}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(currentOrganization.webpage),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5%'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$button,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnDashboardMobileSettingsPageOpen),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '65%'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Edit profile'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$button,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(
																		_user$project$Messages$OnShareProfileOnFacebook(profileInfo)),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '65%'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Share profile'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$img,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(_user$project$DashboardView$infoChunkMobile, 'About us:', currentOrganization.about_us),
														_1: {
															ctor: '::',
															_0: A2(_user$project$DashboardView$infoChunkMobile, 'Industry:', currentOrganization.industry),
															_1: {
																ctor: '::',
																_0: A2(_user$project$DashboardView$infoChunkMobile, 'Industries we are interested in:', currentOrganization.interested_industries),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$img,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																				_1: {ctor: '[]'}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$div,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$span,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Connections'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$span,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text(
																								_elm_lang$core$Basics$toString(currentOrganization.connections_count)),
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$br,
																				{ctor: '[]'},
																				{ctor: '[]'}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$div,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																									_1: {ctor: '[]'}
																								}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$span,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text(
																									_elm_lang$core$Basics$toString(currentOrganization.rating)),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$TopMembersList$ratingStarsView, currentOrganization.rating, true),
																							_1: {ctor: '[]'}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '2em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _user$project$Suggestions$suggestionsMobileView(model),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$DashboardView$mobileDashboardInnovatorProfilePageView = function (model) {
	var currentInnovator = model.currentInnovatorExtended;
	var pic = _elm_lang$core$String$isEmpty(currentInnovator.pic_uri) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : currentInnovator.pic_uri;
	var profileInfo = A2(
		_elm_lang$core$Basics_ops['++'],
		'Name: ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			currentInnovator.name,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'\n',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Short info: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						currentInnovator.description,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\n',
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Username: ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									currentInnovator.username,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'\n',
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Email: ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												currentInnovator.email,
												A2(
													_elm_lang$core$Basics_ops['++'],
													'\n',
													A2(
														_elm_lang$core$Basics_ops['++'],
														'About me: ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															currentInnovator.about_me,
															A2(
																_elm_lang$core$Basics_ops['++'],
																'\n',
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	'Education: ',
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		currentInnovator.education,
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			'\n',
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				'Experience: ',
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					currentInnovator.experience,
																					A2(
																						_elm_lang$core$Basics_ops['++'],
																						'\n',
																						A2(
																							_elm_lang$core$Basics_ops['++'],
																							'Rating: ',
																							_elm_lang$core$Basics$toString(currentInnovator.rating)))))))))))))))))))))));
	var user = model.loggedInMember;
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-5.5em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-8em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-1em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '27%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src(pic),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-2em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.7em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '7%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h6,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.5em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(currentInnovator.name),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '20%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(currentInnovator.description),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '33%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$button,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnDashboardMobileSettingsPageOpen),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Edit profile'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$button,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onClick(
																	_user$project$Messages$OnShareProfileOnFacebook(profileInfo)),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Share profile'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$img,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(_user$project$DashboardView$infoChunkTab, 'About me:', currentInnovator.about_me),
													_1: {
														ctor: '::',
														_0: A2(_user$project$DashboardView$infoChunkTab, 'Education:', currentInnovator.education),
														_1: {
															ctor: '::',
															_0: A2(_user$project$DashboardView$infoChunkTab, 'Experience:', currentInnovator.experience),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$img,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$div,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$span,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Connections'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$span,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text(
																							_elm_lang$core$Basics$toString(currentInnovator.connections_count)),
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$button,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnMobileDashboardNewIdeaPageVisible),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						}),
																					_1: {ctor: '[]'}
																				}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Post an Idea'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$br,
																				{ctor: '[]'},
																				{ctor: '[]'}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$div,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$span,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('Generated ideas'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$span,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}),
																									_1: {ctor: '[]'}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text(
																										_elm_lang$core$Basics$toString(currentInnovator.ideas_count)),
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$br,
																						{ctor: '[]'},
																						{ctor: '[]'}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$div,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																											_1: {ctor: '[]'}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$span,
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																															_1: {ctor: '[]'}
																														}
																													}
																												}
																											}),
																										_1: {ctor: '[]'}
																									},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text(
																											_elm_lang$core$Basics$toString(currentInnovator.rating)),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$TopMembersList$ratingStarsView, currentInnovator.rating, true),
																									_1: {ctor: '[]'}
																								}
																							}),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '2em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _user$project$Suggestions$suggestionsTabView(model),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$DashboardView$seeOtherInnovatorProfilePageViewMobile = F2(
	function (model, innovator) {
		var connections = model.connections;
		var connected = A2(
			_elm_lang$core$List$filter,
			function (c) {
				return _elm_lang$core$Native_Utils.eq(
					c.key,
					_elm_lang$core$Basics$toString(innovator.id)) && _elm_lang$core$Native_Utils.eq(c.value, 'false');
			},
			connections);
		var connectEnabled = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(connected),
			0) > 0) ? A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', 'disabled') : A2(_elm_lang$html$Html_Attributes$attribute, 'enabled', 'enabled');
		var connectBtnText = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(connected),
			0) > 0) ? 'Connected!' : 'Connect';
		var receiverData = A3(_user$project$Models$ChatMessageReceiverData, innovator.id, innovator.name, false);
		var pic = _elm_lang$core$String$isEmpty(innovator.pic_uri) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : innovator.pic_uri;
		var currentInnovator = model.currentInnovatorExtended;
		var user = model.loggedInMember;
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-5.5em'},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-8em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-1em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src(pic),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$img,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.7em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$h6,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.5em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(innovator.name),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '10%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(innovator.description),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5%'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$button,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onClick(
																	_user$project$Messages$OnToggleChatWindow(
																		_elm_lang$core$Maybe$Just(receiverData))),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '65%'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Message'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$button,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(
																		A2(_user$project$Messages$OnConnectInitiated, innovator.id, false)),
																	_1: {
																		ctor: '::',
																		_0: connectEnabled,
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '65%'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(connectBtnText),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$img,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(_user$project$DashboardView$infoChunkMobile, 'About me:', innovator.about_me),
														_1: {
															ctor: '::',
															_0: A2(_user$project$DashboardView$infoChunkMobile, 'Education:', innovator.education),
															_1: {
																ctor: '::',
																_0: A2(_user$project$DashboardView$infoChunkMobile, 'Experience:', innovator.experience),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$img,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																				_1: {ctor: '[]'}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$div,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$span,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Connections'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$span,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text(
																								_elm_lang$core$Basics$toString(innovator.connections_count)),
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$br,
																				{ctor: '[]'},
																				{ctor: '[]'}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$div,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$span,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('Generated ideas'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$span,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}),
																									_1: {ctor: '[]'}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text(
																										_elm_lang$core$Basics$toString(innovator.ideas_count)),
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$br,
																						{ctor: '[]'},
																						{ctor: '[]'}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$div,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																											_1: {ctor: '[]'}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$span,
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																															_1: {ctor: '[]'}
																														}
																													}
																												}
																											}),
																										_1: {ctor: '[]'}
																									},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text(
																											_elm_lang$core$Basics$toString(innovator.rating)),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$TopMembersList$ratingStarsView, innovator.rating, true),
																									_1: {ctor: '[]'}
																								}
																							}),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '2em'},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _user$project$Suggestions$suggestionsMobileView(model),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$DashboardView$seeOtherOrganizationProfilePageViewMobile = F2(
	function (model, organization) {
		var connections = model.connections;
		var connected = A2(
			_elm_lang$core$List$filter,
			function (c) {
				return _elm_lang$core$Native_Utils.eq(
					c.key,
					_elm_lang$core$Basics$toString(organization.id)) && _elm_lang$core$Native_Utils.eq(c.value, 'true');
			},
			connections);
		var connectEnabled = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(connected),
			0) > 0) ? A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', 'disabled') : A2(_elm_lang$html$Html_Attributes$attribute, 'enabled', 'enabled');
		var connectBtnText = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(connected),
			0) > 0) ? 'Connected!' : 'Connect';
		var receiverData = A3(_user$project$Models$ChatMessageReceiverData, organization.id, organization.name, true);
		var pic = _elm_lang$core$String$isEmpty(organization.pic_uri) ? 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png' : organization.pic_uri;
		var currentOrganization = model.currentOrganizationExtended;
		var user = model.loggedInMember;
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-5.5em'},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-8em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-1em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src(pic),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$img,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.7em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$h6,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.5em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(organization.name),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '10%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(organization.description),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																		_1: {ctor: '[]'}
																	}
																}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$href('www.google.com'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$target('_blank'),
																_1: {ctor: '[]'}
															}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(organization.webpage),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5%'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$button,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(
																		_user$project$Messages$OnToggleChatWindow(
																			_elm_lang$core$Maybe$Just(receiverData))),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '65%'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Message'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$button,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(
																			A2(_user$project$Messages$OnConnectInitiated, organization.id, true)),
																		_1: {
																			ctor: '::',
																			_0: connectEnabled,
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '65%'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(connectBtnText),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$img,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(_user$project$DashboardView$infoChunkMobile, 'About us:', organization.about_us),
															_1: {
																ctor: '::',
																_0: A2(_user$project$DashboardView$infoChunkMobile, 'Industry:', organization.industry),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$DashboardView$infoChunkMobile, 'Industries we are interested in:', organization.interested_industries),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$img,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																					_1: {ctor: '[]'}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$div,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$span,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								}),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Connections'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$span,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text(
																									_elm_lang$core$Basics$toString(organization.connections_count)),
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$br,
																					{ctor: '[]'},
																					{ctor: '[]'}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$div,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																										_1: {ctor: '[]'}
																									}
																								}),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$span,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}),
																									_1: {ctor: '[]'}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text(
																										_elm_lang$core$Basics$toString(organization.rating)),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$TopMembersList$ratingStarsView, organization.rating, true),
																								_1: {ctor: '[]'}
																							}
																						}),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '2em'},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _user$project$Suggestions$suggestionsMobileView(model),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$DashboardView$seeOtherInnovatorProfilePageViewTab = F2(
	function (model, innovator) {
		var connections = model.connections;
		var connected = A2(
			_elm_lang$core$List$filter,
			function (c) {
				return _elm_lang$core$Native_Utils.eq(
					c.key,
					_elm_lang$core$Basics$toString(innovator.id)) && _elm_lang$core$Native_Utils.eq(c.value, 'false');
			},
			connections);
		var connectEnabled = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(connected),
			0) > 0) ? A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', 'disabled') : A2(_elm_lang$html$Html_Attributes$attribute, 'enabled', 'enabled');
		var connectBtnText = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(connected),
			0) > 0) ? 'Connected!' : 'Connect';
		var receiverData = A3(_user$project$Models$ChatMessageReceiverData, innovator.id, innovator.name, false);
		var pic = _elm_lang$core$String$isEmpty(innovator.pic_uri) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : innovator.pic_uri;
		var currentInnovator = model.currentInnovatorExtended;
		var user = model.loggedInMember;
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-5.5em'},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-8em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-1em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '27%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src(pic),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$img,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-2em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.7em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '7%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$h6,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.5em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(innovator.name),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '20%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(innovator.description),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '33%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$button,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onClick(
																	_user$project$Messages$OnToggleChatWindow(
																		_elm_lang$core$Maybe$Just(receiverData))),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Message'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$button,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(
																		A2(_user$project$Messages$OnConnectInitiated, innovator.id, false)),
																	_1: {
																		ctor: '::',
																		_0: connectEnabled,
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(connectBtnText),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$img,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(_user$project$DashboardView$infoChunkTab, 'About me:', innovator.about_me),
														_1: {
															ctor: '::',
															_0: A2(_user$project$DashboardView$infoChunkTab, 'Education:', innovator.education),
															_1: {
																ctor: '::',
																_0: A2(_user$project$DashboardView$infoChunkTab, 'Experience:', innovator.experience),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$img,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																				_1: {ctor: '[]'}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$div,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$span,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Connections'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$span,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text(
																								_elm_lang$core$Basics$toString(innovator.connections_count)),
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$br,
																				{ctor: '[]'},
																				{ctor: '[]'}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$div,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$span,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('Generated ideas'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$span,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}),
																									_1: {ctor: '[]'}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text(
																										_elm_lang$core$Basics$toString(innovator.ideas_count)),
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$br,
																						{ctor: '[]'},
																						{ctor: '[]'}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$div,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																											_1: {ctor: '[]'}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$span,
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																															_1: {ctor: '[]'}
																														}
																													}
																												}
																											}),
																										_1: {ctor: '[]'}
																									},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text(
																											_elm_lang$core$Basics$toString(innovator.rating)),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$TopMembersList$ratingStarsView, innovator.rating, true),
																									_1: {ctor: '[]'}
																								}
																							}),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '2em'},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _user$project$Suggestions$suggestionsTabView(model),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$DashboardView$seeOtherOrganizationProfilePageViewTab = F2(
	function (model, organization) {
		var connections = model.connections;
		var connected = A2(
			_elm_lang$core$List$filter,
			function (c) {
				return _elm_lang$core$Native_Utils.eq(
					c.key,
					_elm_lang$core$Basics$toString(organization.id)) && _elm_lang$core$Native_Utils.eq(c.value, 'true');
			},
			connections);
		var connectEnabled = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(connected),
			0) > 0) ? A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', 'disabled') : A2(_elm_lang$html$Html_Attributes$attribute, 'enabled', 'enabled');
		var connectBtnText = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(connected),
			0) > 0) ? 'Connected!' : 'Connect';
		var receiverData = A3(_user$project$Models$ChatMessageReceiverData, organization.id, organization.name, true);
		var pic = _elm_lang$core$String$isEmpty(organization.pic_uri) ? 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png' : organization.pic_uri;
		var currentOrganization = model.currentOrganizationExtended;
		var user = model.loggedInMember;
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-5.5em'},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-8em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-1em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '27%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src(pic),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$img,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-2em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.7em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '7%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$h6,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.5em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(organization.name),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '20%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(organization.description),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																		_1: {ctor: '[]'}
																	}
																}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$href('www.google.com'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$target('_blank'),
																_1: {ctor: '[]'}
															}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(organization.webpage),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '33%'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$button,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(
																		_user$project$Messages$OnToggleChatWindow(
																			_elm_lang$core$Maybe$Just(receiverData))),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Message'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$button,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(
																			A2(_user$project$Messages$OnConnectInitiated, organization.id, true)),
																		_1: {
																			ctor: '::',
																			_0: connectEnabled,
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(connectBtnText),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$img,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(_user$project$DashboardView$infoChunkTab, 'About us:', organization.about_us),
															_1: {
																ctor: '::',
																_0: A2(_user$project$DashboardView$infoChunkTab, 'Industry:', organization.industry),
																_1: {
																	ctor: '::',
																	_0: A2(_user$project$DashboardView$infoChunkTab, 'Industries we are interested in:', organization.interested_industries),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$img,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																					_1: {ctor: '[]'}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$div,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$span,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								}),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Connections'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$span,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text(
																									_elm_lang$core$Basics$toString(organization.connections_count)),
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$br,
																					{ctor: '[]'},
																					{ctor: '[]'}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$div,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																										_1: {ctor: '[]'}
																									}
																								}),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$span,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}),
																									_1: {ctor: '[]'}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text(
																										_elm_lang$core$Basics$toString(organization.rating)),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$TopMembersList$ratingStarsView, organization.rating, true),
																								_1: {ctor: '[]'}
																							}
																						}),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '2em'},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _user$project$Suggestions$suggestionsTabView(model),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$DashboardView$mobileDashboardProfilePageView = function (model) {
	var currentOrganization = model.currentOrganizationExtended;
	var pic = _elm_lang$core$String$isEmpty(currentOrganization.pic_uri) ? 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png' : currentOrganization.pic_uri;
	var profileInfo = A2(
		_elm_lang$core$Basics_ops['++'],
		'Name: ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			currentOrganization.name,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'\n',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Short info: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						currentOrganization.description,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\n',
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Username: ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									currentOrganization.username,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'\n',
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Webpage: ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												currentOrganization.webpage,
												A2(
													_elm_lang$core$Basics_ops['++'],
													'\n',
													A2(
														_elm_lang$core$Basics_ops['++'],
														'Email: ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															currentOrganization.email,
															A2(
																_elm_lang$core$Basics_ops['++'],
																'\n',
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	'About us: ',
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		currentOrganization.about_us,
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			'\n',
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				'Industry: ',
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					currentOrganization.industry,
																					A2(
																						_elm_lang$core$Basics_ops['++'],
																						'\n',
																						A2(_elm_lang$core$Basics_ops['++'], 'Interested industries: ', currentOrganization.interested_industries))))))))))))))))))))));
	var user = model.loggedInMember;
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '12em'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-3em'},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-5.5em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-8em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '-1em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '27%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src(pic),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-2em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.7em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '7%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src('/images/menu_icon.png'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h6,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.5em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-1em'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(currentOrganization.name),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '20%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(currentOrganization.description),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'text-decoration', _1: 'underline'},
																	_1: {ctor: '[]'}
																}
															}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$href('www.google.com'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$target('_blank'),
															_1: {ctor: '[]'}
														}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(currentOrganization.webpage),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '33%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$button,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnDashboardMobileSettingsPageOpen),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1em'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Edit profile'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$button,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(
																		_user$project$Messages$OnShareProfileOnFacebook(profileInfo)),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid gold'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Share profile'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$img,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(_user$project$DashboardView$infoChunkTab, 'About us:', currentOrganization.about_us),
														_1: {
															ctor: '::',
															_0: A2(_user$project$DashboardView$infoChunkTab, 'Industry:', currentOrganization.industry),
															_1: {
																ctor: '::',
																_0: A2(_user$project$DashboardView$infoChunkTab, 'Industries we are interested in:', currentOrganization.interested_industries),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$img,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
																				_1: {ctor: '[]'}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$div,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$span,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Connections'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$span,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '85%'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text(
																								_elm_lang$core$Basics$toString(currentOrganization.connections_count)),
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$br,
																				{ctor: '[]'},
																				{ctor: '[]'}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$div,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																									_1: {ctor: '[]'}
																								}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$span,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '2px'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text(
																									_elm_lang$core$Basics$toString(currentOrganization.rating)),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$TopMembersList$ratingStarsView, currentOrganization.rating, true),
																							_1: {ctor: '[]'}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '2em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _user$project$Suggestions$suggestionsTabView(model),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$DashboardView$middleColumnTabView = function (model) {
	var posts = model.postList;
	var postsWrapped = A2(
		_elm_lang$core$List$map,
		_user$project$SearchedPageView$ideasListItem(model),
		posts);
	var postsView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(postsWrapped),
		0) > 0) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		postsWrapped) : A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$br,
				{ctor: '[]'},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text('No posts were fetched!'),
				_1: {ctor: '[]'}
			}
		});
	var postData = model.postData;
	var errors = (!_elm_lang$core$String$isEmpty(postData.error)) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$br,
				{ctor: '[]'},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(postData.error),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var report = (!_elm_lang$core$String$isEmpty(postData.mediaFileName)) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$br,
				{ctor: '[]'},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'green'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(postData.mediaFileName),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var extendedOrg = model.currentOrganizationExtended;
	var extendedInnovator = model.currentInnovatorExtended;
	var user = model.loggedInMember;
	var pic = (user.isOrganization && _elm_lang$core$String$isEmpty(extendedOrg.pic_uri)) ? 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png' : (user.isOrganization ? extendedOrg.pic_uri : (((!user.isOrganization) && _elm_lang$core$String$isEmpty(extendedInnovator.pic_uri)) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : extendedInnovator.pic_uri));
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('uk-child-width-1-4'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '7%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src(pic),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.1em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-1em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Name Surename'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$textarea,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$value(postData.message),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnPostMessageInput),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'resize', _1: 'none'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$rows(2),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$placeholder('Lorem ipsum'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1px'},
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'image'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$label,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('btn'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$for('files'),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Photo/Video'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$input,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$id('files'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$type_('file'),
																			_1: {ctor: '[]'}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$button,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSubmitPost),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.4em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'padding', _1: '0 1em'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Post'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: errors,
													_1: {
														ctor: '::',
														_0: report,
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: postsView,
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$DashboardView$middleColumnMobileView = function (model) {
	var posts = model.postList;
	var postsWrapped = A2(
		_elm_lang$core$List$map,
		_user$project$SearchedPageView$ideasListItem(model),
		posts);
	var postsView = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(postsWrapped),
		0) > 0) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		postsWrapped) : A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$br,
				{ctor: '[]'},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text('No posts were fetched!'),
				_1: {ctor: '[]'}
			}
		});
	var postData = model.postData;
	var errors = (!_elm_lang$core$String$isEmpty(postData.error)) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$br,
				{ctor: '[]'},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(postData.error),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var report = (!_elm_lang$core$String$isEmpty(postData.mediaFileName)) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$br,
				{ctor: '[]'},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'green'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(postData.mediaFileName),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var extendedOrg = model.currentOrganizationExtended;
	var extendedInnovator = model.currentInnovatorExtended;
	var user = model.loggedInMember;
	var pic = (user.isOrganization && _elm_lang$core$String$isEmpty(extendedOrg.pic_uri)) ? 'https://conferencesolutions.com/wp-content/uploads/2017/03/logo-1.png' : (user.isOrganization ? extendedOrg.pic_uri : (((!user.isOrganization) && _elm_lang$core$String$isEmpty(extendedInnovator.pic_uri)) ? 'https://www.bea-sensors.com/wp/wp-content/uploads/2016/10/user_profile_male.jpg' : extendedInnovator.pic_uri));
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '0.5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/bold_divider.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-card uk-card-default uk-card-body'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('uk-child-width-1-4'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '7%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'height', _1: 'auto'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('marginedUpRoundedImage'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src(pic),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.4em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-1em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Name Surename'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$textarea,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$value(postData.message),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnPostMessageInput),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'resize', _1: 'none'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$rows(1),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$placeholder('Lorem ipsum'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src('/images/grey_divider.png'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '1px'},
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'image'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$label,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('btn'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$for('files'),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Photo/Video'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$input,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$id('files'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$type_('file'),
																			_1: {ctor: '[]'}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$button,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSubmitPost),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.4em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'background', _1: 'gold'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'padding', _1: '0 1em'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Post'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: errors,
													_1: {
														ctor: '::',
														_0: report,
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: postsView,
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$DashboardView$mobileDashboardHomePageView = F2(
	function (forTab, model) {
		var middleColumn = forTab ? _user$project$DashboardView$middleColumnTabView(model) : _user$project$DashboardView$middleColumnMobileView(model);
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: middleColumn,
				_1: {ctor: '[]'}
			});
	});
var _user$project$DashboardView$mainPageViewMobile = function (model) {
	var searchProgress = model.searchProgress;
	var searchBox = model.mobileSearchVisible ? A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityMobile'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em 0.1em 0.5em 0.1em'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid grey'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '1.8em'},
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$span,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSubmitSearch),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'search'),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnInputSearch),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em 0.1em 0.3em 0.1em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '30vw'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$placeholder('Search'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$value(searchProgress.typedSearch),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var user = model.loggedInMember;
	var mainPage = function () {
		var _p1 = model.dashboardMobilePage;
		switch (_p1.ctor) {
			case 'MobileHomePage':
				return A2(_user$project$DashboardView$mobileDashboardHomePageView, false, model);
			case 'MobileProfilePage':
				return user.isOrganization ? _user$project$DashboardView$mobileDashboardProfilePageViewSmall(model) : _user$project$DashboardView$mobileDashboardInnovatorProfilePageViewSmall(model);
			case 'MobileSettingsPage':
				return _user$project$SettingsView$mobileDashboardSettingsPageView(model);
			case 'MobilePostAnIdeaPage':
				return _user$project$IdeaPageView$newIdeaPageMobileView(model);
			case 'MobileSearchPage':
				return _user$project$SearchedPageView$searchedPageViewMobile(model);
			case 'MobileSeeOtherInnovatorPage':
				return A2(_user$project$DashboardView$seeOtherInnovatorProfilePageViewMobile, model, model.seeOtherInnovator);
			case 'MobileSeeOtherOrganizationPage':
				return A2(_user$project$DashboardView$seeOtherOrganizationProfilePageViewMobile, model, model.seeOtherOrganization);
			case 'MobileViewIdeaPage':
				return _user$project$IdeaPageView$viewIdeaPage(model);
			case 'MobileViewFullIdeaPage':
				return _user$project$IdeaPageView$viewFullIdeaPageMobile(model);
			default:
				return _user$project$NDAsPageView$ndasPageViewMobile(model);
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityMobile'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: searchBox,
			_1: {
				ctor: '::',
				_0: mainPage,
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$DashboardView$mainPageViewTab = function (model) {
	var searchProgress = model.searchProgress;
	var searchBox = model.mobileSearchVisible ? A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityTab'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em 0.1em 0.5em 0.1em'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid grey'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '1.8em'},
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$span,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSubmitSearch),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-icon', 'search'),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnInputSearch),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em 0.1em 0.3em 0.1em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '30vw'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'grey'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$placeholder('Search'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$value(searchProgress.typedSearch),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var user = model.loggedInMember;
	var mainPage = function () {
		var _p2 = model.dashboardMobilePage;
		switch (_p2.ctor) {
			case 'MobileHomePage':
				return A2(_user$project$DashboardView$mobileDashboardHomePageView, true, model);
			case 'MobileProfilePage':
				return user.isOrganization ? _user$project$DashboardView$mobileDashboardProfilePageView(model) : _user$project$DashboardView$mobileDashboardInnovatorProfilePageView(model);
			case 'MobileSettingsPage':
				return _user$project$SettingsView$tabDashboardSettingsPageView(model);
			case 'MobilePostAnIdeaPage':
				return _user$project$IdeaPageView$newIdeaPageTabView(model);
			case 'MobileSearchPage':
				return _user$project$SearchedPageView$searchedPageViewTab(model);
			case 'MobileSeeOtherInnovatorPage':
				return A2(_user$project$DashboardView$seeOtherInnovatorProfilePageViewTab, model, model.seeOtherInnovator);
			case 'MobileSeeOtherOrganizationPage':
				return A2(_user$project$DashboardView$seeOtherOrganizationProfilePageViewTab, model, model.seeOtherOrganization);
			case 'MobileViewIdeaPage':
				return _user$project$IdeaPageView$viewIdeaPage(model);
			case 'MobileViewFullIdeaPage':
				return _user$project$IdeaPageView$viewFullIdeaPageMobile(model);
			default:
				return _user$project$NDAsPageView$ndasPageViewTab(model);
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityTab'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: searchBox,
			_1: {
				ctor: '::',
				_0: mainPage,
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$DashboardView$dashboardView = function (model) {
	var loggedMember = model.loggedInMember;
	var mainPage = function () {
		var _p3 = model.desktopPage;
		switch (_p3.ctor) {
			case 'HomePage':
				return _user$project$DashboardView$leftAndMiddleColumnsView(model);
			case 'NewsfeedPage':
				return _user$project$DashboardView$leftAndMiddleColumnsView(model);
			case 'ProfilePage':
				return loggedMember.isOrganization ? _user$project$DashboardView$profilePageView(model) : _user$project$DashboardView$innovatorProfilePageView(model);
			case 'NewIdeaPage':
				return _user$project$IdeaPageView$newIdeaPageView(model);
			case 'SettingsPage':
				return loggedMember.isOrganization ? _user$project$SettingsView$dashboardOrganizationSettingsPageView(model) : _user$project$SettingsView$dashboardSettingsPageView(model);
			case 'TariffPlansPage':
				return loggedMember.isOrganization ? _user$project$SettingsView$dashboardOrganizationTariffPlansPageView(model) : _user$project$SettingsView$dashboardTariffPlansPageView(model);
			case 'SearchPage':
				return _user$project$SearchedPageView$searchedPageView(model);
			case 'SeeOtherInnovatorPage':
				return A2(_user$project$DashboardView$seeOtherInnovatorProfilePageView, model, model.seeOtherInnovator);
			case 'SeeOtherOrganizationPage':
				return A2(_user$project$DashboardView$seeOtherOrganizationProfilePageView, model, model.seeOtherOrganization);
			case 'ViewIdeaPage':
				return _user$project$IdeaPageView$viewIdeaPage(model);
			case 'ViewFullIdeaPage':
				return _user$project$IdeaPageView$viewFullIdeaPage(model);
			default:
				return _user$project$NDAsPageView$ndasPageView(model);
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'background', _1: 'white'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _user$project$DashboardView$headerComplexView(model),
			_1: {
				ctor: '::',
				_0: _user$project$DashboardView$headerComplexViewTab(model),
				_1: {
					ctor: '::',
					_0: _user$project$DashboardView$headerComplexViewMobile(model),
					_1: {
						ctor: '::',
						_0: _user$project$DashboardView$mainPageViewTab(model),
						_1: {
							ctor: '::',
							_0: _user$project$DashboardView$mainPageViewMobile(model),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('responsiveVisibility'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src('/images/header_dashboard.png'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: mainPage,
											_1: {
												ctor: '::',
												_0: _user$project$ChatWindowView$chatWindowView(model),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('uk-width-1-5 responsiveVisibility'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid red'},
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _user$project$Suggestions$rightColumnView(model),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		});
};

var _user$project$FaqView$faqViewMobile = function (visible) {
	var vis = visible ? {ctor: '_Tuple2', _0: 'display', _1: 'initial'} : {ctor: '_Tuple2', _0: 'display', _1: 'none'};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('faq'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityMobile'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: vis,
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'left', _1: '10vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'bottom', _1: '10px'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('FAQ'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Tons of innovative ideas are born every day, even every hour, but are quite often not put into action as the right users in need of them are not easy to be found, or idea generators do not know how or whom to approach. On the other hand, there are a lot of companies/organizations seeking/looking for fresh, innovative ideas or solutions, but have limited resources and/or do not know where to find them.'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$FaqView$faqViewTab = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$id('faq-t'),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityTab'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '62%'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h3,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '2em'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('FAQ'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '5vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5vw'},
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Tons of innovative ideas are born every day, even every hour, but are quite often not put into action as the right users in need of them are not easy to be found, or idea generators do not know how or whom to approach. On the other hand, there are a lot of companies/organizations seeking/looking for fresh, innovative ideas or solutions, but have limited resources and/or do not know where to find them.'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _user$project$FaqView$faqView = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$id('faq'),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibility'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '62%'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h3,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '2em'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('FAQ'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '15vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '15vw'},
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Tons of innovative ideas are born every day, even every hour, but are quite often not put into action as the right users in need of them are not easy to be found, or idea generators do not know how or whom to approach. On the other hand, there are a lot of companies/organizations seeking/looking for fresh, innovative ideas or solutions, but have limited resources and/or do not know where to find them.'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});

var _user$project$FooterView$footerViewTab = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityTab uk-column-1-2'),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '20em'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '15em'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$ul,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '0.5em'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Follow Us:'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$li,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '0.5em'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href('https://www.facebook.com/'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$target('_blank'),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Facebook'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$li,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '0.5em'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href('https://www.twitter.com/'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$target('_blank'),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Twitter'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$li,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href('https://www.linkedin.com/'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$target('_blank'),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('LinkedIn'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('headerLogo'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'x-small'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.1em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '29em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('@ 2018-2019 Innovities. All Rights Reserved. Terms of Service.'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _user$project$FooterView$footerView = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('responsiveVisibility uk-column-1-2'),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '20em'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '15em'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$ul,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '0.5em'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Follow Us:'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$li,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '0.5em'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href('https://www.facebook.com/'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$target('_blank'),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Facebook'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$li,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '0.5em'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href('https://www.twitter.com/'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$target('_blank'),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Twitter'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$li,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href('https://www.linkedin.com/'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$target('_blank'),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('LinkedIn'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('headerLogo'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'x-small'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.1em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '29em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('@ 2018-2019 Innovities. All Rights Reserved. Terms of Service.'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		}
	});

var _user$project$IntroInfo$getStartedMobileView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-center'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnMobileRegisterIdeaGeneratorViewOpen),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-width-1-4'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1.5em'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '20%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: '40%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '10%'},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src('/images/head.png'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(_user$project$LangLocals$getLocal, 'Idea Generator', model)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnMobileRegisterCompanyViewOpen),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-width-1-4'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1.5em'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '24%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'height', _1: '40%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '21%'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src('/images/case.png'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_user$project$LangLocals$getLocal, 'Company', model)),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$IntroInfo$getStartedView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-center'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnIdeaGeneratorRegistrationOpen),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-width-1-4'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1.5em'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '20%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: '40%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '10%'},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src('/images/head.png'),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(_user$project$LangLocals$getLocal, 'Idea Generator', model)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnCompanyRegistrationOpen),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-width-1-4'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1.5em'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '24%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'height', _1: '40%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '21%'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$src('/images/case.png'),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_user$project$LangLocals$getLocal, 'Company', model)),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$IntroInfo$loginViewMobile = function (model) {
	var loggingInData = model.loggingInMember;
	var loggingInError = loggingInData.loginError;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'bottom', _1: '60px'},
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnLoggingInMemberUsernameInput),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '1em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$placeholder(
								A2(_user$project$LangLocals$getLocal, 'Username', model)),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnLoggingInMemberPasswordInput),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.3em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$placeholder(
									A2(_user$project$LangLocals$getLocal, 'Password', model)),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.1em'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(loggingInError),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnLoggingInMemberLogin),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('startButtonsStyle'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '4vw'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'width', _1: '10em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'background', _1: 'cornflowerblue'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(_user$project$LangLocals$getLocal, 'LOG IN', model)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};
var _user$project$IntroInfo$loginView = function (model) {
	var loggingInData = model.loggingInMember;
	var loggingInError = loggingInData.loginError;
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnLoggingInMemberUsernameInput),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$placeholder(
								A2(_user$project$LangLocals$getLocal, 'Username', model)),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnLoggingInMemberPasswordInput),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.3em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.5em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$placeholder(
										A2(_user$project$LangLocals$getLocal, 'Password', model)),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.1em'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(loggingInError),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnLoggingInMemberLogin),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('startButtonsStyle'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '2em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '10em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'background', _1: 'cornflowerblue'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_user$project$LangLocals$getLocal, 'LOG IN', model)),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$IntroInfo$defaultView = function (model) {
	var loginOpened = model.loginOpened;
	var getStartedOpened = model.getStartedOpened;
	var getStartedButtonStyle = getStartedOpened ? _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'background', _1: 'grey'},
			_1: {ctor: '[]'}
		}) : _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'background', _1: 'orange'},
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityStyleInverse'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: loginOpened ? A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{ctor: '[]'}) : A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnGetStartedButtonsSwitch),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('startButtonsStyle'),
						_1: {
							ctor: '::',
							_0: getStartedButtonStyle,
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(_user$project$LangLocals$getLocal, 'GET STARTED!', model)),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: (getStartedOpened && (!loginOpened)) ? _user$project$IntroInfo$getStartedView(model) : A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: loginOpened ? _user$project$IntroInfo$loginView(model) : A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnLoginButtonSwitch),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('startButtonsStyle'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'background', _1: 'cornflowerblue'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(_user$project$LangLocals$getLocal, 'LOG IN', model)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$IntroInfo$countriesOptionItemMobile = F2(
	function (model, country) {
		var lang = model.language;
		var countryText = function () {
			var _p0 = lang;
			if (_p0.ctor === 'Eng') {
				return country;
			} else {
				return _user$project$CountriesList$getArmLocal(country);
			}
		}();
		return A2(
			_elm_lang$html$Html$option,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$value(country),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(countryText),
				_1: {ctor: '[]'}
			});
	});
var _user$project$IntroInfo$countriesOptionsListMobile = function (model) {
	return A2(
		_elm_lang$core$List$map,
		_user$project$IntroInfo$countriesOptionItemMobile(model),
		_user$project$CountriesList$countries);
};
var _user$project$IntroInfo$registerIdeaGeneratorView = F2(
	function (model, registerError) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '8%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '16%'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('/images/head.png'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '3%'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(_user$project$LangLocals$getLocal, 'Idea Generator', model)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-2'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$input,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnInnovatorRegistrationNameInput),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$placeholder(
															A2(_user$project$LangLocals$getLocal, 'Name Surname', model)),
														_1: {ctor: '[]'}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$input,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnInnovatorRegistrationPasswordInput),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$placeholder(
																	A2(_user$project$LangLocals$getLocal, 'Password', model)),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$input,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnInnovatorRegistrationEmailInput),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$placeholder(
																A2(_user$project$LangLocals$getLocal, 'E-mail', model)),
															_1: {ctor: '[]'}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$select,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnInnovatorRegistrationCountryInput),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'width', _1: '90%'},
																			_1: {ctor: '[]'}
																		}
																	}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
																_1: {ctor: '[]'}
															}
														}
													},
													_user$project$IntroInfo$countriesOptionsListMobile(model)),
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$label,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnInnovatorRegistrationTSAgreementCheck),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$input,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.3em'},
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnInnovatorRegistrationTSAgreementCheck),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(_user$project$LangLocals$getLocal, 'I agree to the Terms of Service and understand the Privacy statement.', model)),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$label,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnInnovatorRegistrationReceiveNewletterCheck),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '5.5em'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$input,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.3em'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnInnovatorRegistrationReceiveNewletterCheck),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Please email me your free weekly Innovation Newsletter.'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.3em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.3em'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(registerError),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$button,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnInnovatorRegistrationSubmit),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle uk-margin-small-top'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding', _1: '2.5em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.3em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '0.3em'},
																		_1: {ctor: '[]'}
																	}
																}
															}),
														_1: {ctor: '[]'}
													}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(_user$project$LangLocals$getLocal, 'Sign-Up', model)),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
	});
var _user$project$IntroInfo$registerIdeaGeneratorMobileView = F2(
	function (model, registerError) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'bottom', _1: '10px'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-width-1-5 uk-margin-medium-top'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.3em'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '28%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'height', _1: '16%'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$src('/images/head.png'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '3%'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(_user$project$LangLocals$getLocal, 'Idea Generator', model)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-width-3-5 uk-margin-small-right'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnInnovatorRegistrationNameInput),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$placeholder(
												A2(_user$project$LangLocals$getLocal, 'Name Surname', model)),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnInnovatorRegistrationPasswordInput),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$placeholder(
														A2(_user$project$LangLocals$getLocal, 'Password', model)),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$input,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnInnovatorRegistrationEmailInput),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$placeholder(
														A2(_user$project$LangLocals$getLocal, 'E-mail', model)),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$select,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnInnovatorRegistrationCountryInput),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
														_1: {ctor: '[]'}
													}
												}
											},
											_user$project$IntroInfo$countriesOptionsListMobile(model)),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$label,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnInnovatorRegistrationTSAgreementCheck),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$input,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.3em'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnInnovatorRegistrationTSAgreementCheck),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(
																	A2(_user$project$LangLocals$getLocal, 'I agree to the Terms of Service and understand the Privacy statement.', model)),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$label,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnInnovatorRegistrationReceiveNewletterCheck),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$input,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.3em'},
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$span,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnInnovatorRegistrationReceiveNewletterCheck),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.5em'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Please email me your free weekly Innovation Newsletter.'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.3em'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.3em'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(registerError),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-margin-small-top'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$button,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnInnovatorRegistrationSubmit),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('uk-width-2-3 subscribeButtonStyle'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.3em'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'padding', _1: '2.5em'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.3em'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '0.3em'},
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(
																			A2(_user$project$LangLocals$getLocal, 'Sign-Up', model)),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$IntroInfo$registerCompanyMobileView = F2(
	function (model, registerError) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('uk-flex'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'bottom', _1: '10px'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-width-1-5 uk-margin-medium-top'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '28%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'height', _1: '16%'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$src('/images/case.png'),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '3%'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(_user$project$LangLocals$getLocal, 'Company', model)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-width-3-5 uk-margin-small-right'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnCompanyRegistrationNameInput),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$placeholder(
												A2(_user$project$LangLocals$getLocal, 'Company Name', model)),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnCompanyRegistrationPasswordInput),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$placeholder(
														A2(_user$project$LangLocals$getLocal, 'Password', model)),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$input,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnCompanyRegistrationEmailInput),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$placeholder(
														A2(_user$project$LangLocals$getLocal, 'E-mail', model)),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$select,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnCompanyRegistrationCountryInput),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
														_1: {ctor: '[]'}
													}
												}
											},
											_user$project$IntroInfo$countriesOptionsListMobile(model)),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$label,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnCompanyRegistrationTSAgreementCheck),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$input,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.3em'},
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnCompanyRegistrationTSAgreementCheck),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(
																	A2(_user$project$LangLocals$getLocal, 'I agree to the Terms of Service and understand the Privacy statement.', model)),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$label,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnCompanyRegistrationReceiveNewletterCheck),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '0'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$input,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.3em'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$span,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnCompanyRegistrationReceiveNewletterCheck),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Please email me your free weekly Innovation Newsletter.'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.3em'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.3em'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(registerError),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-margin-small-top'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$button,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnCompanyRegistrationSubmit),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('uk-width-2-3 subscribeButtonStyle'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.3em'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'padding', _1: '2.5em'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.3em'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '0.3em'},
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(
																			A2(_user$project$LangLocals$getLocal, 'Sign-Up', model)),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$IntroInfo$registerCompanyView = F2(
	function (model, registerError) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '12%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '20%'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('/images/case.png'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '3%'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(_user$project$LangLocals$getLocal, 'Company', model)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-2'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$input,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnCompanyRegistrationNameInput),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$placeholder(
															A2(_user$project$LangLocals$getLocal, 'Company Name', model)),
														_1: {ctor: '[]'}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$input,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnCompanyRegistrationPasswordInput),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$placeholder(
																	A2(_user$project$LangLocals$getLocal, 'Password', model)),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$input,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnCompanyRegistrationEmailInput),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$placeholder(
																A2(_user$project$LangLocals$getLocal, 'E-mail', model)),
															_1: {ctor: '[]'}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$select,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnCompanyRegistrationCountryInput),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'cornflowerblue'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.2em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'width', _1: '90%'},
																			_1: {ctor: '[]'}
																		}
																	}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
																_1: {ctor: '[]'}
															}
														}
													},
													_user$project$IntroInfo$countriesOptionsListMobile(model)),
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$label,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnCompanyRegistrationTSAgreementCheck),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$input,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.3em'},
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnCompanyRegistrationTSAgreementCheck),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(_user$project$LangLocals$getLocal, 'I agree to the Terms of Service and understand the Privacy statement.', model)),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$label,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnCompanyRegistrationReceiveNewletterCheck),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '5.5em'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$input,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.3em'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnCompanyRegistrationReceiveNewletterCheck),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Please email me your free weekly Innovation Newsletter.'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.3em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.3em'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(registerError),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$button,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnCompanyRegistrationSubmit),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle uk-margin-small-top'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding', _1: '2.5em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.3em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '0.3em'},
																		_1: {ctor: '[]'}
																	}
																}
															}),
														_1: {ctor: '[]'}
													}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(_user$project$LangLocals$getLocal, 'Sign-Up', model)),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
	});
var _user$project$IntroInfo$phoneButtonsView = function (model) {
	var loginOpened = model.loginOpened;
	var getStartedOpened = model.mobileGetStartedOpened;
	var getStartedButtonStyle = getStartedOpened ? _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'background', _1: 'grey'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '15vh'},
				_1: {ctor: '[]'}
			}
		}) : _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'background', _1: 'orange'},
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityStyle uk-flex uk-flex-column'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '8vw'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'bottom', _1: '10px'},
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: loginOpened ? A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{ctor: '[]'}) : A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnMobileGetStartedViewOpen),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-right uk-margin-small-bottom startButtonsStyle'),
							_1: {
								ctor: '::',
								_0: getStartedButtonStyle,
								_1: {ctor: '[]'}
							}
						}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(_user$project$LangLocals$getLocal, 'GET STARTED!', model)),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: (getStartedOpened && (!loginOpened)) ? _user$project$IntroInfo$getStartedMobileView(model) : A2(
					_elm_lang$html$Html$span,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: loginOpened ? _user$project$IntroInfo$loginViewMobile(model) : A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnLoginButtonSwitch),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-right startButtonsStyle'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'background', _1: 'cornflowerblue'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(_user$project$LangLocals$getLocal, 'LOG IN', model)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$IntroInfo$infoView = function (model) {
	var currentUser = model.loggedInMember;
	var mobileLoginPanelView = _elm_lang$core$Native_Utils.eq(currentUser.id, 0) ? _user$project$IntroInfo$phoneButtonsView(model) : A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityMobile'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '-25vw'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'bottom', _1: '10px'},
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h5,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(currentUser.email),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchToDashboard),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'orange'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Dashboard'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
	var innovatorRegData = model.innovatorUnderRegistration;
	var innovatorRegError = innovatorRegData.registrationError;
	var companyRegData = model.companyUnderRegistration;
	var companyRegError = companyRegData.registrationError;
	var mobileGeneralDefaultView = model.mobileDefaultView ? {ctor: '_Tuple2', _0: 'display', _1: 'initial'} : {ctor: '_Tuple2', _0: 'display', _1: 'none'};
	var mobileRegisterIdeaGeneratorViewVisible = model.mobileRegisterIdeaGeneratorOpened;
	var mobileRegisterCompanyViewVisible = model.mobileRegisterCompanyOpened;
	var defaultViewVisible = ((!model.mobileRegisterCompanyOpened) && (!model.mobileRegisterIdeaGeneratorOpened)) ? true : false;
	var phoneLoginOpened = model.loginOpened;
	var phoneGetStartedViewOpened = model.mobileGetStartedOpened;
	var par = ((!phoneGetStartedViewOpened) && (!phoneLoginOpened)) ? A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('responsiveHideMobile introInfoWidthResponsive'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'bottom', _1: '17vh'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'left', _1: '0'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '1em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '90vw'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2.8em'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Innovities is a social platform where innovative ideas are found by those who need them.'),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$p,
		{ctor: '[]'},
		{ctor: '[]'});
	var registerIdeaGeneratorOpened = model.registerIdeaGeneratorOpened;
	var registerCompanyOpened = model.registerCompanyOpened;
	var loginPanelView = _elm_lang$core$Native_Utils.eq(currentUser.id, 0) ? A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-width-1-3'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: registerCompanyOpened ? A2(_user$project$IntroInfo$registerCompanyView, model, companyRegError) : (registerIdeaGeneratorOpened ? A2(_user$project$IntroInfo$registerIdeaGeneratorView, model, innovatorRegError) : _user$project$IntroInfo$defaultView(model)),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-width-1-3 responsiveVisibilityNotMobile'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h4,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'font-style', _1: 'italic'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(currentUser.email),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSwitchToDashboard),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: 'orange'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Dashboard'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: mobileGeneralDefaultView,
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-middle'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-width-2-3'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h1,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('responsiveHide marginTopResponsive headerInfoStyleResponsive'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '0.5em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('INNOVITIES WE TRUST'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: (phoneLoginOpened || (mobileRegisterCompanyViewVisible || mobileRegisterIdeaGeneratorViewVisible)) ? A2(
									_elm_lang$html$Html$span,
									{ctor: '[]'},
									{ctor: '[]'}) : A2(
									_elm_lang$html$Html$h1,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('responsiveHideMobile marginTopResponsive headerInfoStyleResponsive'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '0.5em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('INNOVITIES WE TRUST'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: par,
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('responsiveHide introInfoWidthResponsive'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '1em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2.8em'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(_user$project$LangLocals$getLocal, 'Innovities is a social platform where innovative ideas are found by those who need them.', model)),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: loginPanelView,
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: defaultViewVisible ? mobileLoginPanelView : (mobileRegisterCompanyViewVisible ? A2(_user$project$IntroInfo$registerCompanyMobileView, model, companyRegError) : (mobileRegisterIdeaGeneratorViewVisible ? A2(_user$project$IntroInfo$registerIdeaGeneratorMobileView, model, innovatorRegError) : A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{ctor: '[]'}))),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$IntroInfo$mobileMenuScreenView = function (model) {
	var bgColor = model.mobilePricingToggleOpen ? {ctor: '_Tuple2', _0: 'background-color', _1: 'rgba(192,192,192,0.8)'} : {ctor: '_Tuple2', _0: 'background-color', _1: 'rgba(119,136,153,0.8)'};
	var toggleVisible = model.mobilePricingToggleOpen ? {ctor: '_Tuple2', _0: 'display', _1: 'initial'} : {ctor: '_Tuple2', _0: 'display', _1: 'none'};
	var menuVisible = model.mobileMenuView ? {ctor: '_Tuple2', _0: 'display', _1: 'block'} : {ctor: '_Tuple2', _0: 'display', _1: 'none'};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: menuVisible,
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'visibility', _1: 'hidden'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('par'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '8vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '1em'},
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href('#innovators-m'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnMobileIdeaGeneratorsViewOpen),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.8em 0'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'rgba(119,136,153,0.8)'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(_user$project$LangLocals$getLocal, 'Idea generators', model)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '8vw'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '1em'},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href('#organizations-m'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnMobileOrganizationsViewOpen),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.8em 0'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'rgba(119,136,153,0.8)'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(_user$project$LangLocals$getLocal, 'Organizations', model)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '8vw'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href('#tarrif-plans-m'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnMobileTarrifPlansViewOpen),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.8em 0'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'rgba(119,136,153,0.8)'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(_user$project$LangLocals$getLocal, 'Pricing ', model)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '8vw'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '1em'},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href('#about-us-m'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnMobileAboutUsViewOpen),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.8em 0'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'rgba(119,136,153,0.8)'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_user$project$LangLocals$getLocal, 'About Us', model)),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '8vw'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '1em'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href('#contacts-m'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnMobileContactUsViewOpen),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$button,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.8em 0'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'rgba(119,136,153,0.8)'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(_user$project$LangLocals$getLocal, 'Contact', model)),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '8vw'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '1em'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href('#faq-m'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnMobileFaqViewOpen),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$button,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.8em 0'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'border', _1: 'none'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'rgba(119,136,153,0.8)'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('FAQ'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		});
};

var _user$project$LandingPageView$confirmDialog = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$id('confirm-dialog-id'),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-flex-top'),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-modal', ''),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('uk-width-1-1@s uk-width-1-2@m uk-width-1-4@l uk-modal-dialog uk-modal-body uk-margin-auto-vertical'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h3,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('ՇՆՈՐՀԱԿԱԼՈւԹՅՈւՆ՝'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('մեր հարթակում գրանցվելու համար: Մենք լրացուցիչ կկապվենք Ձեզ հետ և կտեղեկացնենք հետագա քայլերի մասին:'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '5%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Եթե ունեք հարցեր կամ առաջարկություններ, կարող եք կապվել մեզ հետ '),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href('https://www.facebook.com/innovities/'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$target('_blank'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('facebook'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text('-յան էջի միջոցով:'),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Հետևեք մեզ՝'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href('https://www.facebook.com/innovities/'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$target('_blank'),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline'},
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$img,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'height', _1: '10%'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '33%'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.3em'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$src('/images/fb_skyblue.png'),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$href('https://twitter.com/innovities'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$target('_blank'),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline'},
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$img,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'height', _1: '10%'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.3em'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$src('/images/twitter_skyblue.png'),
																		_1: {ctor: '[]'}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$href('https://www.linkedin.com/company/innovities/'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$target('_blank'),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline'},
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$img,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'width', _1: '10%'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'height', _1: '10%'},
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$src('/images/in_skyblue.png'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{ctor: '[]'}),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-close', ''),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('uk-modal-close-default'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _user$project$LandingPageView$premiumPlanInfoDialog = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$id('premium-info-dialog-id'),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-flex-top'),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-modal', ''),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'background', _1: 'rgb(62,63,77)'},
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('uk-width-1-1@s uk-width-1-2@m uk-width-1-3@l uk-modal-dialog uk-modal-body uk-margin-auto-vertical'),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'border', _1: '0.2em solid gold'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h4,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'background', _1: 'rgb(62,63,77)'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '25%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Պրեմիում'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html_Attributes$property,
												'innerHTML',
												_elm_lang$core$Json_Encode$string('&#1423;')),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('10,500'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('/ամս'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.5em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html_Attributes$property,
													'innerHTML',
													_elm_lang$core$Json_Encode$string('&#1423;')),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('115,500'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('/տար*'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.5em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('*խնայեք '),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html_Attributes$property,
																'innerHTML',
																_elm_lang$core$Json_Encode$string('&#1423;')),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('10,500'),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-2'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Գաղափարների ներմուծման քանակ'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('8'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$p,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Հաղորդագրություններ ստանալու քանակ'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$p,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Անսահմանափակ'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Հաղորդագրություններ ուղարկելու քանակ'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$p,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('8'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$p,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '1em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Տարածաշրջան'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$p,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.5em'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Բոլոր երկրները'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$button,
												{
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-close', ''),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-modal-close-default'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	});
var _user$project$LandingPageView$premiumPlanInfoDialogMobile = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$id('premium-info-dialog-mobile-id'),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-flex-top'),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-modal', ''),
				_1: {ctor: '[]'}
			}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'background', _1: 'rgb(62,63,77)'},
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('uk-width-1-1@s uk-width-1-2@m uk-width-1-3@l uk-modal-dialog uk-modal-body uk-margin-auto-vertical'),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'border', _1: '0.2em solid gold'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h4,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'background', _1: 'rgb(62,63,77)'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '25%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Պրեմիում'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html_Attributes$property,
												'innerHTML',
												_elm_lang$core$Json_Encode$string('&#1423;')),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('10,500'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('/ամս'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.5em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html_Attributes$property,
													'innerHTML',
													_elm_lang$core$Json_Encode$string('&#1423;')),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('115,500'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('/տար*'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.5em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '110%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('*խնայեք '),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html_Attributes$property,
																'innerHTML',
																_elm_lang$core$Json_Encode$string('&#1423;')),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('10,500'),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-2'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5em'},
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Գաղափարների ներմուծման քանակ'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('8'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$p,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Հաղորդագրություններ ստանալու քանակ'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$p,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Անսահմանափակ'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '0.5em'},
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Հաղորդագրություններ ուղարկելու քանակ'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$p,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('8'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$p,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '1em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '70%'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Տարածաշրջան'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$p,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.5em'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'skyblue'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Բոլոր երկրները'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$button,
												{
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'uk-close', ''),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-modal-close-default'),
														_1: {ctor: '[]'}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	});
var _user$project$LandingPageView$registerViewMobile = function (model) {
	var inputsVisible = model.landingInputFieldsVisible ? {ctor: '_Tuple2', _0: 'visibility', _1: 'visible'} : {ctor: '_Tuple2', _0: 'visibility', _1: 'hidden'};
	var regError = model.landingPromoRegisterError;
	var ideaError = model.landingShortIdeaError;
	var companyError = model.landingCompanyError;
	var emailError = model.landingEmailError;
	var usernameError = model.landingUsernameError;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-hidden@s'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-2em'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '7%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '12%'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/head.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '3%'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Idea Generator'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnLandingUsernameType),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$placeholder('Օգտատիրոջ անուն*'),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '95%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.05em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.05em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(usernameError),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$input,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnLandingEmailType),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$placeholder('Էլ. հասցե*'),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '95%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.05em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.05em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(emailError),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$input,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnLandingCompanyType),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$placeholder('Նախընտրած կազմակերպություն'),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '95%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.05em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.05em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(companyError),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$textarea,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnLandingShortIdeaType),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$rows(4),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'resize', _1: 'none'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$placeholder('2-3 նախադասությամբ կարող եք գրել Ձեր գաղափարի մասին'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '95%'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.05em'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.05em'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(ideaError),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$button,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnLandingSignUp),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle uk-width-1-1 uk-margin-small-top'),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('ԳՐԱՆՑՎԵԼ'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$p,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '105%'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.05em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.05em'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(regError),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: _user$project$LandingPageView$confirmDialog,
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$LandingPageView$registerViewTab = function (model) {
	var inputsVisible = model.landingInputFieldsVisible ? {ctor: '_Tuple2', _0: 'visibility', _1: 'visible'} : {ctor: '_Tuple2', _0: 'visibility', _1: 'hidden'};
	var regError = model.landingPromoRegisterError;
	var ideaError = model.landingShortIdeaError;
	var companyError = model.landingCompanyError;
	var emailError = model.landingEmailError;
	var usernameError = model.landingUsernameError;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: inputsVisible,
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '5%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '9%'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/head.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '83%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '2%'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Idea Generator'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-2'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column uk-margin-small-right'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$input,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnLandingUsernameType),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'height', _1: '1.8em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$placeholder('Օգտատիրոջ անուն*'),
													_1: {ctor: '[]'}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '95%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.05em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.05em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(usernameError),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$input,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnLandingEmailType),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'height', _1: '1.8em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$placeholder('Էլ. հասցե*'),
														_1: {ctor: '[]'}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '95%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.05em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.05em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(emailError),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnLandingCompanyType),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'height', _1: '1.8em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$placeholder('Կազմակերպություն, որին կցանկանայիք տեսնել մեր կայքում'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '95%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.05em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.05em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(companyError),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$textarea,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnLandingShortIdeaType),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$rows(2),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'resize', _1: 'none'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'overflow', _1: 'hidden'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$placeholder('2-3 նախադասությամբ կարող եք գրել Ձեր գաղափարի մասին'),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '95%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.05em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.05em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(ideaError),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$button,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnLandingSignUp),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle uk-margin-small-top'),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('ԳՐԱՆՑՎԵԼ'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '105%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.05em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.05em'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(regError),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: _user$project$LandingPageView$confirmDialog,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$LandingPageView$registerView = function (model) {
	var inputsVisible = model.landingInputFieldsVisible ? {ctor: '_Tuple2', _0: 'visibility', _1: 'visible'} : {ctor: '_Tuple2', _0: 'visibility', _1: 'hidden'};
	var regError = model.landingPromoRegisterError;
	var ideaError = model.landingShortIdeaError;
	var companyError = model.landingCompanyError;
	var emailError = model.landingEmailError;
	var usernameError = model.landingUsernameError;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: inputsVisible,
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('uk-margin-medium-left'),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '5%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '9%'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('/images/head.png'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '3%'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Idea Generator'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-child-width-1-2'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '0.5%'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$input,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnLandingUsernameType),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$placeholder('Օգտատիրոջ անուն*'),
													_1: {ctor: '[]'}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '95%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.05em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.05em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(usernameError),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$input,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnLandingEmailType),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																	_1: {ctor: '[]'}
																}
															}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$placeholder('Էլ. հասցե*'),
														_1: {ctor: '[]'}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '95%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.05em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.05em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(emailError),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-column'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnLandingCompanyType),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$placeholder('Կազմակերպություն, որին կցանկանայիք տեսնել մեր կայքում'),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '95%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.05em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.05em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(companyError),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$textarea,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onInput(_user$project$Messages$OnLandingShortIdeaType),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$rows(4),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'resize', _1: 'none'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'black'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('uk-margin-small-top'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$placeholder('2-3 նախադասությամբ կարող եք գրել Ձեր գաղափարի մասին'),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '95%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.05em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.05em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(ideaError),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$button,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnLandingSignUp),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle uk-margin-small-top'),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('ԳՐԱՆՑՎԵԼ'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '105%'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.05em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '-0.05em'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(regError),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: _user$project$LandingPageView$confirmDialog,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$LandingPageView$motoDesc = function (displayStyle) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: displayStyle,
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('uk-hidden@m uk-margin-large-right uk-width-1-1@s uk-width-3-5@m uk-width-1-2@l'),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '200%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '0.5em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('INNOVITIES'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '200%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '0.5em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('WE TRUST'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('responsiveRightMargin'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2.1em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '75%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
													_1: {ctor: '[]'}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Innovities-ը սոցիալական հարթակ է, որտեղ ցանկացած օգտատեր հնարավորություն ունի իր գաղափարներն առաջարկել կազմակերպություններին, որոնք փնտրում են նորարական լուծումներ իրենց բիզնեսի համար:'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('responsiveRightMargin'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.5em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2.1em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '75%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Գրանցվելուց կարող եք նշել, թե որ կազմակերպությանը կցանկանայիք տեսնել մեր կայքում, և մենք կանենք հնարավոր ամեն ինչ՝ նրանց ներգրավելու համար: Նաև, ցանկության դեպքում, կարող եք համառոտ գրել Ձեր գաղափարի մասին:'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('responsiveRightMargin'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.5em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2.1em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '75%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Եթե ունեք հարցեր կամ առաջարկություններ՝'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('responsiveRightMargin'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.5em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2.1em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '75%'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('կարող եք կապվել մեզ հետ '),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$href('https://www.facebook.com/innovities/'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$target('_blank'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('facebook'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html$text('-յան էջի միջոցով:'),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _user$project$LandingPageView$premiumPlanInfoDialogMobile,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$LandingPageView$motoDescDesktop = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('uk-visible@m uk-margin-large-right uk-width-1-1@s uk-width-3-5@m uk-width-1-2@l'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$p,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '250%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '0.5em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('INNOVITIES'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '250%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '0.5em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.5em'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('WE TRUST'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('responsiveRightMargin'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2.1em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Innovities-ը սոցիալական հարթակ է, որտեղ ցանկացած օգտատեր հնարավորություն ունի իր գաղափարներն առաջարկել կազմակերպություններին, որոնք փնտրում են նորարական լուծումներ իրենց բիզնեսի համար:'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('responsiveRightMargin'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.5em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2.1em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
													_1: {ctor: '[]'}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Գրանցվելուց կարող եք նշել, թե որ կազմակերպությանը կցանկանայիք տեսնել մեր կայքում, և մենք կանենք հնարավոր ամեն ինչ՝ նրանց ներգրավելու համար: Նաև, ցանկության դեպքում, կարող եք համառոտ գրել Ձեր գաղափարի մասին:'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('responsiveRightMargin'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.5em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2.1em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Եթե ունեք հարցեր կամ առաջարկություններ՝'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('responsiveRightMargin'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.5em'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2.1em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('կարող եք կապվել մեզ հետ '),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href('https://www.facebook.com/innovities/'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$target('_blank'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('facebook'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text('-յան էջի միջոցով:'),
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: _user$project$LandingPageView$premiumPlanInfoDialog,
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _user$project$LandingPageView$landingView = function (model) {
	var mobileSignUpVisible = model.landingSignUpMobileVisible;
	var vis = mobileSignUpVisible ? {ctor: '_Tuple2', _0: 'visibility', _1: 'visible'} : {ctor: '_Tuple2', _0: 'visibility', _1: 'hidden'};
	var nonVis = (!mobileSignUpVisible) ? {ctor: '_Tuple2', _0: 'visibility', _1: 'visible'} : {ctor: '_Tuple2', _0: 'visibility', _1: 'hidden'};
	var dis = (!mobileSignUpVisible) ? {ctor: '_Tuple2', _0: 'visibility', _1: 'visible'} : {ctor: '_Tuple2', _0: 'display', _1: 'none'};
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('headerLogo'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-2em'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('uk-flex uk-flex-middle'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '3em'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _user$project$LandingPageView$motoDesc(dis),
						_1: {
							ctor: '::',
							_0: _user$project$LandingPageView$motoDescDesktop,
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-margin-large-left@m uk-width-1-2@m uk-visible@m'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _user$project$LandingPageView$registerView(model),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('uk-width-1-1@mini uk-flex uk-flex-center uk-hidden@m'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('uk-width-2-3@s uk-visible@s'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _user$project$LandingPageView$registerViewTab(model),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'bottom', _1: '5px'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'left', _1: '0'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '10vw'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10vw'},
															_1: {
																ctor: '::',
																_0: dis,
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnLandingSignUpMobileClick),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('uk-margin-large-left@s uk-hidden@s uk-width-1-1@s subscribeButtonStyle uk-margin-small-top'),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('ԳՐԱՆՑՎԵԼ'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: vis,
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _user$project$LandingPageView$registerViewMobile(model),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};

var _user$project$TarrifPlans$innovatorsTarrifListItemUnmargined = F9(
	function (model, label, mp, yp, sp, ideas, organizations, region, subscriptionMsg) {
		var lang = model.language;
		var currency = function () {
			var _p0 = lang;
			if (_p0.ctor === 'Arm') {
				return 'D';
			} else {
				return '$';
			}
		}();
		var month = function () {
			var _p1 = lang;
			if (_p1.ctor === 'Arm') {
				return '/ամիս';
			} else {
				return '/mth';
			}
		}();
		var year = function () {
			var _p2 = lang;
			if (_p2.ctor === 'Arm') {
				return '/տարի*';
			} else {
				return '/yr*';
			}
		}();
		var save = function () {
			var _p3 = lang;
			if (_p3.ctor === 'Arm') {
				return '*խնայեք D ';
			} else {
				return '*save $';
			}
		}();
		var fontSize = function () {
			var _p4 = lang;
			if (_p4.ctor === 'Arm') {
				return {ctor: '_Tuple2', _0: 'font-size', _1: '100%'};
			} else {
				return {ctor: '_Tuple2', _0: 'font-size', _1: '120%'};
			}
		}();
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '37vw'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h4,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedTitle'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5vw'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(label),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: fontSize,
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											currency,
											A2(_elm_lang$core$Basics_ops['++'], mp, month))),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: fontSize,
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(
												_elm_lang$core$Basics_ops['++'],
												currency,
												A2(_elm_lang$core$Basics_ops['++'], yp, year))),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: fontSize,
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_elm_lang$core$Basics_ops['++'], save, sp)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Ideas'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														A2(_elm_lang$core$Basics_ops['++'], 'Up to ', ideas)),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Connect to'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																A2(_elm_lang$core$Basics_ops['++'], organizations, ' organizations')),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Region'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(region),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$button,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(subscriptionMsg),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Subscribe'),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$TarrifPlans$innovatorsTarrifListItemMobile = F9(
	function (model, label, mp, yp, sp, ideas, organizations, region, subscriptionMsg) {
		var lang = model.language;
		var currency = function () {
			var _p5 = lang;
			if (_p5.ctor === 'Arm') {
				return 'D';
			} else {
				return '$';
			}
		}();
		var month = function () {
			var _p6 = lang;
			if (_p6.ctor === 'Arm') {
				return '/ամիս';
			} else {
				return '/mth';
			}
		}();
		var year = function () {
			var _p7 = lang;
			if (_p7.ctor === 'Arm') {
				return '/տարի*';
			} else {
				return '/yr*';
			}
		}();
		var save = function () {
			var _p8 = lang;
			if (_p8.ctor === 'Arm') {
				return '*խնայեք D ';
			} else {
				return '*save $';
			}
		}();
		var fontSize = function () {
			var _p9 = lang;
			if (_p9.ctor === 'Arm') {
				return {ctor: '_Tuple2', _0: 'font-size', _1: '100%'};
			} else {
				return {ctor: '_Tuple2', _0: 'font-size', _1: '120%'};
			}
		}();
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1em'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '37vw'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h4,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedTitle'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5vw'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(label),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: fontSize,
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											currency,
											A2(_elm_lang$core$Basics_ops['++'], mp, month))),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: fontSize,
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(
												_elm_lang$core$Basics_ops['++'],
												currency,
												A2(_elm_lang$core$Basics_ops['++'], yp, year))),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: fontSize,
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_elm_lang$core$Basics_ops['++'], save, sp)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Ideas'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														A2(_elm_lang$core$Basics_ops['++'], 'Up to ', ideas)),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Connect to'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																A2(_elm_lang$core$Basics_ops['++'], organizations, ' organizations')),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Region'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(region),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$button,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(subscriptionMsg),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Subscribe'),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$TarrifPlans$innovatorsTarrifListItemTab = F9(
	function (model, label, mp, yp, sp, ideas, organizations, region, subscriptionMsg) {
		var lang = model.language;
		var currency = function () {
			var _p10 = lang;
			if (_p10.ctor === 'Arm') {
				return 'D';
			} else {
				return '$';
			}
		}();
		var month = function () {
			var _p11 = lang;
			if (_p11.ctor === 'Arm') {
				return '/ամիս';
			} else {
				return '/mth';
			}
		}();
		var year = function () {
			var _p12 = lang;
			if (_p12.ctor === 'Arm') {
				return '/տարի*';
			} else {
				return '/yr*';
			}
		}();
		var save = function () {
			var _p13 = lang;
			if (_p13.ctor === 'Arm') {
				return '*խնայեք D ';
			} else {
				return '*save $';
			}
		}();
		var fontSize = function () {
			var _p14 = lang;
			if (_p14.ctor === 'Arm') {
				return {ctor: '_Tuple2', _0: 'font-size', _1: '100%'};
			} else {
				return {ctor: '_Tuple2', _0: 'font-size', _1: '120%'};
			}
		}();
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1em'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '20vw'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h4,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedTitle'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '2vw'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(label),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: fontSize,
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											currency,
											A2(_elm_lang$core$Basics_ops['++'], mp, month))),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: fontSize,
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(
												_elm_lang$core$Basics_ops['++'],
												currency,
												A2(_elm_lang$core$Basics_ops['++'], yp, year))),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: fontSize,
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_elm_lang$core$Basics_ops['++'], save, sp)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Ideas'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														A2(_elm_lang$core$Basics_ops['++'], 'Up to ', ideas)),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Connect to'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																A2(_elm_lang$core$Basics_ops['++'], organizations, ' organizations')),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Region'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(region),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$button,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(subscriptionMsg),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Subscribe'),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$TarrifPlans$innovatorsTarrifListItem = F9(
	function (model, label, mp, yp, sp, ideas, organizations, region, subscriptionMsg) {
		var lang = model.language;
		var currency = function () {
			var _p15 = lang;
			if (_p15.ctor === 'Arm') {
				return 'D';
			} else {
				return '$';
			}
		}();
		var month = function () {
			var _p16 = lang;
			if (_p16.ctor === 'Arm') {
				return '/ամիս';
			} else {
				return '/mth';
			}
		}();
		var year = function () {
			var _p17 = lang;
			if (_p17.ctor === 'Arm') {
				return '/տարի*';
			} else {
				return '/yr*';
			}
		}();
		var save = function () {
			var _p18 = lang;
			if (_p18.ctor === 'Arm') {
				return '*խնայեք D ';
			} else {
				return '*save $';
			}
		}();
		var fontSize = function () {
			var _p19 = lang;
			if (_p19.ctor === 'Arm') {
				return {ctor: '_Tuple2', _0: 'font-size', _1: '100%'};
			} else {
				return {ctor: '_Tuple2', _0: 'font-size', _1: '120%'};
			}
		}();
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '2em'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h4,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedTitle'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(label),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: fontSize,
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											currency,
											A2(_elm_lang$core$Basics_ops['++'], mp, month))),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: fontSize,
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(
												_elm_lang$core$Basics_ops['++'],
												currency,
												A2(_elm_lang$core$Basics_ops['++'], yp, year))),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: fontSize,
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_elm_lang$core$Basics_ops['++'], save, sp)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Ideas'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														A2(_elm_lang$core$Basics_ops['++'], 'Up to ', ideas)),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Connect to'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																A2(_elm_lang$core$Basics_ops['++'], organizations, ' organizations')),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Region'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(region),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$button,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(subscriptionMsg),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Subscribe'),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$TarrifPlans$ideaGeneratorsPlanMobile = function (model) {
	var lang = model.language;
	var bm = function () {
		var _p20 = lang;
		if (_p20.ctor === 'Arm') {
			return '3,790';
		} else {
			return '8';
		}
	}();
	var by = function () {
		var _p21 = lang;
		if (_p21.ctor === 'Arm') {
			return '42,590';
		} else {
			return '88';
		}
	}();
	var bs = function () {
		var _p22 = lang;
		if (_p22.ctor === 'Arm') {
			return '2,890';
		} else {
			return '8';
		}
	}();
	var pm = function () {
		var _p23 = lang;
		if (_p23.ctor === 'Arm') {
			return '6,690';
		} else {
			return '14';
		}
	}();
	var py = function () {
		var _p24 = lang;
		if (_p24.ctor === 'Arm') {
			return '76,590';
		} else {
			return '158';
		}
	}();
	var ps = function () {
		var _p25 = lang;
		if (_p25.ctor === 'Arm') {
			return '3,690';
		} else {
			return '10';
		}
	}();
	var pmm = function () {
		var _p26 = lang;
		if (_p26.ctor === 'Arm') {
			return '10,090';
		} else {
			return '21';
		}
	}();
	var pmy = function () {
		var _p27 = lang;
		if (_p27.ctor === 'Arm') {
			return '115,390';
		} else {
			return '238';
		}
	}();
	var pms = function () {
		var _p28 = lang;
		if (_p28.ctor === 'Arm') {
			return '5,690';
		} else {
			return '14';
		}
	}();
	var fontSize = function () {
		var _p29 = lang;
		if (_p29.ctor === 'Arm') {
			return {ctor: '_Tuple2', _0: 'font-size', _1: '100%'};
		} else {
			return {ctor: '_Tuple2', _0: 'font-size', _1: '120%'};
		}
	}();
	var vis = model.mobileTarrifPlansView ? {ctor: '_Tuple2', _0: 'display', _1: 'initial'} : {ctor: '_Tuple2', _0: 'display', _1: 'none'};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('innovators-pricing'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityMobile'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: vis,
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '32em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h5,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('For Idea Generators'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifPlansStyle'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '1em'},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$li,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '37vw'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$h4,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedTitle'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'width', _1: '4.5em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '4vw'},
																	_1: {ctor: '[]'}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Free plan'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1.5em'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Free'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '2.4em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Ideas'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Up to 2'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Connect to'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('1 organization'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$p,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Region'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$p,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Current country'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$button,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSubscribeFreeInnovators),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
																					_1: {ctor: '[]'}
																				}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Subscribe'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A9(_user$project$TarrifPlans$innovatorsTarrifListItemMobile, model, 'Basic', bm, by, bs, '3', '3', 'Current region', _user$project$Messages$OnSubscribeBasicInnovators),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('tarrifPlansStyle'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A9(_user$project$TarrifPlans$innovatorsTarrifListItemUnmargined, model, 'Plus', pm, py, ps, '6', '5', 'Current continent', _user$project$Messages$OnSubscribePlusInnovators),
							_1: {
								ctor: '::',
								_0: A9(_user$project$TarrifPlans$innovatorsTarrifListItemMobile, model, 'Premium', pmm, pmy, pms, '8', '8', 'Worldwide', _user$project$Messages$OnSubscribePremiumInnovators),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('wantMoreStyle'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline-block'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'background', _1: 'black'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '13em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Looking for more options?'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href('#contacts'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '5em'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Contact us'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$TarrifPlans$ideaGeneratorsPlanTab = function (model) {
	var lang = model.language;
	var bm = function () {
		var _p30 = lang;
		if (_p30.ctor === 'Arm') {
			return '3,790';
		} else {
			return '8';
		}
	}();
	var by = function () {
		var _p31 = lang;
		if (_p31.ctor === 'Arm') {
			return '42,590';
		} else {
			return '88';
		}
	}();
	var bs = function () {
		var _p32 = lang;
		if (_p32.ctor === 'Arm') {
			return '2,890';
		} else {
			return '8';
		}
	}();
	var pm = function () {
		var _p33 = lang;
		if (_p33.ctor === 'Arm') {
			return '6,690';
		} else {
			return '14';
		}
	}();
	var py = function () {
		var _p34 = lang;
		if (_p34.ctor === 'Arm') {
			return '76,590';
		} else {
			return '158';
		}
	}();
	var ps = function () {
		var _p35 = lang;
		if (_p35.ctor === 'Arm') {
			return '3,690';
		} else {
			return '10';
		}
	}();
	var pmm = function () {
		var _p36 = lang;
		if (_p36.ctor === 'Arm') {
			return '10,090';
		} else {
			return '21';
		}
	}();
	var pmy = function () {
		var _p37 = lang;
		if (_p37.ctor === 'Arm') {
			return '115,390';
		} else {
			return '238';
		}
	}();
	var pms = function () {
		var _p38 = lang;
		if (_p38.ctor === 'Arm') {
			return '5,690';
		} else {
			return '14';
		}
	}();
	var fontSize = function () {
		var _p39 = lang;
		if (_p39.ctor === 'Arm') {
			return {ctor: '_Tuple2', _0: 'font-size', _1: '100%'};
		} else {
			return {ctor: '_Tuple2', _0: 'font-size', _1: '120%'};
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('innovators-pricing-t'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityTab'),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '15em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('For Idea Generators'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifPlansStyle'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$li,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '20vw'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$h4,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedTitle'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'width', _1: '4.5em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1.7vw'},
																	_1: {ctor: '[]'}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Free plan'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1.5em'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Free'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '2.4em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Ideas'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Up to 2'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Connect to'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('1 organization'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$p,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Region'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$p,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Current country'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$button,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSubscribeFreeInnovators),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
																					_1: {ctor: '[]'}
																				}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Subscribe'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A9(_user$project$TarrifPlans$innovatorsTarrifListItemTab, model, 'Basic', bm, by, bs, '3', '3', 'Current region', _user$project$Messages$OnSubscribeBasicInnovators),
							_1: {
								ctor: '::',
								_0: A9(_user$project$TarrifPlans$innovatorsTarrifListItemTab, model, 'Plus', pm, py, ps, '6', '5', 'Current continent', _user$project$Messages$OnSubscribePlusInnovators),
								_1: {
									ctor: '::',
									_0: A9(_user$project$TarrifPlans$innovatorsTarrifListItemTab, model, 'Premium', pmm, pmy, pms, '8', '8', 'Worldwide', _user$project$Messages$OnSubscribePremiumInnovators),
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('wantMoreStyle'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'background', _1: 'navy'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '13em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Looking for more options?'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href('#contacts'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Contact us'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$TarrifPlans$ideaGeneratorsPlan = function (model) {
	var lang = model.language;
	var bm = function () {
		var _p40 = lang;
		if (_p40.ctor === 'Arm') {
			return '3,790';
		} else {
			return '8';
		}
	}();
	var by = function () {
		var _p41 = lang;
		if (_p41.ctor === 'Arm') {
			return '42,590';
		} else {
			return '88';
		}
	}();
	var bs = function () {
		var _p42 = lang;
		if (_p42.ctor === 'Arm') {
			return '2,890';
		} else {
			return '8';
		}
	}();
	var pm = function () {
		var _p43 = lang;
		if (_p43.ctor === 'Arm') {
			return '6,690';
		} else {
			return '14';
		}
	}();
	var py = function () {
		var _p44 = lang;
		if (_p44.ctor === 'Arm') {
			return '76,590';
		} else {
			return '158';
		}
	}();
	var ps = function () {
		var _p45 = lang;
		if (_p45.ctor === 'Arm') {
			return '3,690';
		} else {
			return '10';
		}
	}();
	var pmm = function () {
		var _p46 = lang;
		if (_p46.ctor === 'Arm') {
			return '10,090';
		} else {
			return '21';
		}
	}();
	var pmy = function () {
		var _p47 = lang;
		if (_p47.ctor === 'Arm') {
			return '115,390';
		} else {
			return '238';
		}
	}();
	var pms = function () {
		var _p48 = lang;
		if (_p48.ctor === 'Arm') {
			return '5,690';
		} else {
			return '14';
		}
	}();
	var fontSize = function () {
		var _p49 = lang;
		if (_p49.ctor === 'Arm') {
			return {ctor: '_Tuple2', _0: 'font-size', _1: '100%'};
		} else {
			return {ctor: '_Tuple2', _0: 'font-size', _1: '120%'};
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('innovators-pricing'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('responsiveVisibility'),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '15em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('For Idea Generators'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifPlansStyle'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$li,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$h4,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedTitle'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'width', _1: '4.5em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1.5em'},
																	_1: {ctor: '[]'}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Free plan'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1.5em'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Free'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '2.4em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Ideas'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Up to 2'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Connect to'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('1 organization'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$p,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Region'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$p,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Current country'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$button,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSubscribeFreeInnovators),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
																					_1: {ctor: '[]'}
																				}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Subscribe'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A9(_user$project$TarrifPlans$innovatorsTarrifListItem, model, 'Basic', bm, by, bs, '3', '3', 'Current region', _user$project$Messages$OnSubscribeBasicInnovators),
							_1: {
								ctor: '::',
								_0: A9(_user$project$TarrifPlans$innovatorsTarrifListItem, model, 'Plus', pm, py, ps, '6', '5', 'Current continent', _user$project$Messages$OnSubscribePlusInnovators),
								_1: {
									ctor: '::',
									_0: A9(_user$project$TarrifPlans$innovatorsTarrifListItem, model, 'Premium', pmm, pmy, pms, '8', '8', 'Worldwide', _user$project$Messages$OnSubscribePremiumInnovators),
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('wantMoreStyle'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'background', _1: 'navy'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '13em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Looking for more options?'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href('#contacts'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Contact us'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$TarrifPlans$organizationsTarrifListItemUnmargined = F9(
	function (model, label, mp, yp, sp, cv, ig, region, subscriptionMsg) {
		var lang = model.language;
		var currency = function () {
			var _p50 = lang;
			if (_p50.ctor === 'Arm') {
				return 'D';
			} else {
				return '$';
			}
		}();
		var month = function () {
			var _p51 = lang;
			if (_p51.ctor === 'Arm') {
				return '/ամիս';
			} else {
				return '/mth';
			}
		}();
		var year = function () {
			var _p52 = lang;
			if (_p52.ctor === 'Arm') {
				return '/տարի*';
			} else {
				return '/yr*';
			}
		}();
		var save = function () {
			var _p53 = lang;
			if (_p53.ctor === 'Arm') {
				return '*խնայեք D ';
			} else {
				return '*save $';
			}
		}();
		var fontSize = function () {
			var _p54 = lang;
			if (_p54.ctor === 'Arm') {
				return {ctor: '_Tuple2', _0: 'font-size', _1: '80%'};
			} else {
				return {ctor: '_Tuple2', _0: 'font-size', _1: '100%'};
			}
		}();
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '28.5em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '37vw'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h4,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedTitle'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.2em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5vw'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'background', _1: 'black'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(label),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.5em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '98%'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('(Enterprise)'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: fontSize,
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(
													_elm_lang$core$Basics_ops['++'],
													currency,
													A2(_elm_lang$core$Basics_ops['++'], mp, month))),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: fontSize,
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(
														_elm_lang$core$Basics_ops['++'],
														currency,
														A2(_elm_lang$core$Basics_ops['++'], yp, year))),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: fontSize,
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														A2(_elm_lang$core$Basics_ops['++'], save, sp)),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Ideas'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.8em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('(short version)'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('All'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Ideas'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$p,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.8em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('(complete version)'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$p,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(
																				A2(_elm_lang$core$Basics_ops['++'], 'Up to ', cv)),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$p,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.4em'},
																								_1: {ctor: '[]'}
																							}
																						}),
																					_1: {ctor: '[]'}
																				}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Connect to'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$p,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(
																						A2(_elm_lang$core$Basics_ops['++'], ig, ' idea')),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$p,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('generators'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$p,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.4em'},
																											_1: {ctor: '[]'}
																										}
																									}),
																								_1: {ctor: '[]'}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Region'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$p,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																											_1: {ctor: '[]'}
																										}),
																									_1: {ctor: '[]'}
																								}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text(region),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$button,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Events$onClick(subscriptionMsg),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
																										_1: {ctor: '[]'}
																									}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('Subscribe'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$TarrifPlans$organizationsTarrifListItemMobile = F9(
	function (model, label, mp, yp, sp, cv, ig, region, subscriptionMsg) {
		var lang = model.language;
		var currency = function () {
			var _p55 = lang;
			if (_p55.ctor === 'Arm') {
				return 'D';
			} else {
				return '$';
			}
		}();
		var month = function () {
			var _p56 = lang;
			if (_p56.ctor === 'Arm') {
				return '/ամիս';
			} else {
				return '/mth';
			}
		}();
		var year = function () {
			var _p57 = lang;
			if (_p57.ctor === 'Arm') {
				return '/տարի*';
			} else {
				return '/yr*';
			}
		}();
		var save = function () {
			var _p58 = lang;
			if (_p58.ctor === 'Arm') {
				return '*խնայեք D ';
			} else {
				return '*save $';
			}
		}();
		var fontSize = function () {
			var _p59 = lang;
			if (_p59.ctor === 'Arm') {
				return {ctor: '_Tuple2', _0: 'font-size', _1: '100%'};
			} else {
				return {ctor: '_Tuple2', _0: 'font-size', _1: '120%'};
			}
		}();
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1em'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '28.5em'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '37vw'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h4,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedTitle'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.2em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5vw'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'background', _1: 'black'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(label),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.5em'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '98%'},
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('(Enterprise)'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: fontSize,
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(
													_elm_lang$core$Basics_ops['++'],
													currency,
													A2(_elm_lang$core$Basics_ops['++'], mp, month))),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: fontSize,
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(
														_elm_lang$core$Basics_ops['++'],
														currency,
														A2(_elm_lang$core$Basics_ops['++'], yp, year))),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: fontSize,
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														A2(_elm_lang$core$Basics_ops['++'], save, sp)),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Ideas'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.8em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('(short version)'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('All'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$style(
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																					_1: {ctor: '[]'}
																				}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Ideas'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$p,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.8em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('(complete version)'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$p,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(
																				A2(_elm_lang$core$Basics_ops['++'], 'Up to ', cv)),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$p,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.4em'},
																								_1: {ctor: '[]'}
																							}
																						}),
																					_1: {ctor: '[]'}
																				}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Connect to'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$p,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(
																						A2(_elm_lang$core$Basics_ops['++'], ig, ' idea')),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$p,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('generators'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$p,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.4em'},
																											_1: {ctor: '[]'}
																										}
																									}),
																								_1: {ctor: '[]'}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Region'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$p,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
																											_1: {ctor: '[]'}
																										}),
																									_1: {ctor: '[]'}
																								}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text(region),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$button,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Events$onClick(subscriptionMsg),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
																										_1: {ctor: '[]'}
																									}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('Subscribe'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$TarrifPlans$organizationsTarrifListItemTab = function (model) {
	return function (isFirst) {
		return function (label) {
			return function (mp) {
				return function (yp) {
					return function (sp) {
						return function (cv) {
							return function (ig) {
								return function (region) {
									return function (subscriptionMsg) {
										var lang = model.language;
										var currency = function () {
											var _p60 = lang;
											if (_p60.ctor === 'Arm') {
												return 'D';
											} else {
												return '$';
											}
										}();
										var month = function () {
											var _p61 = lang;
											if (_p61.ctor === 'Arm') {
												return '/ամիս';
											} else {
												return '/mth';
											}
										}();
										var year = function () {
											var _p62 = lang;
											if (_p62.ctor === 'Arm') {
												return '/տարի*';
											} else {
												return '/yr*';
											}
										}();
										var save = function () {
											var _p63 = lang;
											if (_p63.ctor === 'Arm') {
												return '*խնայեք D ';
											} else {
												return '*save $';
											}
										}();
										var fontSize = function () {
											var _p64 = lang;
											if (_p64.ctor === 'Arm') {
												return {ctor: '_Tuple2', _0: 'font-size', _1: '100%'};
											} else {
												return {ctor: '_Tuple2', _0: 'font-size', _1: '120%'};
											}
										}();
										var leftMargin = isFirst ? {ctor: '_Tuple2', _0: 'margin-left', _1: '0'} : {ctor: '_Tuple2', _0: 'margin-left', _1: '1em'};
										return A2(
											_elm_lang$html$Html$li,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
														_1: {
															ctor: '::',
															_0: leftMargin,
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'height', _1: '28.5em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'width', _1: '20vw'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$h4,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedTitle'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '2.5vw'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.2em'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'background', _1: 'navy'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(label),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.5em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '98%'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('(Enterprise)'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$br,
																	{ctor: '[]'},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$p,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: fontSize,
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																							_1: {ctor: '[]'}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					currency,
																					A2(_elm_lang$core$Basics_ops['++'], mp, month))),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$p,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: fontSize,
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																								_1: {ctor: '[]'}
																							}
																						}),
																					_1: {ctor: '[]'}
																				}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(
																					A2(
																						_elm_lang$core$Basics_ops['++'],
																						currency,
																						A2(_elm_lang$core$Basics_ops['++'], yp, year))),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$p,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: fontSize,
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																									_1: {ctor: '[]'}
																								}
																							}),
																						_1: {ctor: '[]'}
																					}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(
																						A2(_elm_lang$core$Basics_ops['++'], save, sp)),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$p,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																										_1: {ctor: '[]'}
																									}
																								}),
																							_1: {ctor: '[]'}
																						}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Ideas'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$p,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.8em'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																											_1: {ctor: '[]'}
																										}
																									}),
																								_1: {ctor: '[]'}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('(short version)'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$p,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('All'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$p,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																													_1: {ctor: '[]'}
																												}
																											}),
																										_1: {ctor: '[]'}
																									}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('Ideas'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$p,
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																										_1: {
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$style(
																												{
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.8em'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																														_1: {ctor: '[]'}
																													}
																												}),
																											_1: {ctor: '[]'}
																										}
																									},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('(complete version)'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$p,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																											_1: {ctor: '[]'}
																										},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text(
																												A2(_elm_lang$core$Basics_ops['++'], 'Up to ', cv)),
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$p,
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$style(
																														{
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.4em'},
																																_1: {ctor: '[]'}
																															}
																														}),
																													_1: {ctor: '[]'}
																												}
																											},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text('Connect to'),
																												_1: {ctor: '[]'}
																											}),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$p,
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																													_1: {
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$style(
																															{
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																																_1: {ctor: '[]'}
																															}),
																														_1: {ctor: '[]'}
																													}
																												},
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html$text(
																														A2(_elm_lang$core$Basics_ops['++'], ig, ' idea')),
																													_1: {ctor: '[]'}
																												}),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													_elm_lang$html$Html$p,
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																														_1: {
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$style(
																																{
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																																	_1: {ctor: '[]'}
																																}),
																															_1: {ctor: '[]'}
																														}
																													},
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html$text('generators'),
																														_1: {ctor: '[]'}
																													}),
																												_1: {
																													ctor: '::',
																													_0: A2(
																														_elm_lang$html$Html$p,
																														{
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																															_1: {
																																ctor: '::',
																																_0: _elm_lang$html$Html_Attributes$style(
																																	{
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.4em'},
																																			_1: {ctor: '[]'}
																																		}
																																	}),
																																_1: {ctor: '[]'}
																															}
																														},
																														{
																															ctor: '::',
																															_0: _elm_lang$html$Html$text('Region'),
																															_1: {ctor: '[]'}
																														}),
																													_1: {
																														ctor: '::',
																														_0: A2(
																															_elm_lang$html$Html$p,
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																																_1: {
																																	ctor: '::',
																																	_0: _elm_lang$html$Html_Attributes$style(
																																		{
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																																			_1: {ctor: '[]'}
																																		}),
																																	_1: {ctor: '[]'}
																																}
																															},
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html$text(region),
																																_1: {ctor: '[]'}
																															}),
																														_1: {
																															ctor: '::',
																															_0: A2(
																																_elm_lang$html$Html$button,
																																{
																																	ctor: '::',
																																	_0: _elm_lang$html$Html_Events$onClick(subscriptionMsg),
																																	_1: {
																																		ctor: '::',
																																		_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
																																		_1: {ctor: '[]'}
																																	}
																																},
																																{
																																	ctor: '::',
																																	_0: _elm_lang$html$Html$text('Subscribe'),
																																	_1: {ctor: '[]'}
																																}),
																															_1: {ctor: '[]'}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											});
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$TarrifPlans$organizationsTarrifListItem = function (model) {
	return function (isFirst) {
		return function (label) {
			return function (mp) {
				return function (yp) {
					return function (sp) {
						return function (cv) {
							return function (ig) {
								return function (region) {
									return function (subscriptionMsg) {
										var lang = model.language;
										var currency = function () {
											var _p65 = lang;
											if (_p65.ctor === 'Arm') {
												return 'D';
											} else {
												return '$';
											}
										}();
										var month = function () {
											var _p66 = lang;
											if (_p66.ctor === 'Arm') {
												return '/ամիս';
											} else {
												return '/mth';
											}
										}();
										var year = function () {
											var _p67 = lang;
											if (_p67.ctor === 'Arm') {
												return '/տարի*';
											} else {
												return '/yr*';
											}
										}();
										var save = function () {
											var _p68 = lang;
											if (_p68.ctor === 'Arm') {
												return '*խնայեք D ';
											} else {
												return '*save $';
											}
										}();
										var fontSize = function () {
											var _p69 = lang;
											if (_p69.ctor === 'Arm') {
												return {ctor: '_Tuple2', _0: 'font-size', _1: '100%'};
											} else {
												return {ctor: '_Tuple2', _0: 'font-size', _1: '120%'};
											}
										}();
										var leftMargin = isFirst ? {ctor: '_Tuple2', _0: 'margin-left', _1: '0'} : {ctor: '_Tuple2', _0: 'margin-left', _1: '2em'};
										return A2(
											_elm_lang$html$Html$li,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
														_1: {
															ctor: '::',
															_0: leftMargin,
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'height', _1: '28.5em'},
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$h4,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedTitle'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.2em'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'background', _1: 'navy'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(label),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.5em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '98%'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('(Enterprise)'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$br,
																	{ctor: '[]'},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$p,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: fontSize,
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																							_1: {ctor: '[]'}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					currency,
																					A2(_elm_lang$core$Basics_ops['++'], mp, month))),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$p,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: fontSize,
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																								_1: {ctor: '[]'}
																							}
																						}),
																					_1: {ctor: '[]'}
																				}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(
																					A2(
																						_elm_lang$core$Basics_ops['++'],
																						currency,
																						A2(_elm_lang$core$Basics_ops['++'], yp, year))),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$p,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: fontSize,
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																									_1: {ctor: '[]'}
																								}
																							}),
																						_1: {ctor: '[]'}
																					}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(
																						A2(_elm_lang$core$Basics_ops['++'], save, sp)),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$p,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																										_1: {ctor: '[]'}
																									}
																								}),
																							_1: {ctor: '[]'}
																						}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Ideas'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$p,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.8em'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																											_1: {ctor: '[]'}
																										}
																									}),
																								_1: {ctor: '[]'}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('(short version)'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$p,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('All'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$p,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																													_1: {ctor: '[]'}
																												}
																											}),
																										_1: {ctor: '[]'}
																									}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('Ideas'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$p,
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																										_1: {
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$style(
																												{
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.8em'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																														_1: {ctor: '[]'}
																													}
																												}),
																											_1: {ctor: '[]'}
																										}
																									},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('(complete version)'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$p,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																											_1: {ctor: '[]'}
																										},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text(
																												A2(_elm_lang$core$Basics_ops['++'], 'Up to ', cv)),
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$p,
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$style(
																														{
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.4em'},
																																_1: {ctor: '[]'}
																															}
																														}),
																													_1: {ctor: '[]'}
																												}
																											},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text('Connect to'),
																												_1: {ctor: '[]'}
																											}),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$p,
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																													_1: {
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$style(
																															{
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
																																_1: {ctor: '[]'}
																															}),
																														_1: {ctor: '[]'}
																													}
																												},
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html$text(
																														A2(_elm_lang$core$Basics_ops['++'], ig, ' idea')),
																													_1: {ctor: '[]'}
																												}),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													_elm_lang$html$Html$p,
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																														_1: {
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$style(
																																{
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
																																	_1: {ctor: '[]'}
																																}),
																															_1: {ctor: '[]'}
																														}
																													},
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html$text('generators'),
																														_1: {ctor: '[]'}
																													}),
																												_1: {
																													ctor: '::',
																													_0: A2(
																														_elm_lang$html$Html$p,
																														{
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																															_1: {
																																ctor: '::',
																																_0: _elm_lang$html$Html_Attributes$style(
																																	{
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.4em'},
																																			_1: {ctor: '[]'}
																																		}
																																	}),
																																_1: {ctor: '[]'}
																															}
																														},
																														{
																															ctor: '::',
																															_0: _elm_lang$html$Html$text('Region'),
																															_1: {ctor: '[]'}
																														}),
																													_1: {
																														ctor: '::',
																														_0: A2(
																															_elm_lang$html$Html$p,
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																																_1: {
																																	ctor: '::',
																																	_0: _elm_lang$html$Html_Attributes$style(
																																		{
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
																																			_1: {ctor: '[]'}
																																		}),
																																	_1: {ctor: '[]'}
																																}
																															},
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html$text(region),
																																_1: {ctor: '[]'}
																															}),
																														_1: {
																															ctor: '::',
																															_0: A2(
																																_elm_lang$html$Html$button,
																																{
																																	ctor: '::',
																																	_0: _elm_lang$html$Html_Events$onClick(subscriptionMsg),
																																	_1: {
																																		ctor: '::',
																																		_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
																																		_1: {ctor: '[]'}
																																	}
																																},
																																{
																																	ctor: '::',
																																	_0: _elm_lang$html$Html$text('Subscribe'),
																																	_1: {ctor: '[]'}
																																}),
																															_1: {ctor: '[]'}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											});
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$TarrifPlans$organizationsPlanMobile = function (model) {
	var lang = model.language;
	var bm = function () {
		var _p70 = lang;
		if (_p70.ctor === 'Arm') {
			return '23,190';
		} else {
			return '48';
		}
	}();
	var by = function () {
		var _p71 = lang;
		if (_p71.ctor === 'Arm') {
			return '265,690';
		} else {
			return '548';
		}
	}();
	var bs = function () {
		var _p72 = lang;
		if (_p72.ctor === 'Arm') {
			return '12,590';
		} else {
			return '28';
		}
	}();
	var pm = function () {
		var _p73 = lang;
		if (_p73.ctor === 'Arm') {
			return '36,790';
		} else {
			return '76';
		}
	}();
	var py = function () {
		var _p74 = lang;
		if (_p74.ctor === 'Arm') {
			return '418,090';
		} else {
			return '864';
		}
	}();
	var ps = function () {
		var _p75 = lang;
		if (_p75.ctor === 'Arm') {
			return '23,390';
		} else {
			return '48';
		}
	}();
	var pmm = function () {
		var _p76 = lang;
		if (_p76.ctor === 'Arm') {
			return '61,990';
		} else {
			return '128';
		}
	}();
	var pmy = function () {
		var _p77 = lang;
		if (_p77.ctor === 'Arm') {
			return '715,290';
		} else {
			return '1475';
		}
	}();
	var pms = function () {
		var _p78 = lang;
		if (_p78.ctor === 'Arm') {
			return '28,590';
		} else {
			return '61';
		}
	}();
	var mm = function () {
		var _p79 = lang;
		if (_p79.ctor === 'Arm') {
			return 'D 104,690/ամիս';
		} else {
			return '$216/mth';
		}
	}();
	var my = function () {
		var _p80 = lang;
		if (_p80.ctor === 'Arm') {
			return 'D 1,210,490/տարի*';
		} else {
			return '$2496/yr*';
		}
	}();
	var ms = function () {
		var _p81 = lang;
		if (_p81.ctor === 'Arm') {
			return '*խնայեք D 45,790';
		} else {
			return '*save $96';
		}
	}();
	var fontSize = function () {
		var _p82 = lang;
		if (_p82.ctor === 'Arm') {
			return {ctor: '_Tuple2', _0: 'font-size', _1: '100%'};
		} else {
			return {ctor: '_Tuple2', _0: 'font-size', _1: '120%'};
		}
	}();
	var vis = model.mobileTarrifPlansView ? {ctor: '_Tuple2', _0: 'display', _1: 'initial'} : {ctor: '_Tuple2', _0: 'display', _1: 'none'};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('organizations-pricing'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityMobile'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: vis,
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h5,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '40px'},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('For Organizations'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('tarrifPlansStyle'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '1em'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A9(_user$project$TarrifPlans$organizationsTarrifListItemUnmargined, model, 'Basic', bm, by, bs, '5', '15', 'Current country', _user$project$Messages$OnSubscribeBasicOrganization),
							_1: {
								ctor: '::',
								_0: A9(_user$project$TarrifPlans$organizationsTarrifListItemMobile, model, 'Plus', pm, py, ps, '10', '30', 'Current region', _user$project$Messages$OnSubscribePlusOrganization),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$ul,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('tarrifPlansStyle'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '2em'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: A9(_user$project$TarrifPlans$organizationsTarrifListItemUnmargined, model, 'Premium', pmm, pmy, pms, '20', '50', 'Current continent', _user$project$Messages$OnSubscribePremiumOrganization),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$li,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1em'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'width', _1: '37vw'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'height', _1: '28.5em'},
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$h4,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedTitle'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.2em'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'background', _1: 'black'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'width', _1: '4.5em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '3vw'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Max'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.5em'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'font-size', _1: '98%'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('(Enterprise)'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$br,
																{ctor: '[]'},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$p,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$style(
																				{
																					ctor: '::',
																					_0: fontSize,
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																						_1: {ctor: '[]'}
																					}
																				}),
																			_1: {ctor: '[]'}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(mm),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$p,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: fontSize,
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																							_1: {ctor: '[]'}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(my),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$p,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: fontSize,
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																								_1: {ctor: '[]'}
																							}
																						}),
																					_1: {ctor: '[]'}
																				}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(ms),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$p,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																									_1: {ctor: '[]'}
																								}
																							}),
																						_1: {ctor: '[]'}
																					}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Ideas'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$p,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.8em'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																										_1: {ctor: '[]'}
																									}
																								}),
																							_1: {ctor: '[]'}
																						}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('(short version)'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$p,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('All'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$p,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$style(
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																												_1: {ctor: '[]'}
																											}
																										}),
																									_1: {ctor: '[]'}
																								}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('Ideas'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$p,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.8em'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																													_1: {ctor: '[]'}
																												}
																											}),
																										_1: {ctor: '[]'}
																									}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('(complete version)'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$p,
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																										_1: {ctor: '[]'}
																									},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('Up to 50'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$p,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																											_1: {
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$style(
																													{
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.4em'},
																															_1: {ctor: '[]'}
																														}
																													}),
																												_1: {ctor: '[]'}
																											}
																										},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text('Connect to'),
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$p,
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$style(
																														{
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																																_1: {ctor: '[]'}
																															}
																														}),
																													_1: {ctor: '[]'}
																												}
																											},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text('Unlimited'),
																												_1: {ctor: '[]'}
																											}),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$p,
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																													_1: {
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$style(
																															{
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.4em'},
																																	_1: {ctor: '[]'}
																																}
																															}),
																														_1: {ctor: '[]'}
																													}
																												},
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html$text('Region'),
																													_1: {ctor: '[]'}
																												}),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													_elm_lang$html$Html$p,
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																														_1: {
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$style(
																																{
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																																	_1: {ctor: '[]'}
																																}),
																															_1: {ctor: '[]'}
																														}
																													},
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html$text('Worldwide'),
																														_1: {ctor: '[]'}
																													}),
																												_1: {
																													ctor: '::',
																													_0: A2(
																														_elm_lang$html$Html$button,
																														{
																															ctor: '::',
																															_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSubscribeMaxOrganization),
																															_1: {
																																ctor: '::',
																																_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
																																_1: {ctor: '[]'}
																															}
																														},
																														{
																															ctor: '::',
																															_0: _elm_lang$html$Html$text('Subscribe'),
																															_1: {ctor: '[]'}
																														}),
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('wantMoreStyle'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline-block'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '80vw'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '10px'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'background', _1: 'black'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'width', _1: '13em'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Looking for more options?'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href('#contacts'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Contact us'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$TarrifPlans$tarrifPlansMobile = function (model) {
	var vis = model.mobileTarrifPlansView ? {ctor: '_Tuple2', _0: 'display', _1: 'initial'} : {ctor: '_Tuple2', _0: 'display', _1: 'none'};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('tarrif-plans-m'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: vis,
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'background-size', _1: '100vw 100vh'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'background-attachment', _1: 'fixed'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'background-image', _1: 'url(/images/background_landing_phone.png)'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'left', _1: '0'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'top', _1: '100px'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _user$project$TarrifPlans$ideaGeneratorsPlanMobile(model),
			_1: {
				ctor: '::',
				_0: _user$project$TarrifPlans$organizationsPlanMobile(model),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$TarrifPlans$organizationsPlanTab = function (model) {
	var lang = model.language;
	var bm = function () {
		var _p83 = lang;
		if (_p83.ctor === 'Arm') {
			return '23,190';
		} else {
			return '48';
		}
	}();
	var by = function () {
		var _p84 = lang;
		if (_p84.ctor === 'Arm') {
			return '265,690';
		} else {
			return '548';
		}
	}();
	var bs = function () {
		var _p85 = lang;
		if (_p85.ctor === 'Arm') {
			return '12,590';
		} else {
			return '28';
		}
	}();
	var pm = function () {
		var _p86 = lang;
		if (_p86.ctor === 'Arm') {
			return '36,790';
		} else {
			return '76';
		}
	}();
	var py = function () {
		var _p87 = lang;
		if (_p87.ctor === 'Arm') {
			return '418,090';
		} else {
			return '864';
		}
	}();
	var ps = function () {
		var _p88 = lang;
		if (_p88.ctor === 'Arm') {
			return '23,390';
		} else {
			return '48';
		}
	}();
	var pmm = function () {
		var _p89 = lang;
		if (_p89.ctor === 'Arm') {
			return '61,990';
		} else {
			return '128';
		}
	}();
	var pmy = function () {
		var _p90 = lang;
		if (_p90.ctor === 'Arm') {
			return '715,290';
		} else {
			return '1475';
		}
	}();
	var pms = function () {
		var _p91 = lang;
		if (_p91.ctor === 'Arm') {
			return '28,590';
		} else {
			return '61';
		}
	}();
	var mm = function () {
		var _p92 = lang;
		if (_p92.ctor === 'Arm') {
			return 'D 104,690/ամիս';
		} else {
			return '$216/mth';
		}
	}();
	var my = function () {
		var _p93 = lang;
		if (_p93.ctor === 'Arm') {
			return 'D 1,210,490/տարի*';
		} else {
			return '$2496/yr*';
		}
	}();
	var ms = function () {
		var _p94 = lang;
		if (_p94.ctor === 'Arm') {
			return '*խնայեք D 45,790';
		} else {
			return '*save $96';
		}
	}();
	var fontSize = function () {
		var _p95 = lang;
		if (_p95.ctor === 'Arm') {
			return {ctor: '_Tuple2', _0: 'font-size', _1: '100%'};
		} else {
			return {ctor: '_Tuple2', _0: 'font-size', _1: '120%'};
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('organizations-pricing-t'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('responsiveVisibilityTab'),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('For Organizations'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('tarrifPlansStyle'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '100vw'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _user$project$TarrifPlans$organizationsTarrifListItemTab(model)(true)('Basic')(bm)(by)(bs)('5')('15')('Current country')(_user$project$Messages$OnSubscribeBasicOrganization),
							_1: {
								ctor: '::',
								_0: _user$project$TarrifPlans$organizationsTarrifListItemTab(model)(false)('Plus')(pm)(py)(ps)('10')('30')('Current region')(_user$project$Messages$OnSubscribePlusOrganization),
								_1: {
									ctor: '::',
									_0: _user$project$TarrifPlans$organizationsTarrifListItemTab(model)(false)('Premium')(pmm)(pmy)(pms)('20')('50')('Current continent')(_user$project$Messages$OnSubscribePremiumOrganization),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$li,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1em'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'height', _1: '28.5em'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'width', _1: '20vw'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$h4,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedTitle'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.2em'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'background', _1: 'navy'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'width', _1: '4.5em'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1.5vw'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Max'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.5em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '98%'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('(Enterprise)'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$br,
																	{ctor: '[]'},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$p,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: fontSize,
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																							_1: {ctor: '[]'}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(mm),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$p,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: fontSize,
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																								_1: {ctor: '[]'}
																							}
																						}),
																					_1: {ctor: '[]'}
																				}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(my),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$p,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: fontSize,
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																									_1: {ctor: '[]'}
																								}
																							}),
																						_1: {ctor: '[]'}
																					}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(ms),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$p,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																										_1: {ctor: '[]'}
																									}
																								}),
																							_1: {ctor: '[]'}
																						}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Ideas'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$p,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.8em'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																											_1: {ctor: '[]'}
																										}
																									}),
																								_1: {ctor: '[]'}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('(short version)'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$p,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('All'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$p,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																													_1: {ctor: '[]'}
																												}
																											}),
																										_1: {ctor: '[]'}
																									}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('Ideas'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$p,
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																										_1: {
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$style(
																												{
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.8em'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																														_1: {ctor: '[]'}
																													}
																												}),
																											_1: {ctor: '[]'}
																										}
																									},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('(complete version)'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$p,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																											_1: {ctor: '[]'}
																										},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text('Up to 50'),
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$p,
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$style(
																														{
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.4em'},
																																_1: {ctor: '[]'}
																															}
																														}),
																													_1: {ctor: '[]'}
																												}
																											},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text('Connect to'),
																												_1: {ctor: '[]'}
																											}),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$p,
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																													_1: {
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$style(
																															{
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																																	_1: {ctor: '[]'}
																																}
																															}),
																														_1: {ctor: '[]'}
																													}
																												},
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html$text('Unlimited'),
																													_1: {ctor: '[]'}
																												}),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													_elm_lang$html$Html$p,
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																														_1: {
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$style(
																																{
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.4em'},
																																		_1: {ctor: '[]'}
																																	}
																																}),
																															_1: {ctor: '[]'}
																														}
																													},
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html$text('Region'),
																														_1: {ctor: '[]'}
																													}),
																												_1: {
																													ctor: '::',
																													_0: A2(
																														_elm_lang$html$Html$p,
																														{
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																															_1: {
																																ctor: '::',
																																_0: _elm_lang$html$Html_Attributes$style(
																																	{
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '90%'},
																																		_1: {ctor: '[]'}
																																	}),
																																_1: {ctor: '[]'}
																															}
																														},
																														{
																															ctor: '::',
																															_0: _elm_lang$html$Html$text('Worldwide'),
																															_1: {ctor: '[]'}
																														}),
																													_1: {
																														ctor: '::',
																														_0: A2(
																															_elm_lang$html$Html$button,
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSubscribeMaxOrganization),
																																_1: {
																																	ctor: '::',
																																	_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
																																	_1: {ctor: '[]'}
																																}
																															},
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html$text('Subscribe'),
																																_1: {ctor: '[]'}
																															}),
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('wantMoreStyle'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'background', _1: 'teal'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '13em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Looking for more options?'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href('#contacts'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Contact us'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$TarrifPlans$organizationsPlan = function (model) {
	var lang = model.language;
	var bm = function () {
		var _p96 = lang;
		if (_p96.ctor === 'Arm') {
			return '23,190';
		} else {
			return '48';
		}
	}();
	var by = function () {
		var _p97 = lang;
		if (_p97.ctor === 'Arm') {
			return '265,690';
		} else {
			return '548';
		}
	}();
	var bs = function () {
		var _p98 = lang;
		if (_p98.ctor === 'Arm') {
			return '12,590';
		} else {
			return '28';
		}
	}();
	var pm = function () {
		var _p99 = lang;
		if (_p99.ctor === 'Arm') {
			return '36,790';
		} else {
			return '76';
		}
	}();
	var py = function () {
		var _p100 = lang;
		if (_p100.ctor === 'Arm') {
			return '418,090';
		} else {
			return '864';
		}
	}();
	var ps = function () {
		var _p101 = lang;
		if (_p101.ctor === 'Arm') {
			return '23,390';
		} else {
			return '48';
		}
	}();
	var pmm = function () {
		var _p102 = lang;
		if (_p102.ctor === 'Arm') {
			return '61,990';
		} else {
			return '128';
		}
	}();
	var pmy = function () {
		var _p103 = lang;
		if (_p103.ctor === 'Arm') {
			return '715,290';
		} else {
			return '1475';
		}
	}();
	var pms = function () {
		var _p104 = lang;
		if (_p104.ctor === 'Arm') {
			return '28,590';
		} else {
			return '61';
		}
	}();
	var mm = function () {
		var _p105 = lang;
		if (_p105.ctor === 'Arm') {
			return 'D 104,690/ամիս';
		} else {
			return '$216/mth';
		}
	}();
	var my = function () {
		var _p106 = lang;
		if (_p106.ctor === 'Arm') {
			return 'D 1,210,490/տարի*';
		} else {
			return '$2496/yr*';
		}
	}();
	var ms = function () {
		var _p107 = lang;
		if (_p107.ctor === 'Arm') {
			return '*խնայեք D 45,790';
		} else {
			return '*save $96';
		}
	}();
	var fontSize = function () {
		var _p108 = lang;
		if (_p108.ctor === 'Arm') {
			return {ctor: '_Tuple2', _0: 'font-size', _1: '100%'};
		} else {
			return {ctor: '_Tuple2', _0: 'font-size', _1: '120%'};
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('organizations-pricing'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('responsiveVisibility'),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '5em'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('For Organizations'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('tarrifPlansStyle'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _user$project$TarrifPlans$organizationsTarrifListItem(model)(true)('Basic')(bm)(by)(bs)('5')('15')('Current country')(_user$project$Messages$OnSubscribeBasicOrganization),
							_1: {
								ctor: '::',
								_0: _user$project$TarrifPlans$organizationsTarrifListItem(model)(false)('Plus')(pm)(py)(ps)('10')('30')('Current region')(_user$project$Messages$OnSubscribePlusOrganization),
								_1: {
									ctor: '::',
									_0: _user$project$TarrifPlans$organizationsTarrifListItem(model)(false)('Premium')(pmm)(pmy)(pms)('20')('50')('Current continent')(_user$project$Messages$OnSubscribePremiumOrganization),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$li,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '2em'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedItem'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'height', _1: '28.5em'},
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$h4,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('tarrifBorderedTitle'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.2em'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'background', _1: 'navy'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'width', _1: '4.5em'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1.5em'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Max'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.5em'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '98%'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('(Enterprise)'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$br,
																	{ctor: '[]'},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$p,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: fontSize,
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																							_1: {ctor: '[]'}
																						}
																					}),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(mm),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$p,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$style(
																						{
																							ctor: '::',
																							_0: fontSize,
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
																								_1: {ctor: '[]'}
																							}
																						}),
																					_1: {ctor: '[]'}
																				}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(my),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$p,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: fontSize,
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'color', _1: 'gold'},
																									_1: {ctor: '[]'}
																								}
																							}),
																						_1: {ctor: '[]'}
																					}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(ms),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$p,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																										_1: {ctor: '[]'}
																									}
																								}),
																							_1: {ctor: '[]'}
																						}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Ideas'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$p,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$style(
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.8em'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																											_1: {ctor: '[]'}
																										}
																									}),
																								_1: {ctor: '[]'}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('(short version)'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$p,
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('All'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$p,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																													_1: {ctor: '[]'}
																												}
																											}),
																										_1: {ctor: '[]'}
																									}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('Ideas'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$p,
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																										_1: {
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$style(
																												{
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-1.8em'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
																														_1: {ctor: '[]'}
																													}
																												}),
																											_1: {ctor: '[]'}
																										}
																									},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('(complete version)'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$p,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																											_1: {ctor: '[]'}
																										},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text('Up to 50'),
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$p,
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$style(
																														{
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.4em'},
																																_1: {ctor: '[]'}
																															}
																														}),
																													_1: {ctor: '[]'}
																												}
																											},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text('Connect to'),
																												_1: {ctor: '[]'}
																											}),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$p,
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																													_1: {
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$style(
																															{
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1em'},
																																	_1: {ctor: '[]'}
																																}
																															}),
																														_1: {ctor: '[]'}
																													}
																												},
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html$text('Unlimited'),
																													_1: {ctor: '[]'}
																												}),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													_elm_lang$html$Html$p,
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$class('smallWhiteCentered'),
																														_1: {
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$style(
																																{
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'font-size', _1: 'small'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.4em'},
																																		_1: {ctor: '[]'}
																																	}
																																}),
																															_1: {ctor: '[]'}
																														}
																													},
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html$text('Region'),
																														_1: {ctor: '[]'}
																													}),
																												_1: {
																													ctor: '::',
																													_0: A2(
																														_elm_lang$html$Html$p,
																														{
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$class('marginedSkyblue'),
																															_1: {
																																ctor: '::',
																																_0: _elm_lang$html$Html_Attributes$style(
																																	{
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'font-size', _1: '120%'},
																																		_1: {ctor: '[]'}
																																	}),
																																_1: {ctor: '[]'}
																															}
																														},
																														{
																															ctor: '::',
																															_0: _elm_lang$html$Html$text('Worldwide'),
																															_1: {ctor: '[]'}
																														}),
																													_1: {
																														ctor: '::',
																														_0: A2(
																															_elm_lang$html$Html$button,
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html_Events$onClick(_user$project$Messages$OnSubscribeMaxOrganization),
																																_1: {
																																	ctor: '::',
																																	_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
																																	_1: {ctor: '[]'}
																																}
																															},
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html$text('Subscribe'),
																																_1: {ctor: '[]'}
																															}),
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('wantMoreStyle'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'background', _1: 'teal'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '13em'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-0.8em'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Looking for more options?'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href('#contacts'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('subscribeButtonStyle'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'padding', _1: '0.3em'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Contact us'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};

var _user$project$Networking$promoDataDecoder = function () {
	var decoder = A6(
		_elm_lang$core$Json_Decode$map5,
		_user$project$Models$PromoRegistration,
		A2(_elm_lang$core$Json_Decode$field, 'full_name', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'email', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'prefered_organization', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'short_description', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'data',
			_1: {ctor: '[]'}
		},
		decoder);
}();
var _user$project$Networking$promoRegDataDecoder = function () {
	var decoder = A8(
		_elm_lang$core$Json_Decode$map7,
		_user$project$Models$PromoRegData,
		A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int),
		A2(_elm_lang$core$Json_Decode$field, 'full_name', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'email', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'prefered_organization', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'idea_id', _elm_lang$core$Json_Decode$int),
		A2(_elm_lang$core$Json_Decode$field, 'short_description', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'register_date', _elm_lang$core$Json_Decode$string));
	return decoder;
}();
var _user$project$Networking$signInDataDecoder = function () {
	var decoder = A3(
		_elm_lang$core$Json_Decode$map2,
		_user$project$Models$RegisteredDataList,
		A2(
			_elm_lang$core$Json_Decode$field,
			'reg_data',
			_elm_lang$core$Json_Decode$list(_user$project$Networking$promoRegDataDecoder)),
		A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'data',
			_1: {ctor: '[]'}
		},
		decoder);
}();
var _user$project$Networking$dataDecoder = function () {
	var decoder = A5(
		_elm_lang$core$Json_Decode$map4,
		_user$project$Models$DataRegistered,
		A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int),
		A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'email', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'token', _elm_lang$core$Json_Decode$string));
	return decoder;
}();
var _user$project$Networking$registeredDataDecoder = function () {
	var decoder = A3(
		_elm_lang$core$Json_Decode$map2,
		_user$project$Models$DataRegisteredWrapper,
		A2(_elm_lang$core$Json_Decode$field, 'reg_data', _user$project$Networking$dataDecoder),
		A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'data',
			_1: {ctor: '[]'}
		},
		decoder);
}();
var _user$project$Networking$innovatorDecoder = function () {
	var decoder = A6(
		_elm_lang$core$Json_Decode$map5,
		_user$project$Models$TopInnovator,
		A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int),
		A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'pic_uri', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'rating', _elm_lang$core$Json_Decode$int),
		A2(_elm_lang$core$Json_Decode$field, 'country', _elm_lang$core$Json_Decode$string));
	return _elm_lang$core$Json_Decode$list(decoder);
}();
var _user$project$Networking$organizationDecoder = function () {
	var decoder = A5(
		_elm_lang$core$Json_Decode$map4,
		_user$project$Models$TopOrganization,
		A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int),
		A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'pic_uri', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'country', _elm_lang$core$Json_Decode$string));
	return _elm_lang$core$Json_Decode$list(decoder);
}();
var _user$project$Networking$topMembersDecoder = function () {
	var decoder = A3(
		_elm_lang$core$Json_Decode$map2,
		_user$project$Models$TopMembers,
		A2(_elm_lang$core$Json_Decode$field, 'organizations', _user$project$Networking$organizationDecoder),
		A2(_elm_lang$core$Json_Decode$field, 'innovators', _user$project$Networking$innovatorDecoder));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'data',
			_1: {ctor: '[]'}
		},
		decoder);
}();
var _user$project$Networking$memberDataDecoder = function () {
	var decoder = A6(
		_elm_lang$core$Json_Decode$map5,
		_user$project$Models$LoggedInMember,
		A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int),
		A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'email', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'isOrganization', _elm_lang$core$Json_Decode$bool),
		A2(_elm_lang$core$Json_Decode$field, 'token', _elm_lang$core$Json_Decode$string));
	return decoder;
}();
var _user$project$Networking$loginDataDecoder = function () {
	var decoder = A3(
		_elm_lang$core$Json_Decode$map2,
		_user$project$Models$LoggedInMemberWrapper,
		A2(_elm_lang$core$Json_Decode$field, 'login_data', _user$project$Networking$memberDataDecoder),
		A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'data',
			_1: {ctor: '[]'}
		},
		decoder);
}();
var _user$project$Networking$signOutResponseDecoder = function () {
	var decoder = A2(
		_elm_lang$core$Json_Decode$map,
		_user$project$Models$SignOutResponse,
		A2(_elm_lang$core$Json_Decode$field, 'response', _elm_lang$core$Json_Decode$string));
	return decoder;
}();
var _user$project$Networking$innovatorExtendedDecoder = function () {
	var decoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'connections_count',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'phone',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'username',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'experience',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'education',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'about_me',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'description',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'innovators_plan_id',
									_elm_lang$core$Json_Decode$int,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'ideas_count',
										_elm_lang$core$Json_Decode$int,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'email',
											_elm_lang$core$Json_Decode$string,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'country',
												_elm_lang$core$Json_Decode$string,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'rating',
													_elm_lang$core$Json_Decode$int,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'pic_uri',
														_elm_lang$core$Json_Decode$string,
														A3(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
															'name',
															_elm_lang$core$Json_Decode$string,
															A3(
																_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																'id',
																_elm_lang$core$Json_Decode$int,
																_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$InnovatorExtended))))))))))))))));
	return decoder;
}();
var _user$project$Networking$innovatorExtendedWrapperDecoder = function () {
	var decoder = A3(
		_elm_lang$core$Json_Decode$map2,
		_user$project$Models$GetInnovatorDataResponseWrapper,
		A2(_elm_lang$core$Json_Decode$field, 'innovator_data', _user$project$Networking$innovatorExtendedDecoder),
		A2(_elm_lang$core$Json_Decode$field, 'token', _elm_lang$core$Json_Decode$string));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'data',
			_1: {ctor: '[]'}
		},
		decoder);
}();
var _user$project$Networking$organizationExtendedDecoder = function () {
	var decoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'connections_count',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'rating',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'phone',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'username',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'interested_industries',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'industry',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'about_us',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'webpage',
									_elm_lang$core$Json_Decode$string,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'description',
										_elm_lang$core$Json_Decode$string,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'organizations_plan_id',
											_elm_lang$core$Json_Decode$int,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'complete_ideas_count',
												_elm_lang$core$Json_Decode$int,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'email',
													_elm_lang$core$Json_Decode$string,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'country',
														_elm_lang$core$Json_Decode$string,
														A3(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
															'pic_uri',
															_elm_lang$core$Json_Decode$string,
															A3(
																_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																'name',
																_elm_lang$core$Json_Decode$string,
																A3(
																	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																	'id',
																	_elm_lang$core$Json_Decode$int,
																	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$OrganizationExtended)))))))))))))))));
	return decoder;
}();
var _user$project$Networking$organizationExtendedWrapperDecoder = function () {
	var decoder = A3(
		_elm_lang$core$Json_Decode$map2,
		_user$project$Models$GetOrganizationDataResponseWrapper,
		A2(_elm_lang$core$Json_Decode$field, 'organization_data', _user$project$Networking$organizationExtendedDecoder),
		A2(_elm_lang$core$Json_Decode$field, 'token', _elm_lang$core$Json_Decode$string));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'data',
			_1: {ctor: '[]'}
		},
		decoder);
}();
var _user$project$Networking$simpleResponseDecoder = function () {
	var decoder = A3(
		_elm_lang$core$Json_Decode$map2,
		_user$project$Models$SimpleResponse,
		A2(_elm_lang$core$Json_Decode$field, 'success', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'response',
			_1: {ctor: '[]'}
		},
		decoder);
}();
var _user$project$Networking$extendedPostsListDecoder = function () {
	var decoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'post_likes',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'post_message',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'post_media_file',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'post_id',
					_elm_lang$core$Json_Decode$int,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'author_id',
						_elm_lang$core$Json_Decode$int,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'author_pic',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'author_desc',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'author_name',
									_elm_lang$core$Json_Decode$string,
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$ExtendedPostData)))))))));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'response',
			_1: {
				ctor: '::',
				_0: 'posts',
				_1: {ctor: '[]'}
			}
		},
		_elm_lang$core$Json_Decode$list(decoder));
}();
var _user$project$Networking$chatHistoryDecoder = function () {
	var decoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'inserted_at',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'receiver_is_organization',
			_elm_lang$core$Json_Decode$bool,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'sender_is_organization',
				_elm_lang$core$Json_Decode$bool,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'body',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'receiver_id',
						_elm_lang$core$Json_Decode$int,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'sender_id',
							_elm_lang$core$Json_Decode$int,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'id',
								_elm_lang$core$Json_Decode$int,
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$IncomingChatMessage))))))));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'response',
			_1: {
				ctor: '::',
				_0: 'messages',
				_1: {ctor: '[]'}
			}
		},
		_elm_lang$core$Json_Decode$list(decoder));
}();
var _user$project$Networking$unredMessagesDecoder = function () {
	var decoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'sender_picture_uri',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'inserted_at',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'receiver_is_organization',
				_elm_lang$core$Json_Decode$bool,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'sender_is_organization',
					_elm_lang$core$Json_Decode$bool,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'body',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'receiver_id',
							_elm_lang$core$Json_Decode$int,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'sender_id',
								_elm_lang$core$Json_Decode$int,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'id',
									_elm_lang$core$Json_Decode$int,
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$IncomingUnredChatMessage)))))))));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'response',
			_1: {
				ctor: '::',
				_0: 'unreds',
				_1: {ctor: '[]'}
			}
		},
		_elm_lang$core$Json_Decode$list(decoder));
}();
var _user$project$Networking$suggestionsDecoder = function () {
	var decoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'picture',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'description',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'name',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'id',
					_elm_lang$core$Json_Decode$int,
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$SuggestedUser)))));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'response',
			_1: {
				ctor: '::',
				_0: 'suggestions',
				_1: {ctor: '[]'}
			}
		},
		_elm_lang$core$Json_Decode$list(decoder));
}();
var _user$project$Networking$notificationsListDecoder = function () {
	var decoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'requestedIdeaId',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'notificationType',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'body',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'title',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'id',
						_elm_lang$core$Json_Decode$int,
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$NotificationItem))))));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'response',
			_1: {
				ctor: '::',
				_0: 'notifications',
				_1: {ctor: '[]'}
			}
		},
		_elm_lang$core$Json_Decode$list(decoder));
}();
var _user$project$Networking$postCommentDataDecoder = function () {
	var decoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'token',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'post_id',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'input_date',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'body',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'author_name',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'author_is_org',
							_elm_lang$core$Json_Decode$bool,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'author_id',
								_elm_lang$core$Json_Decode$int,
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$PostCommentData))))))));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'response',
			_1: {ctor: '[]'}
		},
		decoder);
}();
var _user$project$Networking$postCommentsDecoder = function () {
	var decoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'token',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'post_id',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'input_date',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'body',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'author_name',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'author_is_org',
							_elm_lang$core$Json_Decode$bool,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'author_id',
								_elm_lang$core$Json_Decode$int,
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$PostCommentData))))))));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'response',
			_1: {
				ctor: '::',
				_0: 'comments',
				_1: {ctor: '[]'}
			}
		},
		_elm_lang$core$Json_Decode$list(decoder));
}();
var _user$project$Networking$processedSearchDataDecoder = function () {
	var idea_decoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'innovator_pic',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'innovator_name',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'innovator_id',
				_elm_lang$core$Json_Decode$int,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'video_uri',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'picture_uris',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'price',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'tags',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'industry',
									_elm_lang$core$Json_Decode$string,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'idea_name',
										_elm_lang$core$Json_Decode$string,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'short_description',
											_elm_lang$core$Json_Decode$string,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'id',
												_elm_lang$core$Json_Decode$int,
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$IdeaData))))))))))));
	var post_decoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'post_likes',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'post_message',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'post_media_file',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'post_id',
					_elm_lang$core$Json_Decode$int,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'author_id',
						_elm_lang$core$Json_Decode$int,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'author_pic',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'author_desc',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'author_name',
									_elm_lang$core$Json_Decode$string,
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$ExtendedPostData)))))))));
	var organization_decoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'connections_count',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'rating',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'phone',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'username',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'interested_industries',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'industry',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'about_us',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'webpage',
									_elm_lang$core$Json_Decode$string,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'description',
										_elm_lang$core$Json_Decode$string,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'organizations_plan_id',
											_elm_lang$core$Json_Decode$int,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'complete_ideas_count',
												_elm_lang$core$Json_Decode$int,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'email',
													_elm_lang$core$Json_Decode$string,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'country',
														_elm_lang$core$Json_Decode$string,
														A3(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
															'pic_uri',
															_elm_lang$core$Json_Decode$string,
															A3(
																_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																'name',
																_elm_lang$core$Json_Decode$string,
																A3(
																	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																	'id',
																	_elm_lang$core$Json_Decode$int,
																	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$OrganizationExtended)))))))))))))))));
	var innovator_decoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'connections_count',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'phone',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'username',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'experience',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'education',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'about_me',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'description',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'innovators_plan_id',
									_elm_lang$core$Json_Decode$int,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'ideas_count',
										_elm_lang$core$Json_Decode$int,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'email',
											_elm_lang$core$Json_Decode$string,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'country',
												_elm_lang$core$Json_Decode$string,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'rating',
													_elm_lang$core$Json_Decode$int,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'pic_uri',
														_elm_lang$core$Json_Decode$string,
														A3(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
															'name',
															_elm_lang$core$Json_Decode$string,
															A3(
																_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																'id',
																_elm_lang$core$Json_Decode$int,
																_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$InnovatorExtended))))))))))))))));
	var decoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'posts',
		_elm_lang$core$Json_Decode$list(post_decoder),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'ideas',
			_elm_lang$core$Json_Decode$list(idea_decoder),
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'organizations',
				_elm_lang$core$Json_Decode$list(organization_decoder),
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'innovators',
					_elm_lang$core$Json_Decode$list(innovator_decoder),
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$ProcessedSearchDataWrapper)))));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'response',
			_1: {ctor: '[]'}
		},
		decoder);
}();
var _user$project$Networking$fullIdeaDataDecoder = function () {
	var decoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'long_description',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'innovator_pic',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'innovator_name',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'innovator_id',
					_elm_lang$core$Json_Decode$int,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'video_uri',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'picture_uris',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'price',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'tags',
									_elm_lang$core$Json_Decode$string,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'industry',
										_elm_lang$core$Json_Decode$string,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'idea_name',
											_elm_lang$core$Json_Decode$string,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'short_description',
												_elm_lang$core$Json_Decode$string,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'id',
													_elm_lang$core$Json_Decode$int,
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$FullIdeaData)))))))))))));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'response',
			_1: {ctor: '[]'}
		},
		decoder);
}();
var _user$project$Networking$signedNdasListDecoder = function () {
	var decoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'signing_date',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'idea_price',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'idea_industry',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'idea_name',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'idea_id',
						_elm_lang$core$Json_Decode$int,
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$SignedNDA))))));
	return A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'response',
			_1: {
				ctor: '::',
				_0: 'ndas',
				_1: {ctor: '[]'}
			}
		},
		_elm_lang$core$Json_Decode$list(decoder));
}();
var _user$project$Networking$signInDataEncoder = function (signInData) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'first_password',
				_1: _elm_lang$core$Json_Encode$string(signInData.first_password)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'second_password',
					_1: _elm_lang$core$Json_Encode$string(signInData.second_password)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Networking$promoDataEncoder = function (promoData) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'full_name',
				_1: _elm_lang$core$Json_Encode$string(promoData.full_name)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'email',
					_1: _elm_lang$core$Json_Encode$string(promoData.email)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'prefered_organization',
						_1: _elm_lang$core$Json_Encode$string(promoData.prefered_organization)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'short_description',
							_1: _elm_lang$core$Json_Encode$string(promoData.short_description)
						},
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Networking$innovatorRegisterDataEncoder = F2(
	function (tarrifPlan, regData) {
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'full_name',
					_1: _elm_lang$core$Json_Encode$string(regData.full_name)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'email',
						_1: _elm_lang$core$Json_Encode$string(regData.email)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'password',
							_1: _elm_lang$core$Json_Encode$string(regData.password)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'country',
								_1: _elm_lang$core$Json_Encode$string(regData.country)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'receive_newsletter',
									_1: _elm_lang$core$Json_Encode$bool(regData.receiveNewsletterAgreement)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'tariff_plan',
										_1: _elm_lang$core$Json_Encode$string(tarrifPlan)
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			});
	});
var _user$project$Networking$organizationRegisterDataEncoder = F2(
	function (tarrifPlan, regData) {
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'name',
					_1: _elm_lang$core$Json_Encode$string(regData.name)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'email',
						_1: _elm_lang$core$Json_Encode$string(regData.email)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'password',
							_1: _elm_lang$core$Json_Encode$string(regData.password)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'country',
								_1: _elm_lang$core$Json_Encode$string(regData.country)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'receive_newsletter',
									_1: _elm_lang$core$Json_Encode$bool(regData.receiveNewsletterAgreement)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'tariff_plan',
										_1: _elm_lang$core$Json_Encode$string(tarrifPlan)
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			});
	});
var _user$project$Networking$loginDataEncoder = function (loginData) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'email',
				_1: _elm_lang$core$Json_Encode$string(loginData.email)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'password',
					_1: _elm_lang$core$Json_Encode$string(loginData.password)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Networking$tokenEncoder = function (token) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'token',
				_1: _elm_lang$core$Json_Encode$string(token)
			},
			_1: {ctor: '[]'}
		});
};
var _user$project$Networking$getMemberDataStructEncoder = function (data) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'id',
				_1: _elm_lang$core$Json_Encode$int(data.id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'token',
					_1: _elm_lang$core$Json_Encode$string(data.token)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Networking$contactUsFormEncoder = function (data) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'name',
				_1: _elm_lang$core$Json_Encode$string(data.name)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'email',
					_1: _elm_lang$core$Json_Encode$string(data.email)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'message',
						_1: _elm_lang$core$Json_Encode$string(data.message)
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Networking$postDataEncoder = function (data) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'message',
				_1: _elm_lang$core$Json_Encode$string(data.message)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'media_file_uri',
					_1: _elm_lang$core$Json_Encode$string(data.mediaFileUri)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'innovator_id',
						_1: _elm_lang$core$Json_Encode$int(data.innovator_id)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'organization_id',
							_1: _elm_lang$core$Json_Encode$int(data.organization_id)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'token',
								_1: _elm_lang$core$Json_Encode$string(data.token)
							},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$Networking$ideaDataEncoder = function (data) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'innovator_id',
				_1: _elm_lang$core$Json_Encode$int(data.innovator_id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'short_description',
					_1: _elm_lang$core$Json_Encode$string(data.shortDescription)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'long_description',
						_1: _elm_lang$core$Json_Encode$string(data.longDescription)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'idea_name',
							_1: _elm_lang$core$Json_Encode$string(data.ideaName)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'industry',
								_1: _elm_lang$core$Json_Encode$string(data.industry)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'tags',
									_1: _elm_lang$core$Json_Encode$string(data.tags)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'price',
										_1: _elm_lang$core$Json_Encode$string(data.ideaPrice)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'picture_uris',
											_1: _elm_lang$core$Json_Encode$string(data.pictureUris)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'video_uri',
												_1: _elm_lang$core$Json_Encode$string(data.videoUri)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'token',
													_1: _elm_lang$core$Json_Encode$string(data.token)
												},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Networking$chatHistoryRequestEncoder = function (data) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'to_id',
				_1: _elm_lang$core$Json_Encode$int(data.to_id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'from_id',
					_1: _elm_lang$core$Json_Encode$int(data.from_id)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'to_is_organization',
						_1: _elm_lang$core$Json_Encode$bool(data.to_is_organization)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'from_is_organization',
							_1: _elm_lang$core$Json_Encode$bool(data.from_is_organization)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'token',
								_1: _elm_lang$core$Json_Encode$string(data.token)
							},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$Networking$unredMessagesRequestEncoder = function (data) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'receiver_id',
				_1: _elm_lang$core$Json_Encode$int(data.receiver_id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'receiver_is_org',
					_1: _elm_lang$core$Json_Encode$bool(data.receiver_is_organization)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'token',
						_1: _elm_lang$core$Json_Encode$string(data.token)
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Networking$makeConnectionDataEncoder = function (data) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'sender_id',
				_1: _elm_lang$core$Json_Encode$int(data.sender_id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'sender_is_organization',
					_1: _elm_lang$core$Json_Encode$bool(data.sender_is_organization)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'receiver_id',
						_1: _elm_lang$core$Json_Encode$int(data.receiver_id)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'receiver_is_organization',
							_1: _elm_lang$core$Json_Encode$bool(data.receiver_is_organization)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'token',
								_1: _elm_lang$core$Json_Encode$string(data.token)
							},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$Networking$updatedInnovatorSettingsEncoder = function (data) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'id',
				_1: _elm_lang$core$Json_Encode$int(data.id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'full_name',
					_1: _elm_lang$core$Json_Encode$string(
						A2(
							_elm_lang$core$Basics_ops['++'],
							data.name,
							A2(_elm_lang$core$Basics_ops['++'], ' ', data.surname)))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'picture_uri',
						_1: _elm_lang$core$Json_Encode$string(data.pic_uri)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'country',
							_1: _elm_lang$core$Json_Encode$string(data.country)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'email',
								_1: _elm_lang$core$Json_Encode$string(data.email)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'description',
									_1: _elm_lang$core$Json_Encode$string(data.description)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'about_me',
										_1: _elm_lang$core$Json_Encode$string(data.about_me)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'education',
											_1: _elm_lang$core$Json_Encode$string(data.education)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'experience',
												_1: _elm_lang$core$Json_Encode$string(data.experience)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'username',
													_1: _elm_lang$core$Json_Encode$string(data.username)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'phone',
														_1: _elm_lang$core$Json_Encode$string(data.phone)
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'token',
															_1: _elm_lang$core$Json_Encode$string(data.token)
														},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Networking$updateOrganizationDataEncoder = function (data) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'id',
				_1: _elm_lang$core$Json_Encode$int(data.id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'name',
					_1: _elm_lang$core$Json_Encode$string(data.name)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'logo_uri',
						_1: _elm_lang$core$Json_Encode$string(data.pic_uri)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'country',
							_1: _elm_lang$core$Json_Encode$string(data.country)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'email',
								_1: _elm_lang$core$Json_Encode$string(data.email)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'description',
									_1: _elm_lang$core$Json_Encode$string(data.description)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'webpage',
										_1: _elm_lang$core$Json_Encode$string(data.webpage)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'about_us',
											_1: _elm_lang$core$Json_Encode$string(data.about_us)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'industry',
												_1: _elm_lang$core$Json_Encode$string(data.industry)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'interested_industries',
													_1: _elm_lang$core$Json_Encode$string(data.interested_industries)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'username',
														_1: _elm_lang$core$Json_Encode$string(data.username)
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'phone',
															_1: _elm_lang$core$Json_Encode$string(data.phone)
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: 'token',
																_1: _elm_lang$core$Json_Encode$string(data.token)
															},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Networking$tariffPlanDataEncoder = function (data) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'id',
				_1: _elm_lang$core$Json_Encode$int(data.id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'is_organization',
					_1: _elm_lang$core$Json_Encode$bool(data.is_organization)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'tariff_plan_name',
						_1: _elm_lang$core$Json_Encode$string(data.tariff_plan_name)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'token',
							_1: _elm_lang$core$Json_Encode$string(data.token)
						},
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Networking$postCommentDataEncoder = function (data) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'author_id',
				_1: _elm_lang$core$Json_Encode$int(data.author_id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'author_is_org',
					_1: _elm_lang$core$Json_Encode$bool(data.author_is_org)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'body',
						_1: _elm_lang$core$Json_Encode$string(data.body)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'post_id',
							_1: _elm_lang$core$Json_Encode$int(data.post_id)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'token',
								_1: _elm_lang$core$Json_Encode$string(data.token)
							},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$Networking$searchDataEncoder = function (data) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'query',
				_1: _elm_lang$core$Json_Encode$string(data.query)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'token',
					_1: _elm_lang$core$Json_Encode$string(data.token)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Networking$fullDescReqWrapperEncoder = function (data) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'notification_type_code',
				_1: _elm_lang$core$Json_Encode$int(data.notification_type_code)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'requested_idea_id',
					_1: _elm_lang$core$Json_Encode$int(data.requested_idea_id)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'addressed_to',
						_1: _elm_lang$core$Json_Encode$int(data.addressed_to)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'addressed_to_is_org',
							_1: _elm_lang$core$Json_Encode$bool(data.addressed_to_is_org)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'requested_from',
								_1: _elm_lang$core$Json_Encode$int(data.requested_from)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'requested_from_is_org',
									_1: _elm_lang$core$Json_Encode$bool(data.requested_from_is_org)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'token',
										_1: _elm_lang$core$Json_Encode$string(data.token)
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Networking$acceptRejectFullDescWrapperEncoder = function (data) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'notif_id',
				_1: _elm_lang$core$Json_Encode$int(data.notif_id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'res_code',
					_1: _elm_lang$core$Json_Encode$int(data.res_code)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'token',
						_1: _elm_lang$core$Json_Encode$string(data.token)
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Networking$ndaDataEncoder = function (data) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'author_id',
				_1: _elm_lang$core$Json_Encode$int(data.author_id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'author_is_org',
					_1: _elm_lang$core$Json_Encode$bool(data.author_is_org)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'idea_id',
						_1: _elm_lang$core$Json_Encode$int(data.idea_id)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'recipient_id',
							_1: _elm_lang$core$Json_Encode$int(data.recipient_id)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'recipient_is_org',
								_1: _elm_lang$core$Json_Encode$bool(data.recipient_is_org)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'token',
									_1: _elm_lang$core$Json_Encode$string(data.token)
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};
var _user$project$Networking$userIdentifierWrapperEncoder = function (data) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'id',
				_1: _elm_lang$core$Json_Encode$int(data.id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'is_org',
					_1: _elm_lang$core$Json_Encode$bool(data.is_org)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'token',
						_1: _elm_lang$core$Json_Encode$string(data.token)
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Networking$fetchSuggestions = F2(
	function (data, uri) {
		var body = _elm_lang$http$Http$jsonBody(
			_user$project$Networking$getMemberDataStructEncoder(data));
		return A3(_elm_lang$http$Http$post, uri, body, _user$project$Networking$suggestionsDecoder);
	});
var _user$project$Networking$fetchSuggestionsCmd = F2(
	function (data, uri) {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Messages$OnFetchSuggestionsCompleted,
			A2(_user$project$Networking$fetchSuggestions, data, uri));
	});
var _user$project$Networking$api = 'http://localhost:4000/api/';
var _user$project$Networking$memberLoginUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'member/login');
var _user$project$Networking$memberLogin = function (memberData) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$loginDataEncoder(memberData));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$memberLoginUri, body, _user$project$Networking$loginDataDecoder);
};
var _user$project$Networking$memberLoginCmd = function (memberData) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnLoggingInMemberCompleted,
		_user$project$Networking$memberLogin(memberData));
};
var _user$project$Networking$fetchTopMembersUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'top_members');
var _user$project$Networking$topMembersFetch = A2(_elm_lang$http$Http$get, _user$project$Networking$fetchTopMembersUri, _user$project$Networking$topMembersDecoder);
var _user$project$Networking$topMembersFetchCmd = A2(_elm_lang$http$Http$send, _user$project$Messages$TopMembersFetchCompleted, _user$project$Networking$topMembersFetch);
var _user$project$Networking$organizationRegisterUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'organization/register');
var _user$project$Networking$organizationRegister = F2(
	function (registerData, tarrifPlan) {
		var body = _elm_lang$http$Http$jsonBody(
			A2(_user$project$Networking$organizationRegisterDataEncoder, tarrifPlan, registerData));
		return A3(_elm_lang$http$Http$post, _user$project$Networking$organizationRegisterUri, body, _user$project$Networking$registeredDataDecoder);
	});
var _user$project$Networking$organizationRegisterCmd = F2(
	function (registerData, tarrifPlan) {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Messages$CompanyRegisterCompleted,
			A2(_user$project$Networking$organizationRegister, registerData, tarrifPlan));
	});
var _user$project$Networking$innovatorRegisterUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'innovator/register');
var _user$project$Networking$innovatorRegister = F2(
	function (registerData, tarrifPlan) {
		var body = _elm_lang$http$Http$jsonBody(
			A2(_user$project$Networking$innovatorRegisterDataEncoder, tarrifPlan, registerData));
		return A3(_elm_lang$http$Http$post, _user$project$Networking$innovatorRegisterUri, body, _user$project$Networking$registeredDataDecoder);
	});
var _user$project$Networking$innovatorRegisterCmd = F2(
	function (registerData, tarrifPlan) {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Messages$InnovatorRegisterCompleted,
			A2(_user$project$Networking$innovatorRegister, registerData, tarrifPlan));
	});
var _user$project$Networking$promoRegisterUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'promo/registration');
var _user$project$Networking$promoRegister = function (promoData) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$promoDataEncoder(promoData));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$promoRegisterUri, body, _user$project$Networking$promoDataDecoder);
};
var _user$project$Networking$promoRegisterCmd = function (promoData) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$PromoRegistrationCallCompleted,
		_user$project$Networking$promoRegister(promoData));
};
var _user$project$Networking$adminPanelSignInUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'admin_login');
var _user$project$Networking$adminPanelSignIn = function (signInData) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$signInDataEncoder(signInData));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$adminPanelSignInUri, body, _user$project$Networking$signInDataDecoder);
};
var _user$project$Networking$adminPanelSignInCmd = function (signInData) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$AdminPanelSignInCompleted,
		_user$project$Networking$adminPanelSignIn(signInData));
};
var _user$project$Networking$signOutUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'sign_out');
var _user$project$Networking$signOut = function (token) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$tokenEncoder(token));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$signOutUri, body, _user$project$Networking$signOutResponseDecoder);
};
var _user$project$Networking$signOutCmd = function (token) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnSignOutCompleted,
		_user$project$Networking$signOut(token));
};
var _user$project$Networking$getInnovatorDataUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'get_innovator_data');
var _user$project$Networking$getInnovatorData = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$getMemberDataStructEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$getInnovatorDataUri, body, _user$project$Networking$innovatorExtendedWrapperDecoder);
};
var _user$project$Networking$getInnovatorDataCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnGetInnovatorDataCompleted,
		_user$project$Networking$getInnovatorData(data));
};
var _user$project$Networking$getOrganizationDataUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'get_organization_data');
var _user$project$Networking$getOrganizationData = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$getMemberDataStructEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$getOrganizationDataUri, body, _user$project$Networking$organizationExtendedWrapperDecoder);
};
var _user$project$Networking$getOrganizationDataCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnGetOrganizationDataCompleted,
		_user$project$Networking$getOrganizationData(data));
};
var _user$project$Networking$sendContactUsEmailUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'send_contact_email');
var _user$project$Networking$submitContactUsForm = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$contactUsFormEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$sendContactUsEmailUri, body, _user$project$Networking$simpleResponseDecoder);
};
var _user$project$Networking$submitContactUsFormCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnContactUsFormSubmitCompleted,
		_user$project$Networking$submitContactUsForm(data));
};
var _user$project$Networking$submitPostUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'submit_post');
var _user$project$Networking$submitNewPost = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$postDataEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$submitPostUri, body, _user$project$Networking$simpleResponseDecoder);
};
var _user$project$Networking$submitNewPostCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnSubmitPostCompleted,
		_user$project$Networking$submitNewPost(data));
};
var _user$project$Networking$submitIdeaUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'submit_idea');
var _user$project$Networking$submitNewIdea = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$ideaDataEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$submitIdeaUri, body, _user$project$Networking$simpleResponseDecoder);
};
var _user$project$Networking$submitNewIdeaCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnSubmitIdeaCompleted,
		_user$project$Networking$submitNewIdea(data));
};
var _user$project$Networking$fetchExtendedPostsUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'fetch_extended_posts');
var _user$project$Networking$fetchExtendedPosts = function (token) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$tokenEncoder(token));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$fetchExtendedPostsUri, body, _user$project$Networking$extendedPostsListDecoder);
};
var _user$project$Networking$fetchExtendedPostsCmd = function (token) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnFetchExtendedPostsCompleted,
		_user$project$Networking$fetchExtendedPosts(token));
};
var _user$project$Networking$fetchChatHistoryUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'fetch_chat_history');
var _user$project$Networking$fetchChatHistory = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$chatHistoryRequestEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$fetchChatHistoryUri, body, _user$project$Networking$chatHistoryDecoder);
};
var _user$project$Networking$fetchChatHistoryCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnChatHistoryFetchCompleted,
		_user$project$Networking$fetchChatHistory(data));
};
var _user$project$Networking$fetchUnredMessagesUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'fetch_unred_messages');
var _user$project$Networking$fetchUnredMessages = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$unredMessagesRequestEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$fetchUnredMessagesUri, body, _user$project$Networking$unredMessagesDecoder);
};
var _user$project$Networking$fetchUnredMessagesCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnFetchUnredChatMessagesCompleted,
		_user$project$Networking$fetchUnredMessages(data));
};
var _user$project$Networking$fetchSuggestedOrganizationsUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'fetch_suggested_companies');
var _user$project$Networking$fetchSuggestedInnovatorsUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'fetch_suggested_innovators');
var _user$project$Networking$makeConnectionUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'make_connection');
var _user$project$Networking$makeConnection = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$makeConnectionDataEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$makeConnectionUri, body, _user$project$Networking$simpleResponseDecoder);
};
var _user$project$Networking$makeConnectionCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnMakeConnectionCompleted,
		_user$project$Networking$makeConnection(data));
};
var _user$project$Networking$updateInnovatorSettingsUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'update_innovator_settings');
var _user$project$Networking$updateInnovatorSettings = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$updatedInnovatorSettingsEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$updateInnovatorSettingsUri, body, _user$project$Networking$innovatorExtendedWrapperDecoder);
};
var _user$project$Networking$updateInnovatorSettingsCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnUpdateInnovatorSettingsCompleted,
		_user$project$Networking$updateInnovatorSettings(data));
};
var _user$project$Networking$subscribeTariffPlanUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'subscribe_tariff_plan');
var _user$project$Networking$subscribeTariffPlan = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$tariffPlanDataEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$subscribeTariffPlanUri, body, _user$project$Networking$simpleResponseDecoder);
};
var _user$project$Networking$subscribeTariffPlanCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnSubscribeTariffPlanCompleted,
		_user$project$Networking$subscribeTariffPlan(data));
};
var _user$project$Networking$updateOrganizationSettingsUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'update_organization_settings');
var _user$project$Networking$updateOrganizationSettings = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$updateOrganizationDataEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$updateOrganizationSettingsUri, body, _user$project$Networking$organizationExtendedWrapperDecoder);
};
var _user$project$Networking$updateOrganizationSettingsCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnUpdateOrganizationSettingsCompleted,
		_user$project$Networking$updateOrganizationSettings(data));
};
var _user$project$Networking$markNotifAsRedUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'mark_notif_as_red');
var _user$project$Networking$markNotifAsRed = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$getMemberDataStructEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$markNotifAsRedUri, body, _user$project$Networking$simpleResponseDecoder);
};
var _user$project$Networking$markNotifAsRedCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnMarkNotifAsRedCompleted,
		_user$project$Networking$markNotifAsRed(data));
};
var _user$project$Networking$fetchNewNotifsUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'fetch_unred_notifs');
var _user$project$Networking$fetchNewNotifications = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$unredMessagesRequestEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$fetchNewNotifsUri, body, _user$project$Networking$notificationsListDecoder);
};
var _user$project$Networking$fetchNewNotificationsCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnFetchNewNotificationsCompleted,
		_user$project$Networking$fetchNewNotifications(data));
};
var _user$project$Networking$likePostUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'like_post');
var _user$project$Networking$likePost = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$getMemberDataStructEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$likePostUri, body, _user$project$Networking$simpleResponseDecoder);
};
var _user$project$Networking$likePostCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnPostLikedCompleted,
		_user$project$Networking$likePost(data));
};
var _user$project$Networking$createCommentUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'create_comment');
var _user$project$Networking$createComment = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$postCommentDataEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$createCommentUri, body, _user$project$Networking$postCommentDataDecoder);
};
var _user$project$Networking$createCommentCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnPostCommentSubmitCompleted,
		_user$project$Networking$createComment(data));
};
var _user$project$Networking$fetchCommentsUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'fetch_comments');
var _user$project$Networking$fetchPostComments = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$getMemberDataStructEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$fetchCommentsUri, body, _user$project$Networking$postCommentsDecoder);
};
var _user$project$Networking$fetchPostCommentsCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnPostCommentsFetchCompleted,
		_user$project$Networking$fetchPostComments(data));
};
var _user$project$Networking$processSearchUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'process_search');
var _user$project$Networking$processSearch = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$searchDataEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$processSearchUri, body, _user$project$Networking$processedSearchDataDecoder);
};
var _user$project$Networking$processSearchCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnProcessSearchCompleted,
		_user$project$Networking$processSearch(data));
};
var _user$project$Networking$checkConnectionAndConnectUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'check_connection_and_connect');
var _user$project$Networking$checkConnectionAndConnect = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$makeConnectionDataEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$checkConnectionAndConnectUri, body, _user$project$Networking$simpleResponseDecoder);
};
var _user$project$Networking$checkConnectionAndConnectCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnCheckConnectionAndConnectCompleted,
		_user$project$Networking$checkConnectionAndConnect(data));
};
var _user$project$Networking$createFullDescReqNotifUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'create_full_desc_req_notification');
var _user$project$Networking$fullDescRequest = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$fullDescReqWrapperEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$createFullDescReqNotifUri, body, _user$project$Networking$simpleResponseDecoder);
};
var _user$project$Networking$fullDescRequestCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnFullDescRequestCompleted,
		_user$project$Networking$fullDescRequest(data));
};
var _user$project$Networking$acceptOrRejectFullDescReqUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'accept_or_reject_full_desc_req');
var _user$project$Networking$acceptRejectFullDesc = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$acceptRejectFullDescWrapperEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$acceptOrRejectFullDescReqUri, body, _user$project$Networking$simpleResponseDecoder);
};
var _user$project$Networking$acceptRejectFullDescCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnAcceptRejectFullDescCompleted,
		_user$project$Networking$acceptRejectFullDesc(data));
};
var _user$project$Networking$getFullIdeaUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'get_full_idea');
var _user$project$Networking$getFullIdeaData = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$getMemberDataStructEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$getFullIdeaUri, body, _user$project$Networking$fullIdeaDataDecoder);
};
var _user$project$Networking$getFullIdeaDataCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnGetFullIdeaDataCompleted,
		_user$project$Networking$getFullIdeaData(data));
};
var _user$project$Networking$saveNdaUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'save_nda');
var _user$project$Networking$saveNda = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$ndaDataEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$saveNdaUri, body, _user$project$Networking$simpleResponseDecoder);
};
var _user$project$Networking$saveNdaCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnSaveNdaCallCompleted,
		_user$project$Networking$saveNda(data));
};
var _user$project$Networking$fetchSignedNdasUri = A2(_elm_lang$core$Basics_ops['++'], _user$project$Networking$api, 'fetch_signed_ndas');
var _user$project$Networking$fetchSignedNdas = function (data) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Networking$userIdentifierWrapperEncoder(data));
	return A3(_elm_lang$http$Http$post, _user$project$Networking$fetchSignedNdasUri, body, _user$project$Networking$signedNdasListDecoder);
};
var _user$project$Networking$fetchSignedNdasCmd = function (data) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Messages$OnFetchSignedNdasCompleted,
		_user$project$Networking$fetchSignedNdas(data));
};

var _user$project$TypeToStringUtils$stringToLang = function (langStr) {
	var lang = function () {
		var _p0 = langStr;
		switch (_p0) {
			case 'arm':
				return _user$project$Models$Arm;
			case 'eng':
				return _user$project$Models$Eng;
			default:
				return _user$project$Models$Eng;
		}
	}();
	return lang;
};
var _user$project$TypeToStringUtils$langToString = function (lang) {
	var langStr = function () {
		var _p1 = lang;
		if (_p1.ctor === 'Arm') {
			return 'arm';
		} else {
			return 'eng';
		}
	}();
	return langStr;
};
var _user$project$TypeToStringUtils$stringToDesktopPage = function (pageStr) {
	var page = function () {
		var _p2 = pageStr;
		switch (_p2) {
			case 'home':
				return _user$project$Models$HomePage;
			case 'newsfeed':
				return _user$project$Models$NewsfeedPage;
			case 'profile':
				return _user$project$Models$ProfilePage;
			case 'newIdea':
				return _user$project$Models$NewIdeaPage;
			case 'settings':
				return _user$project$Models$SettingsPage;
			case 'tariffPlans':
				return _user$project$Models$TariffPlansPage;
			case 'search':
				return _user$project$Models$SearchPage;
			case 'seeOtherInnovator':
				return _user$project$Models$SeeOtherInnovatorPage;
			case 'seeOtherOrganization':
				return _user$project$Models$SeeOtherOrganizationPage;
			case 'viewIdea':
				return _user$project$Models$ViewIdeaPage;
			case 'viewFullIdea':
				return _user$project$Models$ViewFullIdeaPage;
			case 'desktopNDA':
				return _user$project$Models$NDAsPage;
			default:
				return _user$project$Models$HomePage;
		}
	}();
	return page;
};
var _user$project$TypeToStringUtils$desktopPageToString = function (page) {
	var pageStr = function () {
		var _p3 = page;
		switch (_p3.ctor) {
			case 'HomePage':
				return 'home';
			case 'NewsfeedPage':
				return 'newsfeed';
			case 'ProfilePage':
				return 'profile';
			case 'NewIdeaPage':
				return 'newIdea';
			case 'SettingsPage':
				return 'settings';
			case 'TariffPlansPage':
				return 'tariffPlans';
			case 'SearchPage':
				return 'search';
			case 'SeeOtherInnovatorPage':
				return 'seeOtherInnovator';
			case 'SeeOtherOrganizationPage':
				return 'seeOtherOrganization';
			case 'ViewIdeaPage':
				return 'viewIdea';
			case 'ViewFullIdeaPage':
				return 'viewFullIdea';
			default:
				return 'desktopNDA';
		}
	}();
	return pageStr;
};
var _user$project$TypeToStringUtils$mobilePageToString = function (page) {
	var pageStr = function () {
		var _p4 = page;
		switch (_p4.ctor) {
			case 'MobileHomePage':
				return 'home';
			case 'MobileProfilePage':
				return 'profile';
			case 'MobileSettingsPage':
				return 'settings';
			case 'MobilePostAnIdeaPage':
				return 'newIdea';
			case 'MobileSearchPage':
				return 'search';
			case 'MobileSeeOtherInnovatorPage':
				return 'seeOtherInnovator';
			case 'MobileSeeOtherOrganizationPage':
				return 'seeOtherOrganization';
			case 'MobileViewIdeaPage':
				return 'viewIdea';
			case 'MobileViewFullIdeaPage':
				return 'viewFullIdea';
			default:
				return 'mobileNDA';
		}
	}();
	return pageStr;
};
var _user$project$TypeToStringUtils$stringToMobilePage = function (pageStr) {
	var page = function () {
		var _p5 = pageStr;
		switch (_p5) {
			case 'home':
				return _user$project$Models$MobileHomePage;
			case 'profile':
				return _user$project$Models$MobileProfilePage;
			case 'settings':
				return _user$project$Models$MobileSettingsPage;
			case 'newIdea':
				return _user$project$Models$MobilePostAnIdeaPage;
			case 'search':
				return _user$project$Models$MobileSearchPage;
			case 'seeOtherInnovator':
				return _user$project$Models$MobileSeeOtherInnovatorPage;
			case 'seeOtherOrganization':
				return _user$project$Models$MobileSeeOtherOrganizationPage;
			case 'viewIdea':
				return _user$project$Models$MobileViewIdeaPage;
			case 'viewFullIdea':
				return _user$project$Models$MobileViewFullIdeaPage;
			case 'mobileNDA':
				return _user$project$Models$MobileNDAsPage;
			default:
				return _user$project$Models$MobileHomePage;
		}
	}();
	return page;
};

var _user$project$Updater$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'OnConnectInitiated':
				var currentUser = model.loggedInMember;
				var data = A5(_user$project$Models$ConnectionData, currentUser.id, currentUser.isOrganization, _p0._0, _p0._1, currentUser.token);
				var cmd = _user$project$Networking$checkConnectionAndConnectCmd(data);
				return {ctor: '_Tuple2', _0: model, _1: cmd};
			case 'OnCheckConnectionAndConnectCompleted':
				var _p1 = _p0._0;
				if (_p1.ctor === 'Ok') {
					var _p2 = _p1._0;
					var currentConnections = model.connections;
					var updatedConnections = _elm_lang$core$String$isEmpty(_p2.success) ? currentConnections : A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: A2(_user$project$Models$MapItem, _p2.success, _p2.error),
							_1: {ctor: '[]'}
						},
						currentConnections);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{connections: updatedConnections}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnSeeOtherInnovator':
				var _p3 = _p0._0;
				var pageHistoryString = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$desktopPageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$SeeOtherInnovatorPage, _1: model.pageHistory});
				var mobilePageHistoryStr = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$mobilePageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$MobileSeeOtherInnovatorPage, _1: model.mobilePageHistory});
				var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(_user$project$Models$MobileSeeOtherInnovatorPage);
				var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
					_user$project$TypeToStringUtils$langToString(model.language))(
					_user$project$TypeToStringUtils$desktopPageToString(_user$project$Models$SeeOtherInnovatorPage))(_p3)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
				var cmd = _user$project$Ports$cacheAllData(cachedData);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							seeOtherInnovator: _p3,
							desktopPage: _user$project$Models$SeeOtherInnovatorPage,
							dashboardMobilePage: _user$project$Models$MobileSeeOtherInnovatorPage,
							mobilePageHistory: {ctor: '::', _0: _user$project$Models$MobileSeeOtherInnovatorPage, _1: model.mobilePageHistory},
							pageHistory: {ctor: '::', _0: _user$project$Models$SeeOtherInnovatorPage, _1: model.pageHistory}
						}),
					_1: cmd
				};
			case 'OnSeeOtherOrganization':
				var _p4 = _p0._0;
				var pageHistoryString = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$desktopPageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$SeeOtherOrganizationPage, _1: model.pageHistory});
				var mobilePageHistoryStr = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$mobilePageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$MobileSeeOtherOrganizationPage, _1: model.mobilePageHistory});
				var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(_user$project$Models$MobileSeeOtherOrganizationPage);
				var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
					_user$project$TypeToStringUtils$langToString(model.language))(
					_user$project$TypeToStringUtils$desktopPageToString(_user$project$Models$SeeOtherOrganizationPage))(model.seeOtherInnovator)(_p4)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
				var cmd = _user$project$Ports$cacheAllData(cachedData);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							seeOtherOrganization: _p4,
							desktopPage: _user$project$Models$SeeOtherOrganizationPage,
							dashboardMobilePage: _user$project$Models$MobileSeeOtherOrganizationPage,
							mobilePageHistory: {ctor: '::', _0: _user$project$Models$MobileSeeOtherOrganizationPage, _1: model.mobilePageHistory},
							pageHistory: {ctor: '::', _0: _user$project$Models$SeeOtherOrganizationPage, _1: model.pageHistory}
						}),
					_1: cmd
				};
			case 'OnSubmitSearch':
				var pageHistoryString = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$desktopPageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$SearchPage, _1: model.pageHistory});
				var mobilePageHistoryStr = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$mobilePageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$MobileSearchPage, _1: model.mobilePageHistory});
				var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(_user$project$Models$MobileSearchPage);
				var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
					_user$project$TypeToStringUtils$langToString(model.language))(
					_user$project$TypeToStringUtils$desktopPageToString(_user$project$Models$SearchPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
				var currentUser = model.loggedInMember;
				var data = model.searchProgress;
				var msVisibility = _elm_lang$core$String$isEmpty(data.typedSearch) ? true : false;
				var cmd = _elm_lang$core$String$isEmpty(data.typedSearch) ? _elm_lang$core$Platform_Cmd$none : _elm_lang$core$Platform_Cmd$batch(
					{
						ctor: '::',
						_0: _user$project$Networking$processSearchCmd(
							A2(_user$project$Models$SearchData, data.typedSearch, currentUser.token)),
						_1: {
							ctor: '::',
							_0: _user$project$Ports$cacheAllData(cachedData),
							_1: {ctor: '[]'}
						}
					});
				var updatedData = _elm_lang$core$String$isEmpty(data.typedSearch) ? data : _elm_lang$core$Native_Utils.update(
					data,
					{typedSearch: '', progressStatus: _user$project$Models$Loading});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							searchProgress: updatedData,
							desktopPage: _user$project$Models$SearchPage,
							dashboardMobilePage: _user$project$Models$MobileSearchPage,
							mobilePageHistory: {ctor: '::', _0: _user$project$Models$MobileSearchPage, _1: model.mobilePageHistory},
							pageHistory: {ctor: '::', _0: _user$project$Models$SearchPage, _1: model.pageHistory},
							mobileSearchVisible: msVisibility
						}),
					_1: cmd
				};
			case 'OnInputSearch':
				var oldData = model.searchProgress;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{typedSearch: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{searchProgress: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnProcessSearchCompleted':
				var _p5 = _p0._0;
				if (_p5.ctor === 'Ok') {
					var oldData = model.searchProgress;
					var updatedData = _elm_lang$core$Native_Utils.update(
						oldData,
						{progressStatus: _user$project$Models$Loaded, typedSearch: ''});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{searchedData: _p5._0, searchProgress: updatedData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var oldData = model.searchProgress;
					var updatedData = _elm_lang$core$Native_Utils.update(
						oldData,
						{progressStatus: _user$project$Models$Idle});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{searchProgress: updatedData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OnDoubleLocationSwitch':
				var cmd = _elm_lang$navigation$Navigation$newUrl(
					A2(_elm_lang$core$Basics_ops['++'], '#', _p0._0));
				return {ctor: '_Tuple2', _0: model, _1: cmd};
			case 'OnSwitchToHomePage':
				var cmd = _elm_lang$core$Platform_Cmd$batch(
					{
						ctor: '::',
						_0: _user$project$Ports$reverseBackgroundImage(''),
						_1: {
							ctor: '::',
							_0: _elm_lang$navigation$Navigation$newUrl(
								A2(_elm_lang$core$Basics_ops['++'], '#', _p0._0)),
							_1: {ctor: '[]'}
						}
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{pricingOpened: _user$project$Models$Closed}),
					_1: cmd
				};
			case 'OnOpenNDAsIdea':
				var currentUser = model.loggedInMember;
				var cmd = _user$project$Networking$getFullIdeaDataCmd(
					A2(_user$project$Models$GetDataRequestStruct, _p0._0, currentUser.token));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							desktopPage: _user$project$Models$ViewFullIdeaPage,
							dashboardMobilePage: _user$project$Models$MobileViewFullIdeaPage,
							mobilePageHistory: {ctor: '::', _0: _user$project$Models$MobileViewFullIdeaPage, _1: model.mobilePageHistory},
							pageHistory: {ctor: '::', _0: _user$project$Models$ViewFullIdeaPage, _1: model.pageHistory}
						}),
					_1: cmd
				};
			case 'OnFetchSignedNdasCompleted':
				var _p6 = _p0._0;
				if (_p6.ctor === 'Ok') {
					var _p7 = _p6._0;
					var pageHistoryString = A2(
						_elm_lang$core$List$map,
						function (p) {
							return _user$project$TypeToStringUtils$desktopPageToString(p);
						},
						model.pageHistory);
					var mobilePageHistoryStr = A2(
						_elm_lang$core$List$map,
						function (p) {
							return _user$project$TypeToStringUtils$mobilePageToString(p);
						},
						model.mobilePageHistory);
					var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(model.dashboardMobilePage);
					var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
						_user$project$TypeToStringUtils$langToString(model.language))(
						_user$project$TypeToStringUtils$desktopPageToString(model.desktopPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(_p7);
					var cmd = _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _user$project$Ports$cacheAllData(cachedData),
							_1: {ctor: '[]'}
						});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{signedNDAs: _p7}),
						_1: cmd
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								signedNDAs: {ctor: '[]'}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OnSwitchNDAsPage':
				var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(_user$project$Models$MobileNDAsPage);
				var updatedPageHistory = {ctor: '::', _0: _user$project$Models$NDAsPage, _1: model.pageHistory};
				var pageHistoryString = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$desktopPageToString(p);
					},
					updatedPageHistory);
				var updatedMobilePageHistory = {ctor: '::', _0: _user$project$Models$MobileNDAsPage, _1: model.mobilePageHistory};
				var mobilePageHistoryStr = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$mobilePageToString(p);
					},
					updatedMobilePageHistory);
				var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
					_user$project$TypeToStringUtils$langToString(model.language))(
					_user$project$TypeToStringUtils$desktopPageToString(_user$project$Models$NDAsPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
				var currentUser = model.loggedInMember;
				var cmd = _elm_lang$core$Platform_Cmd$batch(
					{
						ctor: '::',
						_0: _user$project$Ports$cacheAllData(cachedData),
						_1: {
							ctor: '::',
							_0: _user$project$Networking$fetchSignedNdasCmd(
								A3(_user$project$Models$UserIdentifierWrapper, currentUser.id, currentUser.isOrganization, currentUser.token)),
							_1: {ctor: '[]'}
						}
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{dashboardMobilePage: _user$project$Models$MobileNDAsPage, desktopPage: _user$project$Models$NDAsPage, mobilePageHistory: updatedMobilePageHistory, pageHistory: updatedPageHistory}),
					_1: cmd
				};
			case 'OnSwitchToDashboard':
				var cmd = _elm_lang$core$Platform_Cmd$batch(
					{
						ctor: '::',
						_0: _elm_lang$navigation$Navigation$newUrl('#dashboard'),
						_1: {
							ctor: '::',
							_0: _user$project$Ports$setWhiteBackground(''),
							_1: {ctor: '[]'}
						}
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{dashboardMobilePage: _user$project$Models$MobileHomePage}),
					_1: cmd
				};
			case 'OnFetchCachedDataCompleted':
				var _p8 = _p0._0;
				var pHistory = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$stringToDesktopPage(p);
					},
					_p8.pageHistory);
				var mPageHistory = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$stringToMobilePage(p);
					},
					_p8.mobilePageHistory);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							loggedInMember: _p8.loggedInMember,
							dashboardMobilePage: _user$project$TypeToStringUtils$stringToMobilePage(_p8.dashboardMobilePage),
							currentInnovatorExtended: _p8.currentInnovatorExtended,
							currentOrganizationExtended: _p8.currentOrganizationExtended,
							postList: _p8.postList,
							currentChatHistory: _p8.currentChatHistory,
							pendingUnredMessages: _p8.pendingUnredMessages,
							suggestedUsers: _p8.suggestedUsers,
							notifications: _p8.notifications,
							language: _user$project$TypeToStringUtils$stringToLang(_p8.language),
							desktopPage: _user$project$TypeToStringUtils$stringToDesktopPage(_p8.desktopPage),
							seeOtherInnovator: _p8.seeOtherInnovator,
							seeOtherOrganization: _p8.seeOtherOrganization,
							viewingCurrentIdea: _p8.viewingCurrentIdea,
							viewingCurrentFullIdea: _p8.viewingCurrentFullIdea,
							mobilePageHistory: mPageHistory,
							pageHistory: pHistory,
							signedNDAs: _p8.signedNDAs
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSaveNdaCallCompleted':
				var _p9 = _p0._0;
				if (_p9.ctor === 'Ok') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnNDAAccepted':
				var currentIdeaInView = model.viewingCurrentFullIdea;
				var currentUser = model.loggedInMember;
				var data = A6(_user$project$Models$NDAFullDataWrapper, currentIdeaInView.innovator_id, false, currentIdeaInView.id, currentUser.id, currentUser.isOrganization, currentUser.token);
				var cmd = _user$project$Networking$saveNdaCmd(data);
				return {ctor: '_Tuple2', _0: model, _1: cmd};
			case 'OnNDARejected':
				var pageHistoryString = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$desktopPageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$NewsfeedPage, _1: model.pageHistory});
				var mobilePageHistoryStr = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$mobilePageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$MobileHomePage, _1: model.mobilePageHistory});
				var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(_user$project$Models$MobileHomePage);
				var emptyFullIdea = _user$project$Models$FullIdeaData(0)('')('')('')('')('')('')('')(0)('')('')('');
				var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
					_user$project$TypeToStringUtils$langToString(model.language))(
					_user$project$TypeToStringUtils$desktopPageToString(_user$project$Models$NewsfeedPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(emptyFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
				var cmd = _user$project$Ports$cacheAllData(cachedData);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							viewingCurrentFullIdea: emptyFullIdea,
							desktopPage: _user$project$Models$NewsfeedPage,
							dashboardMobilePage: _user$project$Models$MobileHomePage,
							mobilePageHistory: {ctor: '::', _0: _user$project$Models$MobileHomePage, _1: model.mobilePageHistory},
							pageHistory: {ctor: '::', _0: _user$project$Models$NewsfeedPage, _1: model.pageHistory}
						}),
					_1: cmd
				};
			case 'OnGetFullIdeaDataCompleted':
				var _p10 = _p0._0;
				if (_p10.ctor === 'Ok') {
					var _p11 = _p10._0;
					var viewingFullIdea = model.viewingCurrentFullIdea;
					var updatedCurrentFullIdea = _elm_lang$core$Native_Utils.eq(_p11.id, 0) ? viewingFullIdea : _p11;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{viewingCurrentFullIdea: updatedCurrentFullIdea}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnFullDescRequestInitiated':
				var currentUser = model.loggedInMember;
				var data = A7(_user$project$Models$FullDescReqWrapper, 0, _p0._0, _p0._1, false, currentUser.id, currentUser.isOrganization, currentUser.token);
				var cmd = _user$project$Networking$fullDescRequestCmd(data);
				return {ctor: '_Tuple2', _0: model, _1: cmd};
			case 'OnFullDescRequestCompleted':
				var _p12 = _p0._0;
				if (_p12.ctor === 'Ok') {
					var hasError = (!_elm_lang$core$String$isEmpty(_p12._0.error)) ? true : false;
					var nextDesktopPage = hasError ? model.desktopPage : _user$project$Models$NewsfeedPage;
					var nextMobilePage = hasError ? model.dashboardMobilePage : _user$project$Models$MobileHomePage;
					var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(nextMobilePage);
					var updatedPageHistory = hasError ? model.pageHistory : {ctor: '::', _0: _user$project$Models$NewsfeedPage, _1: model.pageHistory};
					var pageHistoryString = A2(
						_elm_lang$core$List$map,
						function (p) {
							return _user$project$TypeToStringUtils$desktopPageToString(p);
						},
						updatedPageHistory);
					var mobileUpdatedPageHistory = hasError ? model.mobilePageHistory : {ctor: '::', _0: _user$project$Models$MobileHomePage, _1: model.mobilePageHistory};
					var mobilePageHistoryStr = A2(
						_elm_lang$core$List$map,
						function (p) {
							return _user$project$TypeToStringUtils$mobilePageToString(p);
						},
						mobileUpdatedPageHistory);
					var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
						_user$project$TypeToStringUtils$langToString(model.language))(
						_user$project$TypeToStringUtils$desktopPageToString(nextDesktopPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
					var cmd = _user$project$Ports$cacheAllData(cachedData);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{desktopPage: nextDesktopPage, dashboardMobilePage: nextMobilePage, mobilePageHistory: mobileUpdatedPageHistory, pageHistory: updatedPageHistory}),
						_1: cmd
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnViewIdeaPageSwitch':
				var _p13 = _p0._0;
				var pageHistoryString = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$desktopPageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$ViewIdeaPage, _1: model.pageHistory});
				var mobilePageHistoryStr = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$mobilePageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$MobileViewIdeaPage, _1: model.mobilePageHistory});
				var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(_user$project$Models$MobileViewIdeaPage);
				var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
					_user$project$TypeToStringUtils$langToString(model.language))(
					_user$project$TypeToStringUtils$desktopPageToString(_user$project$Models$ViewIdeaPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(_p13)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
				var cmd = _user$project$Ports$cacheAllData(cachedData);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							viewingCurrentIdea: _p13,
							desktopPage: _user$project$Models$ViewIdeaPage,
							dashboardMobilePage: _user$project$Models$MobileViewIdeaPage,
							mobilePageHistory: {ctor: '::', _0: _user$project$Models$MobileViewIdeaPage, _1: model.mobilePageHistory},
							pageHistory: {ctor: '::', _0: _user$project$Models$ViewIdeaPage, _1: model.pageHistory}
						}),
					_1: cmd
				};
			case 'OnToggleMobileSearchInput':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mobileSearchVisible: !model.mobileSearchVisible}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnShareProfileOnFacebook':
				var cmd = _user$project$Ports$shareProfileOnFacebook(_p0._0);
				return {ctor: '_Tuple2', _0: model, _1: cmd};
			case 'OnSharePostOnFacebook':
				var cmd = _user$project$Ports$sharePostOnFacebook(_p0._0);
				return {ctor: '_Tuple2', _0: model, _1: cmd};
			case 'OnSubmitComment':
				var commentData = model.currentCommentData;
				var selectedPostId = model.currentPostWithComments;
				var currentUser = model.loggedInMember;
				var data = A7(_user$project$Models$PostCommentData, currentUser.id, currentUser.isOrganization, '', commentData.body, '', selectedPostId, currentUser.token);
				var cmd = _user$project$Networking$createCommentCmd(data);
				return {ctor: '_Tuple2', _0: model, _1: cmd};
			case 'OnCurrentPostCommentInput':
				var oldCommentData = model.currentCommentData;
				var updatedCommentData = _elm_lang$core$Native_Utils.update(
					oldCommentData,
					{body: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentCommentData: updatedCommentData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnPostCommentsFetchCompleted':
				var _p14 = _p0._0;
				if (_p14.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{currentPostComments: _p14._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnPostCommentsClicked':
				var _p15 = _p0._0;
				var currentUser = model.loggedInMember;
				var cmd = _user$project$Networking$fetchPostCommentsCmd(
					A2(_user$project$Models$GetDataRequestStruct, _p15, currentUser.token));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currentPostComments: {ctor: '[]'},
							currentCommentData: A7(_user$project$Models$PostCommentData, 0, false, '', '', '', 0, ''),
							currentPostWithComments: _p15
						}),
					_1: cmd
				};
			case 'OnPostCommentSubmitCompleted':
				var _p16 = _p0._0;
				if (_p16.ctor === 'Ok') {
					var _p17 = _p16._0;
					var currentPostCommentsOld = model.currentPostComments;
					var currentPostCommentsUpdated = _elm_lang$core$String$isEmpty(_p17.body) ? currentPostCommentsOld : A2(
						_elm_lang$core$Basics_ops['++'],
						currentPostCommentsOld,
						{
							ctor: '::',
							_0: _p17,
							_1: {ctor: '[]'}
						});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{currentPostComments: currentPostCommentsUpdated}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnPostLikedCompleted':
				var _p18 = _p0._0;
				if (_p18.ctor === 'Ok') {
					var updatedPostIdStr = _p18._0.success;
					var oldList = model.postList;
					var updatedPostList = _elm_lang$core$String$isEmpty(updatedPostIdStr) ? oldList : A2(
						_elm_lang$core$List$map,
						function (p) {
							return _elm_lang$core$Native_Utils.eq(
								_elm_lang$core$Basics$toString(p.post_id),
								updatedPostIdStr) ? A8(_user$project$Models$ExtendedPostData, p.author_name, p.author_desc, p.author_pic, p.author_id, p.post_id, p.post_media_file, p.post_message, p.post_likes + 1) : p;
						},
						oldList);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{postList: updatedPostList}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnPostLikeClicked':
				var currentUser = model.loggedInMember;
				var cmd = _user$project$Networking$likePostCmd(
					A2(_user$project$Models$GetDataRequestStruct, _p0._0, currentUser.token));
				return {ctor: '_Tuple2', _0: model, _1: cmd};
			case 'OnSwitchLang':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{language: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnViewFullIdeaData':
				var pageHistoryString = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$desktopPageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$ViewFullIdeaPage, _1: model.pageHistory});
				var mobilePageHistoryStr = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$mobilePageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$MobileViewFullIdeaPage, _1: model.mobilePageHistory});
				var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(_user$project$Models$MobileViewFullIdeaPage);
				var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
					_user$project$TypeToStringUtils$langToString(model.language))(
					_user$project$TypeToStringUtils$desktopPageToString(_user$project$Models$ViewFullIdeaPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
				var langString = _elm_lang$core$Native_Utils.eq(model.language, _user$project$Models$Arm) ? 'arm' : (_elm_lang$core$Native_Utils.eq(model.language, _user$project$Models$Eng) ? 'eng' : '');
				var currentOrganization = model.currentOrganizationExtended;
				var currentUser = model.loggedInMember;
				var cmd = _elm_lang$core$Platform_Cmd$batch(
					{
						ctor: '::',
						_0: _user$project$Networking$getFullIdeaDataCmd(
							A2(_user$project$Models$GetDataRequestStruct, _p0._0, currentUser.token)),
						_1: {
							ctor: '::',
							_0: _user$project$Networking$markNotifAsRedCmd(
								A2(_user$project$Models$GetDataRequestStruct, _p0._1, currentUser.token)),
							_1: {
								ctor: '::',
								_0: _user$project$Ports$showNDAConfirmDialog(
									A3(_user$project$Ports$NDADataWrapper, currentOrganization.name, _p0._2, langString)),
								_1: {
									ctor: '::',
									_0: _user$project$Ports$cacheAllData(cachedData),
									_1: {ctor: '[]'}
								}
							}
						}
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							desktopPage: _user$project$Models$ViewFullIdeaPage,
							dashboardMobilePage: _user$project$Models$MobileViewFullIdeaPage,
							mobilePageHistory: {ctor: '::', _0: _user$project$Models$MobileViewFullIdeaPage, _1: model.mobilePageHistory},
							pageHistory: {ctor: '::', _0: _user$project$Models$ViewFullIdeaPage, _1: model.pageHistory}
						}),
					_1: cmd
				};
			case 'OnAcceptRejectFullDescInitiated':
				var currentUser = model.loggedInMember;
				var data = A3(_user$project$Models$AcceptRejectFullDescWrapper, _p0._0, _p0._1, currentUser.token);
				var cmd = _user$project$Networking$acceptRejectFullDescCmd(data);
				return {ctor: '_Tuple2', _0: model, _1: cmd};
			case 'OnAcceptRejectFullDescCompleted':
				var _p19 = _p0._0;
				if (_p19.ctor === 'Ok') {
					var _p20 = _p19._0;
					var oldNotifs = model.notifications;
					var updatedNotifs = _elm_lang$core$String$isEmpty(_p20.error) ? A2(
						_elm_lang$core$List$filter,
						function (n) {
							return !_elm_lang$core$Native_Utils.eq(
								_elm_lang$core$Basics$toString(n.id),
								_p20.success);
						},
						oldNotifs) : oldNotifs;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{notifications: updatedNotifs}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnRegularNewNotifsFetch':
				var loginData = model.loggedInMember;
				var unredMessagesRequestWrapper = A3(_user$project$Models$UnredChatMessagesRequestWrapper, loginData.id, loginData.isOrganization, loginData.token);
				var cmd = _user$project$Networking$fetchNewNotificationsCmd(unredMessagesRequestWrapper);
				return {ctor: '_Tuple2', _0: model, _1: cmd};
			case 'OnMarkNotifAsRedCompleted':
				var _p21 = _p0._0;
				if (_p21.ctor === 'Ok') {
					var _p22 = _p21._0;
					var notifsOldList = model.notifications;
					var notifId = _elm_lang$core$String$isEmpty(_p22.success) ? '0' : _p22.success;
					var updatedList = A2(
						_elm_lang$core$List$filter,
						function (n) {
							return !_elm_lang$core$Native_Utils.eq(
								_elm_lang$core$Basics$toString(n.id),
								notifId);
						},
						notifsOldList);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{notifications: updatedList}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnNewNotifItemClick':
				var currentUser = model.loggedInMember;
				var cmd = _user$project$Networking$markNotifAsRedCmd(
					A2(_user$project$Models$GetDataRequestStruct, _p0._0, currentUser.token));
				return {ctor: '_Tuple2', _0: model, _1: cmd};
			case 'OnNewNotifsVisibilityToggle':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newNotificationsVisible: !model.newNotificationsVisible}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnFetchNewNotificationsCompleted':
				var _p23 = _p0._0;
				if (_p23.ctor === 'Ok') {
					var _p24 = _p23._0;
					var pageHistoryString = A2(
						_elm_lang$core$List$map,
						function (p) {
							return _user$project$TypeToStringUtils$desktopPageToString(p);
						},
						model.pageHistory);
					var mobilePageHistoryStr = A2(
						_elm_lang$core$List$map,
						function (p) {
							return _user$project$TypeToStringUtils$mobilePageToString(p);
						},
						model.mobilePageHistory);
					var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(model.dashboardMobilePage);
					var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(_p24)(
						_user$project$TypeToStringUtils$langToString(model.language))(
						_user$project$TypeToStringUtils$desktopPageToString(model.desktopPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
					var cmd = _user$project$Ports$cacheAllData(cachedData);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{notifications: _p24}),
						_1: cmd
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnSelectTariffPlan':
				var currentUser = model.loggedInMember;
				var data = A4(_user$project$Models$TariffPlanSubscriptionData, currentUser.id, currentUser.isOrganization, _p0._0, currentUser.token);
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Networking$subscribeTariffPlanCmd(data)
				};
			case 'OnSubscribeTariffPlanCompleted':
				var _p25 = _p0._0;
				if (_p25.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{tariffPlanSubError: _p25._0.error}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{tariffPlanSubError: 'Couldn\'t update your tariff plan! Contact with us, please.'}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OnUpdateOrganizationSettingsCompleted':
				var _p26 = _p0._0;
				if (_p26.ctor === 'Ok') {
					var orgEditables = _user$project$Models$OrganizationSettingsFieldsEditable(false)(false)(false)(false)(false)(false)(false)(false)(false)(false)(false);
					var editables = _user$project$Models$InnovatorSettingsFieldsEditable(false)(false)(false)(false)(false)(false)(false)(false)(false)(false);
					var currentOldOrgData = model.currentOrganizationExtended;
					var oldData = model.organizationSettingsFields;
					var initialData = _elm_lang$core$Native_Utils.update(
						oldData,
						{error: ''});
					var resOrgData = _p26._0.organization_data;
					var updatedData = _elm_lang$core$Native_Utils.eq(resOrgData.id, 0) ? _elm_lang$core$Native_Utils.update(
						initialData,
						{error: resOrgData.industry}) : _elm_lang$core$Native_Utils.update(
						initialData,
						{error: 'Saved!'});
					var updatedOrgData = _elm_lang$core$Native_Utils.eq(resOrgData.id, 0) ? currentOldOrgData : resOrgData;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{organizationSettingsFields: updatedData, currentOrganizationExtended: updatedOrgData, innovatorSettingsFieldsEditable: editables, organizationSettingsFieldsEditable: orgEditables}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var oldData = model.organizationSettingsFields;
					var initialData = _elm_lang$core$Native_Utils.update(
						oldData,
						{error: ''});
					var updatedData = _elm_lang$core$Native_Utils.update(
						initialData,
						{error: 'Couldn\'t update your settings! Try to reload the page and contact with us, please.'});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{organizationSettingsFields: updatedData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OnOrganizationSettingsSaveChanges':
				var currentUser = model.loggedInMember;
				var initialData = model.organizationSettingsFields;
				var orgData = _elm_lang$core$Native_Utils.update(
					initialData,
					{error: ''});
				var round1 = (_elm_lang$core$String$isEmpty(orgData.error) && _elm_lang$core$String$isEmpty(orgData.name)) ? _elm_lang$core$Native_Utils.update(
					orgData,
					{error: 'Name required!'}) : orgData;
				var round2 = (_elm_lang$core$String$isEmpty(round1.error) && _elm_lang$core$String$isEmpty(round1.email)) ? _elm_lang$core$Native_Utils.update(
					round1,
					{error: 'Email required!'}) : round1;
				var round3 = (_elm_lang$core$String$isEmpty(round2.error) && _elm_lang$core$String$isEmpty(round2.country)) ? _elm_lang$core$Native_Utils.update(
					round2,
					{error: 'Country required!'}) : round2;
				var dataToSend = _elm_lang$core$Native_Utils.update(
					round3,
					{token: currentUser.token});
				var cmd = (_elm_lang$core$String$isEmpty(round3.error) && (!_elm_lang$core$String$isEmpty(round3.pic_name))) ? _user$project$Ports$submitOrgSettingsPicToFirebase(round3.pic_name) : (_elm_lang$core$String$isEmpty(round3.error) ? _user$project$Networking$updateOrganizationSettingsCmd(dataToSend) : _elm_lang$core$Platform_Cmd$none);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFields: round3}),
					_1: cmd
				};
			case 'OnGetUploadedOrgSettingsPicUri':
				var _p27 = _p0._0;
				var currentUser = model.loggedInMember;
				var oldData = model.organizationSettingsFields;
				var initialData = _elm_lang$core$Native_Utils.update(
					oldData,
					{error: ''});
				var updatedData = _elm_lang$core$String$isEmpty(_p27.error) ? _elm_lang$core$Native_Utils.update(
					initialData,
					{pic_uri: _p27.uri}) : _elm_lang$core$Native_Utils.update(
					initialData,
					{error: _p27.error});
				var dataToSend = _elm_lang$core$Native_Utils.update(
					updatedData,
					{token: currentUser.token});
				var cmd = _elm_lang$core$String$isEmpty(updatedData.error) ? _user$project$Networking$updateOrganizationSettingsCmd(dataToSend) : _elm_lang$core$Platform_Cmd$none;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFields: updatedData}),
					_1: cmd
				};
			case 'OnOrganizationSettingsPicNameReceived':
				var _p28 = _p0._0;
				var initialData = model.organizationSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					initialData,
					{pic_name: _p28.fileName, error: _p28.error});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnGetFakeInterOpResponse3':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Ports$initOrgSettingsMediaBtn('')
				};
			case 'OnOrganizationSettingsChangePasswordInput':
				var oldData = model.organizationSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{changePassword: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrganizationSettingsDescriptionInput':
				var oldData = model.organizationSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{description: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrganizationSettingsWebpageInput':
				var oldData = model.organizationSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{webpage: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrganizationSettingsCountryInput':
				var oldData = model.organizationSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{country: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrganizationSettingsInterestedIndustriesInput':
				var oldData = model.organizationSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{interested_industries: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrganizationSettingsIndustryInput':
				var oldData = model.organizationSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{industry: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrganizationSettingsAboutInput':
				var oldData = model.organizationSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{about_us: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrganizationSettingsEmailInput':
				var oldData = model.organizationSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{email: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrganizationSettingsPhoneInput':
				var oldData = model.organizationSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{phone: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrganizationSettingsNameInput':
				var oldData = model.organizationSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{name: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrganizationSettingsUsernameInput':
				var oldData = model.organizationSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{username: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrgSettingsUsernameEditable':
				var oldData = model.organizationSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{username: !oldData.username});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrgSettingsNameEditable':
				var oldData = model.organizationSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{name: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrgSettingsWebpageEditable':
				var oldData = model.organizationSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{webpage: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrgSettingsPhoneEditable':
				var oldData = model.organizationSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{phone: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrgSettingsEmailEditable':
				var oldData = model.organizationSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{email: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrgSettingsAboutEditable':
				var oldData = model.organizationSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{about_us: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrgSettingsDescriptionEditable':
				var oldData = model.organizationSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{description: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrgSettingsIndustryEditable':
				var oldData = model.organizationSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{industry: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrgSettingsInterestedIndustriesEditable':
				var oldData = model.organizationSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{interested_industries: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrgSettingsCountryEditable':
				var oldData = model.organizationSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{country: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnOrgSettingsChangePasswordEditable':
				var oldData = model.organizationSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{changePassword: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{organizationSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnUpdateInnovatorSettingsCompleted':
				var _p29 = _p0._0;
				if (_p29.ctor === 'Ok') {
					var editables = _user$project$Models$InnovatorSettingsFieldsEditable(false)(false)(false)(false)(false)(false)(false)(false)(false)(false);
					var currentInnovatorOldData = model.currentInnovatorExtended;
					var oldData = model.innovatorSettingsFields;
					var initialData = _elm_lang$core$Native_Utils.update(
						oldData,
						{error: ''});
					var res = _p29._0.innovator_data;
					var updatedData = _elm_lang$core$Native_Utils.eq(res.id, 0) ? _elm_lang$core$Native_Utils.update(
						initialData,
						{error: res.experience}) : _elm_lang$core$Native_Utils.update(
						initialData,
						{error: 'Saved!'});
					var currentInnovatorUpdatedData = _elm_lang$core$Native_Utils.eq(res.id, 0) ? currentInnovatorOldData : res;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{innovatorSettingsFields: updatedData, currentInnovatorExtended: currentInnovatorUpdatedData, innovatorSettingsFieldsEditable: editables}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var oldData = model.innovatorSettingsFields;
					var initialData = _elm_lang$core$Native_Utils.update(
						oldData,
						{error: ''});
					var updatedData = _elm_lang$core$Native_Utils.update(
						initialData,
						{error: 'Something went wrong! Try again or contact with us, please!'});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{innovatorSettingsFields: updatedData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OnGetUploadedSettingsPicUri':
				var _p30 = _p0._0;
				var currentUser = model.loggedInMember;
				var oldData = model.innovatorSettingsFields;
				var initialData = _elm_lang$core$Native_Utils.update(
					oldData,
					{error: ''});
				var updatedData = _elm_lang$core$String$isEmpty(_p30.error) ? _elm_lang$core$Native_Utils.update(
					initialData,
					{pic_uri: _p30.uri}) : _elm_lang$core$Native_Utils.update(
					initialData,
					{error: _p30.error});
				var dataToSend = _elm_lang$core$String$isEmpty(updatedData.error) ? _elm_lang$core$Native_Utils.update(
					updatedData,
					{token: currentUser.token}) : updatedData;
				var cmd = _elm_lang$core$String$isEmpty(updatedData.error) ? _user$project$Networking$updateInnovatorSettingsCmd(dataToSend) : _elm_lang$core$Platform_Cmd$none;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFields: updatedData}),
					_1: cmd
				};
			case 'OnGetFakeInterOpResponse2':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Ports$initSettingsMediaBtn('')
				};
			case 'OnInnovatorSettingsPicNameReceived':
				var _p31 = _p0._0;
				var oldData = model.innovatorSettingsFields;
				var initialData = _elm_lang$core$Native_Utils.update(
					oldData,
					{error: ''});
				var updatedData = _elm_lang$core$String$isEmpty(_p31.error) ? _elm_lang$core$Native_Utils.update(
					initialData,
					{pic_name: _p31.fileName}) : _elm_lang$core$Native_Utils.update(
					initialData,
					{error: _p31.error});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnInnovatorSettingsSaveChanges':
				var currentUser = model.loggedInMember;
				var oldData = model.innovatorSettingsFields;
				var initialData = _elm_lang$core$Native_Utils.update(
					oldData,
					{error: ''});
				var round1 = _elm_lang$core$String$isEmpty(initialData.name) ? _elm_lang$core$Native_Utils.update(
					initialData,
					{error: 'Name required!'}) : initialData;
				var round2 = (_elm_lang$core$String$isEmpty(round1.error) && _elm_lang$core$String$isEmpty(round1.surname)) ? _elm_lang$core$Native_Utils.update(
					round1,
					{error: 'Surname required!'}) : round1;
				var round3 = (_elm_lang$core$String$isEmpty(round2.error) && _elm_lang$core$String$isEmpty(round2.email)) ? _elm_lang$core$Native_Utils.update(
					round2,
					{error: 'Email required!'}) : round2;
				var round4 = (_elm_lang$core$String$isEmpty(round3.error) && _elm_lang$core$String$isEmpty(round3.country)) ? _elm_lang$core$Native_Utils.update(
					round3,
					{error: 'Country required!'}) : round3;
				var round5 = _elm_lang$core$String$isEmpty(round4.error) ? _elm_lang$core$Native_Utils.update(
					round4,
					{token: currentUser.token}) : round4;
				var cmd = (_elm_lang$core$String$isEmpty(round4.error) && (!_elm_lang$core$String$isEmpty(round4.pic_name))) ? _user$project$Ports$submitSettingsPicToFirebase(round4.pic_name) : (_elm_lang$core$String$isEmpty(round4.error) ? _user$project$Networking$updateInnovatorSettingsCmd(round5) : _elm_lang$core$Platform_Cmd$none);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFields: round4}),
					_1: cmd
				};
			case 'OnInnovatorSettingsUsernameInput':
				var oldData = model.innovatorSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{username: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnInnovatorSettingsNameInput':
				var oldData = model.innovatorSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{name: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnInnovatorSettingsSurnameInput':
				var oldData = model.innovatorSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{surname: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnInnovatorSettingsPhoneInput':
				var oldData = model.innovatorSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{phone: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnInnovatorSettingsEmailInput':
				var oldData = model.innovatorSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{email: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnInnovatorSettingsAboutInput':
				var oldData = model.innovatorSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{about_me: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnInnovatorSettingsEducationInput':
				var oldData = model.innovatorSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{education: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnInnovatorSettingsExperienceInput':
				var oldData = model.innovatorSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{experience: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnInnovatorSettingsCountryInput':
				var oldData = model.innovatorSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{country: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnInnovatorSettingsChangePasswordInput':
				var oldData = model.innovatorSettingsFields;
				var updatedData = _elm_lang$core$Native_Utils.update(
					oldData,
					{changePassword: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFields: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSettingsUsernameEditable':
				var initialData = model.innovatorSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					initialData,
					{username: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSettingsNameEditable':
				var initialData = model.innovatorSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					initialData,
					{name: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSettingsSurnameEditable':
				var initialData = model.innovatorSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					initialData,
					{surname: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSettingsPhoneEditable':
				var initialData = model.innovatorSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					initialData,
					{phone: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSettingsEmailEditable':
				var initialData = model.innovatorSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					initialData,
					{email: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSettingsAboutEditable':
				var initialData = model.innovatorSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					initialData,
					{about: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSettingsEducationEditable':
				var initialData = model.innovatorSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					initialData,
					{education: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSettingsExperienceEditable':
				var initialData = model.innovatorSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					initialData,
					{experience: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSettingsCountryEditable':
				var initialData = model.innovatorSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					initialData,
					{country: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSettingsChangePasswordEditable':
				var initialData = model.innovatorSettingsFieldsEditable;
				var updatedData = _elm_lang$core$Native_Utils.update(
					initialData,
					{changePassword: true});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorSettingsFieldsEditable: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSwitchTariffPlansPage':
				var pageHistoryString = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$desktopPageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$TariffPlansPage, _1: model.pageHistory});
				var mobilePageHistoryStr = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$mobilePageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$MobileSettingsPage, _1: model.mobilePageHistory});
				var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(model.dashboardMobilePage);
				var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
					_user$project$TypeToStringUtils$langToString(model.language))(
					_user$project$TypeToStringUtils$desktopPageToString(_user$project$Models$TariffPlansPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
				var cmd = _user$project$Ports$cacheAllData(cachedData);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							desktopPage: _user$project$Models$TariffPlansPage,
							mobilePageHistory: {ctor: '::', _0: _user$project$Models$MobileSettingsPage, _1: model.mobilePageHistory},
							pageHistory: {ctor: '::', _0: _user$project$Models$TariffPlansPage, _1: model.pageHistory}
						}),
					_1: cmd
				};
			case 'OnSwitchSettingsPage':
				var pageHistoryString = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$desktopPageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$SettingsPage, _1: model.pageHistory});
				var mobilePageHistoryStr = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$mobilePageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$MobileSettingsPage, _1: model.mobilePageHistory});
				var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(model.dashboardMobilePage);
				var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
					_user$project$TypeToStringUtils$langToString(model.language))(
					_user$project$TypeToStringUtils$desktopPageToString(_user$project$Models$SettingsPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							desktopPage: _user$project$Models$SettingsPage,
							mobilePageHistory: {ctor: '::', _0: _user$project$Models$MobileSettingsPage, _1: model.mobilePageHistory},
							pageHistory: {ctor: '::', _0: _user$project$Models$SettingsPage, _1: model.pageHistory}
						}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _user$project$Ports$initFakeInterOp2(''),
							_1: {
								ctor: '::',
								_0: _user$project$Ports$initFakeInterOp3(''),
								_1: {
									ctor: '::',
									_0: _user$project$Ports$cacheAllData(cachedData),
									_1: {ctor: '[]'}
								}
							}
						})
				};
			case 'OnMakeConnectionCompleted':
				var _p32 = _p0._0;
				if (_p32.ctor === 'Ok') {
					var _p33 = _p32._0;
					var currentUser = model.loggedInMember;
					var cmd = (_elm_lang$core$String$isEmpty(_p33.error) && (_elm_lang$core$Native_Utils.eq(_p33.success, 'True') && currentUser.isOrganization)) ? A2(
						_user$project$Networking$fetchSuggestionsCmd,
						A2(_user$project$Models$GetDataRequestStruct, currentUser.id, currentUser.token),
						_user$project$Networking$fetchSuggestedInnovatorsUri) : ((_elm_lang$core$String$isEmpty(_p33.error) && (_elm_lang$core$Native_Utils.eq(_p33.success, 'True') && (!currentUser.isOrganization))) ? A2(
						_user$project$Networking$fetchSuggestionsCmd,
						A2(_user$project$Models$GetDataRequestStruct, currentUser.id, currentUser.token),
						_user$project$Networking$fetchSuggestedOrganizationsUri) : _elm_lang$core$Platform_Cmd$none);
					return {ctor: '_Tuple2', _0: model, _1: cmd};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnMakeConnectionInitiated':
				var _p34 = _p0._0;
				var currentUser = model.loggedInMember;
				var cmd = currentUser.isOrganization ? _user$project$Networking$makeConnectionCmd(
					A5(_user$project$Models$ConnectionData, currentUser.id, true, _p34, false, currentUser.token)) : _user$project$Networking$makeConnectionCmd(
					A5(_user$project$Models$ConnectionData, currentUser.id, false, _p34, true, currentUser.token));
				return {ctor: '_Tuple2', _0: model, _1: cmd};
			case 'OnFetchSuggestionsCompleted':
				var _p35 = _p0._0;
				if (_p35.ctor === 'Ok') {
					var _p36 = _p35._0;
					var currentSuggestions = model.suggestedUsers;
					var suggestionsList = _elm_lang$core$Native_Utils.eq(
						_elm_lang$core$List$length(_p36),
						3) ? _p36 : (_elm_lang$core$Native_Utils.eq(
						_elm_lang$core$List$length(_p36),
						0) ? currentSuggestions : function (cl) {
						return A2(_elm_lang$core$Basics_ops['++'], _p36, cl);
					}(
						A2(
							_elm_lang$core$List$drop,
							_elm_lang$core$List$length(_p36),
							currentSuggestions)));
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{suggestedUsers: suggestionsList}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnMarkMessageAsRedReply':
				var _p37 = _p0._0;
				var pageHistoryString = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$desktopPageToString(p);
					},
					model.pageHistory);
				var mobilePageHistoryStr = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$mobilePageToString(p);
					},
					model.mobilePageHistory);
				var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(model.dashboardMobilePage);
				var currentUser = model.loggedInMember;
				var newMessageData = A8(_user$project$Models$NewChatMessageData, _p37.receiver_id, 0, false, _p37.receiver_is_org, '', _p37.receiver_name, '', '');
				var pendingNewMessagesList = model.pendingUnredMessages;
				var updatedPendingMessagesList = A2(
					_elm_lang$core$List$filter,
					function (m) {
						return !_elm_lang$core$Native_Utils.eq(m.id, _p37.message_id);
					},
					pendingNewMessagesList);
				var cachedData = _user$project$Models$CacheDataWrapper(currentUser)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(updatedPendingMessagesList)(model.suggestedUsers)(model.notifications)(
					_user$project$TypeToStringUtils$langToString(model.language))(
					_user$project$TypeToStringUtils$desktopPageToString(model.desktopPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
				var cmd = _elm_lang$core$Platform_Cmd$batch(
					{
						ctor: '::',
						_0: _user$project$Networking$fetchChatHistoryCmd(
							A5(_user$project$Models$ChatHistoryRequestWrapper, newMessageData.to_id, currentUser.id, newMessageData.receiver_is_organization, currentUser.isOrganization, currentUser.token)),
						_1: {
							ctor: '::',
							_0: _user$project$Ports$cacheAllData(cachedData),
							_1: {ctor: '[]'}
						}
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{pendingUnredMessages: updatedPendingMessagesList, chatWindowOpened: true, newChatMessageData: newMessageData}),
					_1: cmd
				};
			case 'OnUnredChatMessageClick':
				var currentUser = model.loggedInMember;
				var reqDataWrapper = A2(_user$project$Ports$MarkMessageAsRedWrapper, _p0._0, currentUser.token);
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Ports$markAsRedChatMessage(reqDataWrapper)
				};
			case 'OnNewMessagesNotifsVisibilityToggle':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newMessagesNotifsVisible: !model.newMessagesNotifsVisible}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnFetchUnredChatMessagesCompleted':
				var _p38 = _p0._0;
				if (_p38.ctor === 'Ok') {
					var _p39 = _p38._0;
					var pageHistoryString = A2(
						_elm_lang$core$List$map,
						function (p) {
							return _user$project$TypeToStringUtils$desktopPageToString(p);
						},
						model.pageHistory);
					var mobilePageHistoryStr = A2(
						_elm_lang$core$List$map,
						function (p) {
							return _user$project$TypeToStringUtils$mobilePageToString(p);
						},
						model.mobilePageHistory);
					var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(model.dashboardMobilePage);
					var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(_p39)(model.suggestedUsers)(model.notifications)(
						_user$project$TypeToStringUtils$langToString(model.language))(
						_user$project$TypeToStringUtils$desktopPageToString(model.desktopPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
					var cmd = _user$project$Ports$cacheAllData(cachedData);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{pendingUnredMessages: _p39}),
						_1: cmd
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnExtendedUnredMessageIncome':
				var _p40 = _p0._0;
				var pageHistoryString = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$desktopPageToString(p);
					},
					model.pageHistory);
				var mobilePageHistoryStr = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$mobilePageToString(p);
					},
					model.mobilePageHistory);
				var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(model.dashboardMobilePage);
				var initialList = model.pendingUnredMessages;
				var filteredList = A2(
					_elm_lang$core$List$filter,
					function (m) {
						return (!_elm_lang$core$Native_Utils.eq(m.sender_id, _p40.sender_id)) || (!_elm_lang$core$Native_Utils.eq(m.sender_is_organization, _p40.sender_is_organization));
					},
					initialList);
				var finalList = {ctor: '::', _0: _p40, _1: filteredList};
				var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(finalList)(model.suggestedUsers)(model.notifications)(
					_user$project$TypeToStringUtils$langToString(model.language))(
					_user$project$TypeToStringUtils$desktopPageToString(model.desktopPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
				var cmd = _user$project$Ports$cacheAllData(cachedData);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{pendingUnredMessages: finalList}),
					_1: cmd
				};
			case 'OnChatHistoryFetchCompleted':
				var _p41 = _p0._0;
				if (_p41.ctor === 'Ok') {
					var _p42 = _p41._0;
					var pageHistoryString = A2(
						_elm_lang$core$List$map,
						function (p) {
							return _user$project$TypeToStringUtils$desktopPageToString(p);
						},
						model.pageHistory);
					var mobilePageHistoryStr = A2(
						_elm_lang$core$List$map,
						function (p) {
							return _user$project$TypeToStringUtils$mobilePageToString(p);
						},
						model.mobilePageHistory);
					var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(model.dashboardMobilePage);
					var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(_p42)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
						_user$project$TypeToStringUtils$langToString(model.language))(
						_user$project$TypeToStringUtils$desktopPageToString(model.desktopPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
					var cmd = _user$project$Ports$cacheAllData(cachedData);
					var tmp = model.newChatMessageData;
					var initialData = _elm_lang$core$Native_Utils.update(
						tmp,
						{error: ''});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{newChatMessageData: initialData, currentChatHistory: _p42}),
						_1: cmd
					};
				} else {
					var tmp = model.newChatMessageData;
					var initialData = _elm_lang$core$Native_Utils.update(
						tmp,
						{error: 'Error submitting your message! Try again or contact with us, please'});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{newChatMessageData: initialData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OnChatMessageError':
				var tmp = model.newChatMessageData;
				var initialData = _elm_lang$core$Native_Utils.update(
					tmp,
					{error: ''});
				var updatedData = _elm_lang$core$Native_Utils.update(
					initialData,
					{error: _p0._0.error});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newChatMessageData: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnIncomingChatMessage':
				var _p43 = _p0._0;
				var currentUser = model.loggedInMember;
				var currentUserId = currentUser.id;
				var currentUserIsOrganization = currentUser.isOrganization;
				var newMessageReceiverIsOrganization = _p43.receiver_is_organization;
				var newMessageReceiverId = _p43.receiver_id;
				var newMessageSenderIsOrganization = _p43.sender_is_organization;
				var newMessageSenderId = _p43.sender_id;
				var newMessageId = _p43.id;
				var initialData = model.newChatMessageData;
				var currentReceiverId = initialData.to_id;
				var currentReceiverIsOrganization = initialData.receiver_is_organization;
				var cmd = (_elm_lang$core$Native_Utils.eq(currentUserId, newMessageReceiverId) && (_elm_lang$core$Native_Utils.eq(currentUserIsOrganization, newMessageReceiverIsOrganization) && ((!_elm_lang$core$Native_Utils.eq(currentReceiverId, newMessageSenderId)) || (!_elm_lang$core$Native_Utils.eq(currentReceiverIsOrganization, newMessageSenderIsOrganization))))) ? _user$project$Ports$fetchMessageSenderPicture(_p43) : ((_elm_lang$core$Native_Utils.eq(currentUserId, newMessageReceiverId) && (_elm_lang$core$Native_Utils.eq(currentUserIsOrganization, newMessageReceiverIsOrganization) && (_elm_lang$core$Native_Utils.eq(currentReceiverId, newMessageSenderId) && _elm_lang$core$Native_Utils.eq(currentReceiverIsOrganization, newMessageSenderIsOrganization)))) ? _user$project$Ports$markIncomingMessageAsRed(
					A2(_user$project$Ports$MarkMessageAsRedWrapper, newMessageId, currentUser.token)) : _elm_lang$core$Platform_Cmd$none);
				var pendingMessageData = (_elm_lang$core$Native_Utils.eq(currentUserId, newMessageSenderId) && (_elm_lang$core$Native_Utils.eq(currentUserIsOrganization, newMessageSenderIsOrganization) && (_elm_lang$core$Native_Utils.eq(currentReceiverId, newMessageReceiverId) && _elm_lang$core$Native_Utils.eq(currentReceiverIsOrganization, newMessageReceiverIsOrganization)))) ? _elm_lang$core$Native_Utils.update(
					initialData,
					{body: '', error: ''}) : initialData;
				var chatHistory = model.currentChatHistory;
				var updatedChatHistory = ((_elm_lang$core$Native_Utils.eq(currentUserId, newMessageSenderId) && (_elm_lang$core$Native_Utils.eq(currentUserIsOrganization, newMessageSenderIsOrganization) && (_elm_lang$core$Native_Utils.eq(currentReceiverId, newMessageReceiverId) && _elm_lang$core$Native_Utils.eq(currentReceiverIsOrganization, newMessageReceiverIsOrganization)))) || (_elm_lang$core$Native_Utils.eq(currentUserId, newMessageReceiverId) && (_elm_lang$core$Native_Utils.eq(currentUserIsOrganization, newMessageReceiverIsOrganization) && (_elm_lang$core$Native_Utils.eq(currentReceiverId, newMessageSenderId) && _elm_lang$core$Native_Utils.eq(currentReceiverIsOrganization, newMessageSenderIsOrganization))))) ? {ctor: '::', _0: _p43, _1: chatHistory} : chatHistory;
				var finalChatHistory = (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$List$length(updatedChatHistory),
					20) > 0) ? A2(_elm_lang$core$List$take, 20, updatedChatHistory) : updatedChatHistory;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentChatHistory: finalChatHistory, newChatMessageData: pendingMessageData}),
					_1: cmd
				};
			case 'OnSubmitChatMessage':
				var currentUser = model.loggedInMember;
				var tmp = model.newChatMessageData;
				var initialData = _elm_lang$core$Native_Utils.update(
					tmp,
					{error: ''});
				var round1 = _elm_lang$core$String$isEmpty(initialData.body) ? _elm_lang$core$Native_Utils.update(
					initialData,
					{error: 'Type some message to send'}) : initialData;
				var round2 = _elm_lang$core$Native_Utils.update(
					round1,
					{from_id: currentUser.id, sender_is_organization: currentUser.isOrganization, token: currentUser.token});
				var cmd = _elm_lang$core$String$isEmpty(round2.error) ? _user$project$Ports$submitChatMessageToChannel(
					A6(_user$project$Ports$NewChatMessageWrapper, round2.body, 20, round2.receiver_is_organization, round2.sender_is_organization, round2.to_id, '$2b$12$hlIgRLnkBKntpWFClZZJZevDfRrY5zZyOLgGrnQYPxRrWzYMEGBgK')) : _elm_lang$core$Platform_Cmd$none;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newChatMessageData: round2}),
					_1: cmd
				};
			case 'OnInputChatMessage':
				var initialData = model.newChatMessageData;
				var updatedData = _elm_lang$core$Native_Utils.update(
					initialData,
					{body: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newChatMessageData: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnToggleChatWindow':
				var currentUser = model.loggedInMember;
				var newMessageData = function () {
					var _p44 = _p0._0;
					if (_p44.ctor === 'Nothing') {
						return A8(_user$project$Models$NewChatMessageData, 0, 0, false, false, '', '', '', '');
					} else {
						var _p45 = _p44._0;
						return A8(_user$project$Models$NewChatMessageData, _p45.id, 0, false, _p45.is_organization, '', _p45.name, '', '');
					}
				}();
				var windowOpened = _elm_lang$core$Native_Utils.eq(newMessageData.to_id, 0) ? false : true;
				var cmd = _elm_lang$core$Native_Utils.eq(newMessageData.to_id, 0) ? _elm_lang$core$Platform_Cmd$none : _user$project$Networking$fetchChatHistoryCmd(
					A5(_user$project$Models$ChatHistoryRequestWrapper, newMessageData.to_id, currentUser.id, newMessageData.receiver_is_organization, currentUser.isOrganization, currentUser.token));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{chatWindowOpened: windowOpened, newChatMessageData: newMessageData}),
					_1: cmd
				};
			case 'OnGetIdeaPictureUris':
				var _p46 = _p0._0;
				var tmp = model.newIdeaData;
				var initialData = _elm_lang$core$Native_Utils.update(
					tmp,
					{error: ''});
				var updatedData = _elm_lang$core$String$isEmpty(_p46.error) ? _elm_lang$core$Native_Utils.update(
					initialData,
					{pictureUris: _p46.uri}) : _elm_lang$core$Native_Utils.update(
					initialData,
					{error: _p46.error});
				var cmd = (_elm_lang$core$String$isEmpty(updatedData.error) && (!_elm_lang$core$String$isEmpty(updatedData.videoName))) ? _user$project$Ports$submitVideoFileToFirebase(updatedData.videoName) : (_elm_lang$core$String$isEmpty(updatedData.error) ? _user$project$Networking$submitNewIdeaCmd(updatedData) : _elm_lang$core$Platform_Cmd$none);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newIdeaData: updatedData}),
					_1: cmd
				};
			case 'OnIdeaPicNameChoosen':
				var _p47 = _p0._0;
				var tmp = model.newIdeaData;
				var initialData = _elm_lang$core$Native_Utils.update(
					tmp,
					{error: ''});
				var updatedData = _elm_lang$core$String$isEmpty(_p47.error) ? _elm_lang$core$Native_Utils.update(
					initialData,
					{
						pictureNames: A2(
							_elm_lang$core$Basics_ops['++'],
							initialData.pictureNames,
							A2(_elm_lang$core$Basics_ops['++'], _p47.fileName, ', '))
					}) : _elm_lang$core$Native_Utils.update(
					initialData,
					{error: _p47.error});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newIdeaData: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnGetUploadedVideoFileUri':
				var _p48 = _p0._0;
				var loggedInInno = model.currentInnovatorExtended;
				var loggedInMember = model.loggedInMember;
				var tmp = model.newIdeaData;
				var initialData = _elm_lang$core$Native_Utils.update(
					tmp,
					{error: ''});
				var updatedData = _elm_lang$core$String$isEmpty(_p48.error) ? _elm_lang$core$Native_Utils.update(
					initialData,
					{videoUri: _p48.uri}) : _elm_lang$core$Native_Utils.update(
					initialData,
					{error: _p48.error});
				var round2 = _elm_lang$core$String$isEmpty(updatedData.error) ? _elm_lang$core$Native_Utils.update(
					updatedData,
					{token: loggedInMember.token, innovator_id: loggedInInno.id}) : updatedData;
				var cmd = _elm_lang$core$String$isEmpty(round2.error) ? _user$project$Networking$submitNewIdeaCmd(round2) : _elm_lang$core$Platform_Cmd$none;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newIdeaData: round2}),
					_1: cmd
				};
			case 'OnIdeaVideoNameChoosen':
				var _p49 = _p0._0;
				var tmp = model.newIdeaData;
				var initialData = _elm_lang$core$Native_Utils.update(
					tmp,
					{error: ''});
				var updatedData = _elm_lang$core$String$isEmpty(_p49.error) ? _elm_lang$core$Native_Utils.update(
					initialData,
					{videoName: _p49.fileName}) : _elm_lang$core$Native_Utils.update(
					initialData,
					{error: _p49.error});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newIdeaData: updatedData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSubmitIdeaCompleted':
				var _p50 = _p0._0;
				if (_p50.ctor === 'Ok') {
					var _p51 = _p50._0;
					var pageHistoryString = A2(
						_elm_lang$core$List$map,
						function (p) {
							return _user$project$TypeToStringUtils$desktopPageToString(p);
						},
						model.pageHistory);
					var mobilePageHistoryStr = A2(
						_elm_lang$core$List$map,
						function (p) {
							return _user$project$TypeToStringUtils$mobilePageToString(p);
						},
						model.mobilePageHistory);
					var updatedMobilePage = _elm_lang$core$String$isEmpty(_p51.error) ? _user$project$Models$MobileProfilePage : _user$project$Models$MobilePostAnIdeaPage;
					var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(updatedMobilePage);
					var nextPage = _elm_lang$core$String$isEmpty(_p51.error) ? _user$project$Models$ProfilePage : _user$project$Models$NewIdeaPage;
					var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
						_user$project$TypeToStringUtils$langToString(model.language))(
						_user$project$TypeToStringUtils$desktopPageToString(nextPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
					var cmd = _elm_lang$core$String$isEmpty(_p51.error) ? _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _elm_lang$navigation$Navigation$newUrl('#profile'),
							_1: {
								ctor: '::',
								_0: _user$project$Ports$cacheAllData(cachedData),
								_1: {ctor: '[]'}
							}
						}) : _elm_lang$core$Platform_Cmd$none;
					var initialData = model.newIdeaData;
					var updatedData = _elm_lang$core$String$isEmpty(_p51.error) ? _elm_lang$core$Native_Utils.update(
						initialData,
						{ideaName: '', industry: '', tags: '', shortDescription: '', ideaPrice: '', longDescription: '', pictureUris: '', videoUri: '', error: '', token: '', innovator_id: 0, videoName: '', pictureNames: ''}) : _elm_lang$core$Native_Utils.update(
						initialData,
						{error: _p51.error});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{newIdeaData: updatedData, desktopPage: nextPage, dashboardMobilePage: updatedMobilePage}),
						_1: cmd
					};
				} else {
					var initialData = model.newIdeaData;
					var updatedData = _elm_lang$core$Native_Utils.update(
						initialData,
						{
							error: _elm_lang$core$Basics$toString(_p50._0)
						});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{newIdeaData: updatedData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OnNewIdeaSubmit':
				var loggedInInno = model.currentInnovatorExtended;
				var loggedInMember = model.loggedInMember;
				var initialData = model.newIdeaData;
				var round1 = _elm_lang$core$Native_Utils.update(
					initialData,
					{error: ''});
				var round2 = (_elm_lang$core$String$isEmpty(round1.error) && _elm_lang$core$String$isEmpty(round1.ideaName)) ? _elm_lang$core$Native_Utils.update(
					round1,
					{error: 'Idea/Project name required'}) : round1;
				var round3 = (_elm_lang$core$String$isEmpty(round2.error) && _elm_lang$core$String$isEmpty(round2.industry)) ? _elm_lang$core$Native_Utils.update(
					round2,
					{error: 'Industry required'}) : round2;
				var round4 = (_elm_lang$core$String$isEmpty(round3.error) && _elm_lang$core$String$isEmpty(round3.shortDescription)) ? _elm_lang$core$Native_Utils.update(
					round3,
					{error: 'Short description required'}) : round3;
				var round5 = (_elm_lang$core$String$isEmpty(round4.error) && _elm_lang$core$String$isEmpty(round4.longDescription)) ? _elm_lang$core$Native_Utils.update(
					round4,
					{error: 'Long description required'}) : round4;
				var round6 = _elm_lang$core$String$isEmpty(round5.error) ? _elm_lang$core$Native_Utils.update(
					round5,
					{token: loggedInMember.token, innovator_id: loggedInInno.id}) : round5;
				var cmd = (_elm_lang$core$String$isEmpty(round6.error) && (!_elm_lang$core$String$isEmpty(round6.pictureNames))) ? _user$project$Ports$submitPicturesToFirebase(round6.pictureNames) : ((_elm_lang$core$String$isEmpty(round6.error) && (!_elm_lang$core$String$isEmpty(round6.videoName))) ? _user$project$Ports$submitVideoFileToFirebase(round6.videoName) : (_elm_lang$core$String$isEmpty(round6.error) ? _user$project$Networking$submitNewIdeaCmd(round6) : _elm_lang$core$Platform_Cmd$none));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newIdeaData: round6}),
					_1: cmd
				};
			case 'OnNewIdeaLongDescriptionInput':
				var oldData = model.newIdeaData;
				var newData = _elm_lang$core$Native_Utils.update(
					oldData,
					{longDescription: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newIdeaData: newData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnNewIdeaPriceInput':
				var oldData = model.newIdeaData;
				var newData = _elm_lang$core$Native_Utils.update(
					oldData,
					{ideaPrice: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newIdeaData: newData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnNewIdeaShortDescriptionInput':
				var oldData = model.newIdeaData;
				var newData = _elm_lang$core$Native_Utils.update(
					oldData,
					{shortDescription: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newIdeaData: newData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnNewIdeaTagsInput':
				var oldData = model.newIdeaData;
				var newData = _elm_lang$core$Native_Utils.update(
					oldData,
					{tags: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newIdeaData: newData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnNewIdeaIndustryInput':
				var oldData = model.newIdeaData;
				var newData = _elm_lang$core$Native_Utils.update(
					oldData,
					{industry: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newIdeaData: newData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnNewIdeaNameInput':
				var oldData = model.newIdeaData;
				var newData = _elm_lang$core$Native_Utils.update(
					oldData,
					{ideaName: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newIdeaData: newData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnGetFakeInterOpResponse':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Ports$initIdeaMediaBtns('')
				};
			case 'OnMobileDashboardNewIdeaPageVisible':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dashboardMobilePage: _user$project$Models$MobilePostAnIdeaPage,
							mobilePageHistory: {ctor: '::', _0: _user$project$Models$MobilePostAnIdeaPage, _1: model.mobilePageHistory}
						}),
					_1: _user$project$Ports$initFakeInterOp('')
				};
			case 'OnDashboardNewIdeaPageVisible':
				var pageHistoryString = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$desktopPageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$NewIdeaPage, _1: model.pageHistory});
				var mobilePageHistoryStr = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$mobilePageToString(p);
					},
					model.mobilePageHistory);
				var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(model.dashboardMobilePage);
				var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
					_user$project$TypeToStringUtils$langToString(model.language))(
					_user$project$TypeToStringUtils$desktopPageToString(_user$project$Models$NewIdeaPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							desktopPage: _user$project$Models$NewIdeaPage,
							pageHistory: {ctor: '::', _0: _user$project$Models$NewIdeaPage, _1: model.pageHistory}
						}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _user$project$Ports$initFakeInterOp(''),
							_1: {
								ctor: '::',
								_0: _user$project$Ports$cacheAllData(cachedData),
								_1: {ctor: '[]'}
							}
						})
				};
			case 'OnFetchExtendedPostsCompleted':
				var _p52 = _p0._0;
				if (_p52.ctor === 'Ok') {
					var _p53 = _p52._0;
					var pageHistoryString = A2(
						_elm_lang$core$List$map,
						function (p) {
							return _user$project$TypeToStringUtils$desktopPageToString(p);
						},
						model.pageHistory);
					var mobilePageHistoryStr = A2(
						_elm_lang$core$List$map,
						function (p) {
							return _user$project$TypeToStringUtils$mobilePageToString(p);
						},
						model.mobilePageHistory);
					var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(model.dashboardMobilePage);
					var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(_p53)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
						_user$project$TypeToStringUtils$langToString(model.language))(
						_user$project$TypeToStringUtils$desktopPageToString(model.desktopPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
					var cmd = _user$project$Ports$cacheAllData(cachedData);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{postList: _p53}),
						_1: cmd
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnSubmitPostCompleted':
				var _p54 = _p0._0;
				if (_p54.ctor === 'Ok') {
					var _p55 = _p54._0;
					var loggedInUser = model.loggedInMember;
					var cmd = _elm_lang$core$String$isEmpty(_p55.error) ? _user$project$Networking$fetchExtendedPostsCmd(loggedInUser.token) : _elm_lang$core$Platform_Cmd$none;
					var initialData = model.postData;
					var updatedData = _elm_lang$core$String$isEmpty(_p55.error) ? _elm_lang$core$Native_Utils.update(
						initialData,
						{innovator_id: 0, organization_id: 0, message: '', mediaFileName: '', mediaFileUri: '', error: '', token: ''}) : _elm_lang$core$Native_Utils.update(
						initialData,
						{error: _p55.error});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{postData: updatedData}),
						_1: cmd
					};
				} else {
					var initialData = model.postData;
					var updatedData = _elm_lang$core$Native_Utils.update(
						initialData,
						{
							error: _elm_lang$core$Basics$toString(_p54._0)
						});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{postData: updatedData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OnGetUploadedMediaFileUri':
				var _p56 = _p0._0;
				var loggedInInno = model.currentInnovatorExtended;
				var loggedInOrg = model.currentOrganizationExtended;
				var loggedInMember = model.loggedInMember;
				var initialData = model.postData;
				var firstRound = _elm_lang$core$Native_Utils.update(
					initialData,
					{error: ''});
				var secondRound = _elm_lang$core$String$isEmpty(_p56.error) ? _elm_lang$core$Native_Utils.update(
					firstRound,
					{mediaFileUri: _p56.uri}) : _elm_lang$core$Native_Utils.update(
					firstRound,
					{error: _p56.error});
				var thirdRound = loggedInMember.isOrganization ? _elm_lang$core$Native_Utils.update(
					secondRound,
					{organization_id: loggedInOrg.id, token: loggedInMember.token}) : _elm_lang$core$Native_Utils.update(
					secondRound,
					{innovator_id: loggedInInno.id, token: loggedInMember.token});
				var cmd = _elm_lang$core$String$isEmpty(thirdRound.error) ? _user$project$Networking$submitNewPostCmd(thirdRound) : _elm_lang$core$Platform_Cmd$none;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{postData: thirdRound}),
					_1: cmd
				};
			case 'OnSubmitPost':
				var loggedInInno = model.currentInnovatorExtended;
				var loggedInOrg = model.currentOrganizationExtended;
				var loggedInMember = model.loggedInMember;
				var initialData = model.postData;
				var firstRound = _elm_lang$core$Native_Utils.update(
					initialData,
					{error: ''});
				var secondRound = (_elm_lang$core$String$isEmpty(firstRound.message) && _elm_lang$core$String$isEmpty(firstRound.mediaFileName)) ? _elm_lang$core$Native_Utils.update(
					firstRound,
					{error: 'Some message or media file required!'}) : firstRound;
				var thirdRound = loggedInMember.isOrganization ? _elm_lang$core$Native_Utils.update(
					secondRound,
					{organization_id: loggedInOrg.id, token: loggedInMember.token}) : _elm_lang$core$Native_Utils.update(
					secondRound,
					{innovator_id: loggedInInno.id, token: loggedInMember.token});
				var cmd = (_elm_lang$core$String$isEmpty(thirdRound.error) && (!_elm_lang$core$String$isEmpty(thirdRound.mediaFileName))) ? _user$project$Ports$submitMediaFileToFirebase(thirdRound.mediaFileName) : (_elm_lang$core$String$isEmpty(thirdRound.error) ? _user$project$Networking$submitNewPostCmd(thirdRound) : _elm_lang$core$Platform_Cmd$none);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{postData: thirdRound}),
					_1: cmd
				};
			case 'OnPostMessageInput':
				var oldPostData = model.postData;
				var updatedPostData = _elm_lang$core$Native_Utils.update(
					oldPostData,
					{message: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{postData: updatedPostData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnPostImageNameChoosen':
				var _p57 = _p0._0;
				var oldPostData = model.postData;
				var fileName = _elm_lang$core$String$isEmpty(_p57.error) ? _p57.fileName : '';
				var updatedPostData = _elm_lang$core$Native_Utils.update(
					oldPostData,
					{mediaFileName: fileName, error: _p57.error});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{postData: updatedPostData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnContactUsFormSubmitCompleted':
				var _p58 = _p0._0;
				if (_p58.ctor === 'Ok') {
					var _p59 = _p58._0;
					var oldData = model.contactUsData;
					var output = _elm_lang$core$String$isEmpty(_p59.error) ? 'Your message has been submitted. Thank you!' : _p59.error;
					var newData = A2(_elm_lang$core$String$contains, 'message has been submitted', output) ? _elm_lang$core$Native_Utils.update(
						oldData,
						{error: output, name: '', email: '', message: ''}) : _elm_lang$core$Native_Utils.update(
						oldData,
						{error: output});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{contactUsData: newData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var oldData = model.contactUsData;
					var newData = _elm_lang$core$Native_Utils.update(
						oldData,
						{error: 'Something weird happened. Try later, please!'});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{contactUsData: newData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OnContactUsFormSubmit':
				var initialData = model.contactUsData;
				var i1 = _elm_lang$core$Native_Utils.update(
					initialData,
					{error: ''});
				var i2 = _elm_lang$core$String$isEmpty(i1.name) ? _elm_lang$core$Native_Utils.update(
					i1,
					{error: 'Name required!'}) : i1;
				var i3 = (_elm_lang$core$String$isEmpty(i2.error) && ((!A2(_elm_lang$core$String$contains, '@', i2.email)) || (!A2(_elm_lang$core$String$contains, '.', i2.email)))) ? _elm_lang$core$Native_Utils.update(
					i2,
					{error: 'Wrong email format!'}) : i2;
				var i4 = (_elm_lang$core$String$isEmpty(i3.error) && _elm_lang$core$String$isEmpty(i3.message)) ? _elm_lang$core$Native_Utils.update(
					i3,
					{error: 'Message required!'}) : i3;
				var cmd = _elm_lang$core$String$isEmpty(i4.error) ? _user$project$Networking$submitContactUsFormCmd(i4) : _elm_lang$core$Platform_Cmd$none;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{contactUsData: i4}),
					_1: cmd
				};
			case 'OnContactUsMessageInput':
				var oldData = model.contactUsData;
				var newData = _elm_lang$core$Native_Utils.update(
					oldData,
					{message: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{contactUsData: newData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnContactUsEmailInput':
				var oldData = model.contactUsData;
				var newData = _elm_lang$core$Native_Utils.update(
					oldData,
					{email: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{contactUsData: newData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnContactUsNameInput':
				var oldData = model.contactUsData;
				var newData = _elm_lang$core$Native_Utils.update(
					oldData,
					{name: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{contactUsData: newData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSubscribeMaxOrganization':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedOrganizationsPlan: _user$project$Models$MaxOrganization}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSubscribePremiumOrganization':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedOrganizationsPlan: _user$project$Models$PremiumOrganization}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSubscribePlusOrganization':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedOrganizationsPlan: _user$project$Models$PlusOrganization}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSubscribeBasicOrganization':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedOrganizationsPlan: _user$project$Models$BasicOrganization}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSubscribePremiumInnovators':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedInnovatorsPlan: _user$project$Models$PremiumInnovator}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSubscribePlusInnovators':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedInnovatorsPlan: _user$project$Models$PlusInnovator}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSubscribeBasicInnovators':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedInnovatorsPlan: _user$project$Models$BasicInnovator}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnSubscribeFreeInnovators':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedInnovatorsPlan: _user$project$Models$FreeInnovator}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnGetOrganizationDataCompleted':
				var _p60 = _p0._0;
				if (_p60.ctor === 'Ok') {
					var data = _p60._0.organization_data;
					var orgExtended = _elm_lang$core$Native_Utils.eq(data.id, 0) ? _user$project$Models$OrganizationExtended(0)('')('')('')('')(0)(0)('')('')('')('')('')('')('')(0)(0) : data;
					var cmd = _elm_lang$core$Native_Utils.eq(data.id, 0) ? _elm_lang$core$Platform_Cmd$none : _user$project$Ports$initPostMediaBtn('');
					var orgSettingsFields = _elm_lang$core$Native_Utils.eq(data.id, 0) ? _user$project$Models$OrganizationSettingsFields(0)('')('')('')('')(0)(0)('')('')('')('')('')('')('')('')('')('')('') : _user$project$Models$OrganizationSettingsFields(data.id)(data.name)(data.pic_uri)(data.country)(data.email)(data.complete_ideas_count)(data.organizations_plan_id)(data.description)(data.webpage)(data.about_us)(data.industry)(data.interested_industries)(data.username)(data.phone)('')('')('')('');
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{currentOrganizationExtended: orgExtended, organizationSettingsFields: orgSettingsFields}),
						_1: cmd
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnGetInnovatorDataCompleted':
				var _p61 = _p0._0;
				if (_p61.ctor === 'Ok') {
					var data = _p61._0.innovator_data;
					var cmd = _elm_lang$core$Native_Utils.eq(data.id, 0) ? _elm_lang$core$Platform_Cmd$none : _user$project$Ports$initPostMediaBtn('');
					var innData = _elm_lang$core$Native_Utils.eq(data.id, 0) ? _user$project$Models$InnovatorExtended(0)('')('')(0)('')('')(0)(0)('')('')('')('')('')('')(0) : data;
					var nameList = A2(_elm_lang$core$String$split, ' ', data.name);
					var name = function () {
						var _p62 = _elm_lang$core$List$head(nameList);
						if (_p62.ctor === 'Just') {
							return _p62._0;
						} else {
							return '';
						}
					}();
					var surnameList = A2(_elm_lang$core$List$drop, 1, nameList);
					var surname = function () {
						var _p63 = _elm_lang$core$List$head(surnameList);
						if (_p63.ctor === 'Just') {
							return _p63._0;
						} else {
							return '';
						}
					}();
					var innSettingsFields = _elm_lang$core$Native_Utils.eq(data.id, 0) ? _user$project$Models$InnovatorSettingsFields(0)('')('')('')(0)('')('')(0)(0)('')('')('')('')('')('')('')('')('')('') : _user$project$Models$InnovatorSettingsFields(data.id)(name)(surname)(data.pic_uri)(data.rating)(data.country)(data.email)(data.ideas_count)(data.innovators_plan_id)(data.description)(data.about_me)(data.education)(data.experience)(data.username)(data.phone)('')('')('')('');
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{currentInnovatorExtended: innData, innovatorSettingsFields: innSettingsFields}),
						_1: cmd
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnSignOutInitiated':
				var data = model.loggedInMember;
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Networking$signOutCmd(data.token)
				};
			case 'OnSignOutCompleted':
				var _p64 = _p0._0;
				if (_p64.ctor === 'Ok') {
					var orgEditables = _user$project$Models$OrganizationSettingsFieldsEditable(false)(false)(false)(false)(false)(false)(false)(false)(false)(false)(false);
					var editables = _user$project$Models$InnovatorSettingsFieldsEditable(false)(false)(false)(false)(false)(false)(false)(false)(false)(false);
					var cmd = _elm_lang$core$Native_Utils.eq(_p64._0.response, 'Sucess!') ? _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _elm_lang$navigation$Navigation$newUrl('#'),
							_1: {
								ctor: '::',
								_0: _user$project$Ports$reverseBackgroundImage(''),
								_1: {
									ctor: '::',
									_0: _user$project$Ports$turnOffNewNotifsFetch(''),
									_1: {
										ctor: '::',
										_0: _user$project$Ports$clearCachedData(''),
										_1: {ctor: '[]'}
									}
								}
							}
						}) : _elm_lang$core$Platform_Cmd$none;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								loggingInMember: A3(_user$project$Models$LoggingInMember, '', '', ''),
								loggedInMember: A5(_user$project$Models$LoggedInMember, 0, '', '', true, ''),
								dashboardOptionsVisible: false,
								newMessagesNotifsVisible: false,
								desktopPage: _user$project$Models$HomePage,
								dashboardMobilePage: _user$project$Models$MobileHomePage,
								getStartedOpened: false,
								loginOpened: false,
								innovatorSettingsFieldsEditable: editables,
								organizationSettingsFieldsEditable: orgEditables,
								chatWindowOpened: false,
								connections: {ctor: '[]'},
								mobilePageHistory: {ctor: '[]'},
								pageHistory: {ctor: '[]'},
								signedNDAs: {ctor: '[]'}
							}),
						_1: cmd
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnDashboardMobileSettingsPageOpen':
				var pageHistoryString = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$desktopPageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$SettingsPage, _1: model.pageHistory});
				var mobilePageHistoryStr = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$mobilePageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$MobileSettingsPage, _1: model.mobilePageHistory});
				var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(_user$project$Models$MobileSettingsPage);
				var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
					_user$project$TypeToStringUtils$langToString(model.language))(
					_user$project$TypeToStringUtils$desktopPageToString(_user$project$Models$SettingsPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
				var cmd = _user$project$Ports$cacheAllData(cachedData);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dashboardMobilePage: _user$project$Models$MobileSettingsPage,
							desktopPage: _user$project$Models$SettingsPage,
							mobilePageHistory: {ctor: '::', _0: _user$project$Models$MobileSettingsPage, _1: model.mobilePageHistory},
							pageHistory: {ctor: '::', _0: _user$project$Models$SettingsPage, _1: model.pageHistory}
						}),
					_1: cmd
				};
			case 'OnDashboardMobileProfilePageOpen':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dashboardMobilePage: _user$project$Models$MobileProfilePage,
							mobilePageHistory: {ctor: '::', _0: _user$project$Models$MobileProfilePage, _1: model.mobilePageHistory}
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnDashboardMobileHomePageOpen':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dashboardMobilePage: _user$project$Models$MobileHomePage,
							mobilePageHistory: {ctor: '::', _0: _user$project$Models$MobileHomePage, _1: model.mobilePageHistory}
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnLocationChangeProfilePage':
				var pageHistoryString = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$desktopPageToString(p);
					},
					{ctor: '::', _0: _user$project$Models$ProfilePage, _1: model.pageHistory});
				var mobilePageHistoryStr = A2(
					_elm_lang$core$List$map,
					function (p) {
						return _user$project$TypeToStringUtils$mobilePageToString(p);
					},
					model.mobilePageHistory);
				var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(model.dashboardMobilePage);
				var cachedData = _user$project$Models$CacheDataWrapper(model.loggedInMember)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
					_user$project$TypeToStringUtils$langToString(model.language))(
					_user$project$TypeToStringUtils$desktopPageToString(_user$project$Models$ProfilePage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
				var cmd = _user$project$Ports$cacheAllData(cachedData);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							desktopPage: _user$project$Models$ProfilePage,
							pageHistory: {ctor: '::', _0: _user$project$Models$ProfilePage, _1: model.pageHistory}
						}),
					_1: cmd
				};
			case 'OnSwitchDashboardOptionsVisible':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{dashboardOptionsVisible: !model.dashboardOptionsVisible}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnLoggingInMemberCompleted':
				var _p65 = _p0._0;
				if (_p65.ctor === 'Ok') {
					var _p66 = _p65._0;
					var pageHistoryString = A2(
						_elm_lang$core$List$map,
						function (p) {
							return _user$project$TypeToStringUtils$desktopPageToString(p);
						},
						model.pageHistory);
					var mobilePageHistoryStr = A2(
						_elm_lang$core$List$map,
						function (p) {
							return _user$project$TypeToStringUtils$mobilePageToString(p);
						},
						model.mobilePageHistory);
					var mobilePageStr = _user$project$TypeToStringUtils$mobilePageToString(model.dashboardMobilePage);
					var loginData = _p66.login_data;
					var getExtendedDataCmd = loginData.isOrganization ? _user$project$Networking$getOrganizationDataCmd(
						A2(_user$project$Models$GetDataRequestStruct, loginData.id, loginData.token)) : _user$project$Networking$getInnovatorDataCmd(
						A2(_user$project$Models$GetDataRequestStruct, loginData.id, loginData.token));
					var unredMessagesRequestWrapper = A3(_user$project$Models$UnredChatMessagesRequestWrapper, loginData.id, loginData.isOrganization, loginData.token);
					var getSuggestions = loginData.isOrganization ? A2(
						_user$project$Networking$fetchSuggestionsCmd,
						A2(_user$project$Models$GetDataRequestStruct, loginData.id, loginData.token),
						_user$project$Networking$fetchSuggestedInnovatorsUri) : A2(
						_user$project$Networking$fetchSuggestionsCmd,
						A2(_user$project$Models$GetDataRequestStruct, loginData.id, loginData.token),
						_user$project$Networking$fetchSuggestedOrganizationsUri);
					var cachedData = _user$project$Models$CacheDataWrapper(loginData)(mobilePageStr)(model.currentInnovatorExtended)(model.currentOrganizationExtended)(model.postList)(model.currentChatHistory)(model.pendingUnredMessages)(model.suggestedUsers)(model.notifications)(
						_user$project$TypeToStringUtils$langToString(model.language))(
						_user$project$TypeToStringUtils$desktopPageToString(model.desktopPage))(model.seeOtherInnovator)(model.seeOtherOrganization)(model.viewingCurrentIdea)(model.viewingCurrentFullIdea)(mobilePageHistoryStr)(pageHistoryString)(model.signedNDAs);
					var loggingInData = model.loggingInMember;
					var newLoggingInData = _elm_lang$core$Native_Utils.update(
						loggingInData,
						{loginError: _p66.error});
					return _elm_lang$core$String$isEmpty(_p66.error) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{loggedInMember: loginData}),
						_1: _elm_lang$core$Platform_Cmd$batch(
							{
								ctor: '::',
								_0: _elm_lang$navigation$Navigation$newUrl('#dashboard'),
								_1: {
									ctor: '::',
									_0: _user$project$Ports$setWhiteBackground(''),
									_1: {
										ctor: '::',
										_0: getExtendedDataCmd,
										_1: {
											ctor: '::',
											_0: _user$project$Networking$fetchExtendedPostsCmd(loginData.token),
											_1: {
												ctor: '::',
												_0: _user$project$Networking$fetchUnredMessagesCmd(unredMessagesRequestWrapper),
												_1: {
													ctor: '::',
													_0: getSuggestions,
													_1: {
														ctor: '::',
														_0: _user$project$Networking$fetchNewNotificationsCmd(unredMessagesRequestWrapper),
														_1: {
															ctor: '::',
															_0: _user$project$Ports$turnOnNewNotifsFetch(''),
															_1: {
																ctor: '::',
																_0: _user$project$Ports$cacheAllData(cachedData),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							})
					} : {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{loggingInMember: newLoggingInData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var loggingInData = model.loggingInMember;
					var newLoggingInData = _elm_lang$core$Native_Utils.update(
						loggingInData,
						{
							loginError: _elm_lang$core$Basics$toString(_p65._0)
						});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{loggingInMember: newLoggingInData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OnLoggingInMemberLogin':
				var initialData = model.loggingInMember;
				var memberData = _elm_lang$core$Native_Utils.update(
					initialData,
					{loginError: ''});
				var email = memberData.email;
				var emailError = ((!A2(_elm_lang$core$String$contains, '@', email)) || (!A2(_elm_lang$core$String$contains, '.', email))) ? 'Invalid email format' : '';
				var password = memberData.password;
				var passwordError = (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$String$length(password),
					8) < 0) ? 'Password at least 8 chars long' : '';
				var errorOutput = (!_elm_lang$core$String$isEmpty(emailError)) ? emailError : ((!_elm_lang$core$String$isEmpty(passwordError)) ? passwordError : '');
				var newMember = _elm_lang$core$Native_Utils.update(
					memberData,
					{loginError: errorOutput});
				var cmd = (_elm_lang$core$String$isEmpty(emailError) && _elm_lang$core$String$isEmpty(passwordError)) ? _user$project$Networking$memberLoginCmd(memberData) : _elm_lang$core$Platform_Cmd$none;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{loggingInMember: newMember}),
					_1: cmd
				};
			case 'OnLoggingInMemberUsernameInput':
				var oldMember = model.loggingInMember;
				var newMember = _elm_lang$core$Native_Utils.update(
					oldMember,
					{email: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{loggingInMember: newMember}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnLoggingInMemberPasswordInput':
				var oldMember = model.loggingInMember;
				var newMember = _elm_lang$core$Native_Utils.update(
					oldMember,
					{password: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{loggingInMember: newMember}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'TopMembersFetchCompleted':
				var _p67 = _p0._0;
				if (_p67.ctor === 'Ok') {
					var _p68 = _p67._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{topInnovators: _p68.innovators, topOrganizations: _p68.organizations}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnInnovatorRegistrationSubmit':
				var tarrifPlan = model.selectedInnovatorsPlan;
				var tp = function () {
					var _p69 = tarrifPlan;
					switch (_p69.ctor) {
						case 'NotSelectedForInnovators':
							return 'Weird Error';
						case 'FreeInnovator':
							return 'Free';
						case 'BasicInnovator':
							return 'Basic';
						case 'PlusInnovator':
							return 'Plus';
						default:
							return 'Premium';
					}
				}();
				var initialData = model.innovatorUnderRegistration;
				var oldInnovatorData = _elm_lang$core$Native_Utils.update(
					initialData,
					{registrationError: ''});
				var name = oldInnovatorData.full_name;
				var email = oldInnovatorData.email;
				var password = oldInnovatorData.password;
				var country = oldInnovatorData.country;
				var agreedWithTS = oldInnovatorData.termsOfServiceAgreemant;
				var newInnovatorData = _elm_lang$core$String$isEmpty(name) ? _elm_lang$core$Native_Utils.update(
					oldInnovatorData,
					{registrationError: 'Name required'}) : oldInnovatorData;
				var newInnovatorData1 = (_elm_lang$core$String$isEmpty(newInnovatorData.registrationError) && ((!A2(_elm_lang$core$String$contains, '@', email)) || (!A2(_elm_lang$core$String$contains, '.', email)))) ? _elm_lang$core$Native_Utils.update(
					newInnovatorData,
					{registrationError: 'Email is invalid'}) : newInnovatorData;
				var newInnovatorData2 = (_elm_lang$core$String$isEmpty(newInnovatorData1.registrationError) && (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$String$length(password),
					8) < 0)) ? _elm_lang$core$Native_Utils.update(
					newInnovatorData1,
					{registrationError: 'Password at least 8 characters long'}) : newInnovatorData1;
				var newInnovatorData3 = (_elm_lang$core$String$isEmpty(newInnovatorData2.registrationError) && _elm_lang$core$String$isEmpty(country)) ? _elm_lang$core$Native_Utils.update(
					newInnovatorData2,
					{registrationError: 'Country required'}) : newInnovatorData2;
				var newInnovatorData4 = (_elm_lang$core$String$isEmpty(newInnovatorData3.registrationError) && (!agreedWithTS)) ? _elm_lang$core$Native_Utils.update(
					newInnovatorData3,
					{registrationError: 'Should be agreed with our TS'}) : newInnovatorData3;
				var newInnovatorData5 = (_elm_lang$core$String$isEmpty(newInnovatorData4.registrationError) && _elm_lang$core$Native_Utils.eq(tarrifPlan, _user$project$Models$NotSelectedForInnovators)) ? _elm_lang$core$Native_Utils.update(
					newInnovatorData4,
					{registrationError: 'Select your tarrif plan, please!'}) : newInnovatorData4;
				var cmd = _elm_lang$core$String$isEmpty(newInnovatorData5.registrationError) ? A2(_user$project$Networking$innovatorRegisterCmd, newInnovatorData5, tp) : _elm_lang$core$Platform_Cmd$none;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorUnderRegistration: newInnovatorData5}),
					_1: cmd
				};
			case 'InnovatorRegisterCompleted':
				var _p70 = _p0._0;
				if (_p70.ctor === 'Ok') {
					var _p71 = _p70._0;
					if (!_elm_lang$core$String$isEmpty(_p71.error)) {
						var oldData = model.innovatorUnderRegistration;
						var newData = _elm_lang$core$Native_Utils.update(
							oldData,
							{registrationError: _p71.error});
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{innovatorUnderRegistration: newData}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						var regDataNew = _p71.reg_data;
						var loggedInMem = A5(_user$project$Models$LoggedInMember, regDataNew.id, regDataNew.name, regDataNew.email, false, regDataNew.token);
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{loggedInData: _p71.reg_data, loggedInMember: loggedInMem}),
							_1: _elm_lang$core$Platform_Cmd$batch(
								{
									ctor: '::',
									_0: _elm_lang$navigation$Navigation$newUrl('#dashboard'),
									_1: {
										ctor: '::',
										_0: _user$project$Ports$setWhiteBackground(''),
										_1: {
											ctor: '::',
											_0: _user$project$Networking$getInnovatorDataCmd(
												A2(_user$project$Models$GetDataRequestStruct, regDataNew.id, regDataNew.token)),
											_1: {ctor: '[]'}
										}
									}
								})
						};
					}
				} else {
					var oldData = model.innovatorUnderRegistration;
					var newData = _elm_lang$core$Native_Utils.update(
						oldData,
						{registrationError: 'Some weird stuff. Try again and contact us, please!'});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{innovatorUnderRegistration: newData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OnInnovatorRegistrationReceiveNewletterCheck':
				var oldInnovator = model.innovatorUnderRegistration;
				var newInnovator = _elm_lang$core$Native_Utils.update(
					oldInnovator,
					{receiveNewsletterAgreement: !oldInnovator.receiveNewsletterAgreement});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorUnderRegistration: newInnovator}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnInnovatorRegistrationTSAgreementCheck':
				var oldInnovator = model.innovatorUnderRegistration;
				var newInnovator = _elm_lang$core$Native_Utils.update(
					oldInnovator,
					{termsOfServiceAgreemant: !oldInnovator.termsOfServiceAgreemant});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorUnderRegistration: newInnovator}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnInnovatorRegistrationCountryInput':
				var oldInnovator = model.innovatorUnderRegistration;
				var newInnovator = _elm_lang$core$Native_Utils.update(
					oldInnovator,
					{country: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorUnderRegistration: newInnovator}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnInnovatorRegistrationPasswordInput':
				var oldInnovator = model.innovatorUnderRegistration;
				var newInnovator = _elm_lang$core$Native_Utils.update(
					oldInnovator,
					{password: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorUnderRegistration: newInnovator}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnInnovatorRegistrationEmailInput':
				var oldInnovator = model.innovatorUnderRegistration;
				var newInnovator = _elm_lang$core$Native_Utils.update(
					oldInnovator,
					{email: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorUnderRegistration: newInnovator}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnInnovatorRegistrationNameInput':
				var oldInnovator = model.innovatorUnderRegistration;
				var newInnovator = _elm_lang$core$Native_Utils.update(
					oldInnovator,
					{full_name: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{innovatorUnderRegistration: newInnovator}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnCompanyRegistrationSubmit':
				var tarrifPlan = model.selectedOrganizationsPlan;
				var tp = function () {
					var _p72 = tarrifPlan;
					switch (_p72.ctor) {
						case 'NotSelectedForOrganizations':
							return 'Weird Error';
						case 'BasicOrganization':
							return 'Basic';
						case 'PlusOrganization':
							return 'Plus';
						case 'PremiumOrganization':
							return 'Premium';
						default:
							return 'Max';
					}
				}();
				var initialData = model.companyUnderRegistration;
				var oldCompanyData = _elm_lang$core$Native_Utils.update(
					initialData,
					{registrationError: ''});
				var name = oldCompanyData.name;
				var email = oldCompanyData.email;
				var password = oldCompanyData.password;
				var country = oldCompanyData.country;
				var agreedWithTS = oldCompanyData.termsOfServiceAgreemant;
				var newCompanyData = _elm_lang$core$String$isEmpty(name) ? _elm_lang$core$Native_Utils.update(
					oldCompanyData,
					{registrationError: 'Name required'}) : oldCompanyData;
				var newCompanyData1 = (_elm_lang$core$String$isEmpty(newCompanyData.registrationError) && ((!A2(_elm_lang$core$String$contains, '@', email)) || (!A2(_elm_lang$core$String$contains, '.', email)))) ? _elm_lang$core$Native_Utils.update(
					newCompanyData,
					{registrationError: 'Email is invalid'}) : newCompanyData;
				var newCompanyData2 = (_elm_lang$core$String$isEmpty(newCompanyData1.registrationError) && (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$String$length(password),
					8) < 0)) ? _elm_lang$core$Native_Utils.update(
					newCompanyData1,
					{registrationError: 'Password at least 8 characters long'}) : newCompanyData1;
				var newCompanyData3 = (_elm_lang$core$String$isEmpty(newCompanyData2.registrationError) && _elm_lang$core$String$isEmpty(country)) ? _elm_lang$core$Native_Utils.update(
					newCompanyData2,
					{registrationError: 'Country required'}) : newCompanyData2;
				var newCompanyData4 = (_elm_lang$core$String$isEmpty(newCompanyData3.registrationError) && (!agreedWithTS)) ? _elm_lang$core$Native_Utils.update(
					newCompanyData3,
					{registrationError: 'Should be agreed with our TS'}) : newCompanyData3;
				var newCompanyData5 = (_elm_lang$core$String$isEmpty(newCompanyData4.registrationError) && _elm_lang$core$Native_Utils.eq(tarrifPlan, _user$project$Models$NotSelectedForOrganizations)) ? _elm_lang$core$Native_Utils.update(
					newCompanyData4,
					{registrationError: 'Select your tarrif plan, please!'}) : newCompanyData4;
				var cmd = _elm_lang$core$String$isEmpty(newCompanyData5.registrationError) ? A2(_user$project$Networking$organizationRegisterCmd, newCompanyData5, tp) : _elm_lang$core$Platform_Cmd$none;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{companyUnderRegistration: newCompanyData5}),
					_1: cmd
				};
			case 'CompanyRegisterCompleted':
				var _p73 = _p0._0;
				if (_p73.ctor === 'Ok') {
					var _p74 = _p73._0;
					if (!_elm_lang$core$String$isEmpty(_p74.error)) {
						var oldData = model.companyUnderRegistration;
						var newData = _elm_lang$core$Native_Utils.update(
							oldData,
							{registrationError: _p74.error});
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{companyUnderRegistration: newData}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						var regDataNew = _p74.reg_data;
						var loggedInMem = A5(_user$project$Models$LoggedInMember, regDataNew.id, regDataNew.name, regDataNew.email, true, regDataNew.token);
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{loggedInData: _p74.reg_data, loggedInMember: loggedInMem}),
							_1: _elm_lang$core$Platform_Cmd$batch(
								{
									ctor: '::',
									_0: _elm_lang$navigation$Navigation$newUrl('#dashboard'),
									_1: {
										ctor: '::',
										_0: _user$project$Ports$setWhiteBackground(''),
										_1: {
											ctor: '::',
											_0: _user$project$Networking$getOrganizationDataCmd(
												A2(_user$project$Models$GetDataRequestStruct, regDataNew.id, regDataNew.token)),
											_1: {ctor: '[]'}
										}
									}
								})
						};
					}
				} else {
					var oldData = model.companyUnderRegistration;
					var newData = _elm_lang$core$Native_Utils.update(
						oldData,
						{registrationError: 'Some weird stuff. Try again and contact us, please!'});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{companyUnderRegistration: newData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OnCompanyRegistrationReceiveNewletterCheck':
				var oldCompany = model.companyUnderRegistration;
				var newCompany = _elm_lang$core$Native_Utils.update(
					oldCompany,
					{receiveNewsletterAgreement: !oldCompany.receiveNewsletterAgreement});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{companyUnderRegistration: newCompany}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnCompanyRegistrationTSAgreementCheck':
				var oldCompany = model.companyUnderRegistration;
				var newCompany = _elm_lang$core$Native_Utils.update(
					oldCompany,
					{termsOfServiceAgreemant: !oldCompany.termsOfServiceAgreemant});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{companyUnderRegistration: newCompany}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnCompanyRegistrationCountryInput':
				var oldCompany = model.companyUnderRegistration;
				var newCompany = _elm_lang$core$Native_Utils.update(
					oldCompany,
					{country: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{companyUnderRegistration: newCompany}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnCompanyRegistrationPasswordInput':
				var oldCompany = model.companyUnderRegistration;
				var newCompany = _elm_lang$core$Native_Utils.update(
					oldCompany,
					{password: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{companyUnderRegistration: newCompany}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnCompanyRegistrationEmailInput':
				var oldCompany = model.companyUnderRegistration;
				var newCompany = _elm_lang$core$Native_Utils.update(
					oldCompany,
					{email: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{companyUnderRegistration: newCompany}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnCompanyRegistrationNameInput':
				var oldCompany = model.companyUnderRegistration;
				var newCompany = _elm_lang$core$Native_Utils.update(
					oldCompany,
					{name: _p0._0});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{companyUnderRegistration: newCompany}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnMobileTarrifPlansViewOpen':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mobileMenuView: false, mobileDefaultView: false, mobileIdeaGeneratorsView: false, mobileOrganizationsView: false, mobilePricingToggleOpen: false, mobilePricingIdeaGeneratorsView: false, mobilePricingOrganizationsView: false, mobileAboutUsView: false, mobileContactView: false, mobileFaqView: false, mobileTarrifPlansView: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnMobileFaqViewOpen':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mobileMenuView: false, mobileDefaultView: false, mobileIdeaGeneratorsView: false, mobileOrganizationsView: false, mobilePricingToggleOpen: false, mobilePricingIdeaGeneratorsView: false, mobilePricingOrganizationsView: false, mobileAboutUsView: false, mobileContactView: false, mobileFaqView: true, mobileTarrifPlansView: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnMobileContactUsViewOpen':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mobileMenuView: false, mobileDefaultView: false, mobileIdeaGeneratorsView: false, mobileOrganizationsView: false, mobilePricingToggleOpen: false, mobilePricingIdeaGeneratorsView: false, mobilePricingOrganizationsView: false, mobileAboutUsView: false, mobileContactView: true, mobileFaqView: false, mobileTarrifPlansView: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnMobileAboutUsViewOpen':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mobileMenuView: false, mobileDefaultView: false, mobileIdeaGeneratorsView: false, mobileOrganizationsView: false, mobilePricingToggleOpen: false, mobilePricingIdeaGeneratorsView: false, mobilePricingOrganizationsView: false, mobileAboutUsView: true, mobileContactView: false, mobileFaqView: false, mobileTarrifPlansView: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnMobilePricingOrganizationsViewOpen':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mobileMenuView: false, mobileDefaultView: false, mobileIdeaGeneratorsView: false, mobileOrganizationsView: false, mobilePricingToggleOpen: false, mobilePricingIdeaGeneratorsView: false, mobilePricingOrganizationsView: true, mobileAboutUsView: false, mobileContactView: false, mobileFaqView: false, mobileTarrifPlansView: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnMobilePricingIdeaGeneratorsViewOpen':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mobileMenuView: false, mobileDefaultView: false, mobileIdeaGeneratorsView: false, mobileOrganizationsView: false, mobilePricingToggleOpen: false, mobilePricingIdeaGeneratorsView: true, mobilePricingOrganizationsView: false, mobileAboutUsView: false, mobileContactView: false, mobileFaqView: false, mobileTarrifPlansView: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnMobilePricingToggle':
				var newToggleStatus = !model.mobilePricingToggleOpen;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mobileDefaultView: false, mobileIdeaGeneratorsView: false, mobileOrganizationsView: false, mobilePricingToggleOpen: newToggleStatus, mobilePricingIdeaGeneratorsView: false, mobilePricingOrganizationsView: false, mobileAboutUsView: false, mobileContactView: false, mobileFaqView: false, mobileTarrifPlansView: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnMobileOrganizationsViewOpen':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mobileMenuView: false, mobileDefaultView: false, mobileIdeaGeneratorsView: false, mobileOrganizationsView: true, mobilePricingToggleOpen: false, mobilePricingIdeaGeneratorsView: false, mobilePricingOrganizationsView: false, mobileAboutUsView: false, mobileContactView: false, mobileFaqView: false, mobileTarrifPlansView: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnMobileIdeaGeneratorsViewOpen':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mobileMenuView: false, mobileDefaultView: false, mobileIdeaGeneratorsView: true, mobileOrganizationsView: false, mobilePricingToggleOpen: false, mobilePricingIdeaGeneratorsView: false, mobilePricingOrganizationsView: false, mobileAboutUsView: false, mobileContactView: false, mobileFaqView: false, mobileTarrifPlansView: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnMobileMenuOpen':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mobileMenuView: true, mobileDefaultView: false, mobileIdeaGeneratorsView: false, mobileOrganizationsView: false, mobilePricingToggleOpen: false, mobilePricingIdeaGeneratorsView: false, mobilePricingOrganizationsView: false, mobileAboutUsView: false, mobileContactView: false, mobileFaqView: false, mobileTarrifPlansView: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnMobileRegisterIdeaGeneratorViewOpen':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mobileRegisterIdeaGeneratorOpened: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnMobileRegisterCompanyViewOpen':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mobileRegisterCompanyOpened: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnMobileGetStartedViewOpen':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mobileGetStartedOpened: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnAdminPanelSignIn':
				return (_elm_lang$core$Native_Utils.eq(
					_elm_lang$core$String$length(model.adminPanelFirstPassword),
					0) || _elm_lang$core$Native_Utils.eq(
					_elm_lang$core$String$length(model.adminPanelSecondPassword),
					0)) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{adminPanelSignInError: 'Երկու դաշտերն էլ պարտադիր են լրացման համար'}),
					_1: _elm_lang$core$Platform_Cmd$none
				} : {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Networking$adminPanelSignInCmd(
						A2(_user$project$Models$AdminPanelSignInData, model.adminPanelFirstPassword, model.adminPanelSecondPassword))
				};
			case 'OnAdminPanelFirstPasswordInput':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{adminPanelFirstPassword: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnAdminPanelSecondPasswordInput':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{adminPanelSecondPassword: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'AdminPanelSignInCompleted':
				var _p75 = _p0._0;
				if (_p75.ctor === 'Ok') {
					var _p76 = _p75._0;
					return _elm_lang$core$Native_Utils.eq(
						_elm_lang$core$String$length(_p76.error),
						0) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{adminPanelRegDataList: _p76.reg_data, adminPanelSignedIn: true}),
						_1: _elm_lang$core$Platform_Cmd$none
					} : {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{adminPanelSignInError: _p76.error}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								adminPanelSignInError: _elm_lang$core$Basics$toString(_p75._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'PromoRegistrationCallCompleted':
				var _p77 = _p0._0;
				if (_p77.ctor === 'Ok') {
					var _p78 = _p77._0;
					return _elm_lang$core$Native_Utils.eq(
						_elm_lang$core$String$length(_p78.error),
						0) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{landingInputFieldsVisible: false}),
						_1: _user$project$Ports$showPromoRegistrationConfirmDialog('')
					} : {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{landingPromoRegisterError: _p78.error}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{landingPromoRegisterError: 'Չսպասված սխալ գրանցման ժամանակ: Կապվեք մեզ հետ, խնդրեմ'}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OnLandingSignUpMobileClick':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{landingSignUpMobileVisible: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnLandingSignUp':
				var shortIdea = model.landingShortIdea;
				var prefOrganization = model.landingCompany;
				var email = model.landingEmail;
				var emailError = _elm_lang$core$String$isEmpty(email) ? 'Պարտադիր է լրացնել' : ((!(A2(_elm_lang$core$String$contains, '@', email) && A2(_elm_lang$core$String$contains, '.', email))) ? 'Էլ. հասցեի ֆորմատը սխալ է' : '');
				var username = model.landingUsername;
				var usernameError = _elm_lang$core$String$isEmpty(username) ? 'Պարտադիր է լրացնել' : '';
				var cmd = (_elm_lang$core$String$isEmpty(usernameError) && (_elm_lang$core$String$isEmpty(emailError) && (_elm_lang$core$String$isEmpty(model.landingCompanyError) && _elm_lang$core$String$isEmpty(model.landingShortIdeaError)))) ? _user$project$Networking$promoRegisterCmd(
					A5(_user$project$Models$PromoRegistration, username, email, prefOrganization, shortIdea, '')) : _elm_lang$core$Platform_Cmd$none;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{landingUsernameError: usernameError, landingEmailError: emailError}),
					_1: cmd
				};
			case 'OnLandingShortIdeaType':
				var _p79 = _p0._0;
				var ideaError = (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$String$length(_p79),
					200) > 0) ? 'Առավելագույնը 200 նիշ:' : '';
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{landingShortIdea: _p79, landingShortIdeaError: ideaError}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnLandingCompanyType':
				var _p80 = _p0._0;
				var companyError = (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$String$length(_p80),
					30) > 0) ? 'Առավելագույնը 30 նիշ:' : '';
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{landingCompany: _p80, landingCompanyError: companyError}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnLandingEmailType':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{landingEmail: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnLandingUsernameType':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{landingUsername: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnIdeaGeneratorRegistrationOpen':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{registerIdeaGeneratorOpened: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnCompanyRegistrationOpen':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{registerCompanyOpened: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnLoginButtonSwitch':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{loginOpened: !model.loginOpened}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnGetStartedButtonsSwitch':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{getStartedOpened: !model.getStartedOpened}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnPricingClose':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{pricingOpened: _user$project$Models$Closed}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnPricingOpen':
				var reverted = function () {
					var _p81 = model.pricingOpened;
					if (_p81.ctor === 'Opened') {
						return _user$project$Models$Closed;
					} else {
						return _user$project$Models$Opened;
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{pricingOpened: reverted}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnLocationChange':
				var newRoute = _user$project$Routes$parseLocation(_p0._0);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{route: newRoute}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});

var _user$project$TestView$testView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href('#faq'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Down'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('up'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('had seen little of Holmes lately. My marriage had drifted us away from each other. My own complete happiness, and the home-centred interests which rise up around the man who first finds himself master of his own establishment, were sufficient to absorb all my attention, while Holmes, who loathed every form of society with his whole Bohemian soul, remained in our lodgings in Baker Street, buried among his old books, and alternating from week to week between cocaine and ambition, the drowsiness of the drug, and the fierce energy of his own keen nature. He was still, as ever, deeply attracted by the study of crime, and occupied his immense faculties and extraordinary powers of observation in following out those clues, and clearing up those mysteries which had been abandoned as hopeless by the official police. From time to time I heard some vague account of his doings: of his summons to Odessa in the case of the Trepoff murder, of his clearing up of the singular tragedy of the Atkinson brothers at Trincomalee, and finally of the mission which he had accomplished so delicately and successfully for the reigning family of Holland. Beyond these signs of his activity, however, which I merely shared with all the readers of the daily press, I knew little of my former friend and companion had seen little of Holmes lately. My marriage had drifted us away from each other. My own complete happiness, and the home-centred interests which rise up around the man who first finds himself master of his own establishment, were sufficient to absorb all my attention, while Holmes, who loathed every form of society with his whole Bohemian soul, remained in our lodgings in Baker Street, buried among his old books, and alternating from week to week between cocaine and ambition, the drowsiness of the drug, and the fierce energy of his own keen nature. He was still, as ever, deeply attracted by the study of crime, and occupied his immense faculties and extraordinary powers of observation in following out those clues, and clearing up those mysteries which had been abandoned as hopeless by the official police. From time to time I heard some vague account of his doings: of his summons to Odessa in the case of the Trepoff murder, of his clearing up of the singular tragedy of the Atkinson brothers at Trincomalee, and finally of the mission which he had accomplished so delicately and successfully for the reigning family of Holland. Beyond these signs of his activity, however, which I merely shared with all the readers of the daily press, I knew little of my former friend and companion had seen little of Holmes lately. My marriage had drifted us away from each other. My own complete happiness, and the home-centred interests which rise up around the man who first finds himself master of his own establishment, were sufficient to absorb all my attention, while Holmes, who loathed every form of society with his whole Bohemian soul, remained in our lodgings in Baker Street, buried among his old books, and alternating from week to week between cocaine and ambition, the drowsiness of the drug, and the fierce energy of his own keen nature. He was still, as ever, deeply attracted by the study of crime, and occupied his immense faculties and extraordinary powers of observation in following out those clues, and clearing up those mysteries which had been abandoned as hopeless by the official police. From time to time I heard some vague account of his doings: of his summons to Odessa in the case of the Trepoff murder, of his clearing up of the singular tragedy of the Atkinson brothers at Trincomalee, and finally of the mission which he had accomplished so delicately and successfully for the reigning family of Holland. Beyond these signs of his activity, however, which I merely shared with all the readers of the daily press, I knew little of my former friend and companion had seen little of Holmes lately. My marriage had drifted us away from each other. My own complete happiness, and the home-centred interests which rise up around the man who first finds himself master of his own establishment, were sufficient to absorb all my attention, while Holmes, who loathed every form of society with his whole Bohemian soul, remained in our lodgings in Baker Street, buried among his old books, and alternating from week to week between cocaine and ambition, the drowsiness of the drug, and the fierce energy of his own keen nature. He was still, as ever, deeply attracted by the study of crime, and occupied his immense faculties and extraordinary powers of observation in following out those clues, and clearing up those mysteries which had been abandoned as hopeless by the official police. From time to time I heard some vague account of his doings: of his summons to Odessa in the case of the Trepoff murder, of his clearing up of the singular tragedy of the Atkinson brothers at Trincomalee, and finally of the mission which he had accomplished so delicately and successfully for the reigning family of Holland. Beyond these signs of his activity, however, which I merely shared with all the readers of the daily press, I knew little of my former friend and companion had seen little of Holmes lately. My marriage had drifted us away from each other. My own complete happiness, and the home-centred interests which rise up around the man who first finds himself master of his own establishment, were sufficient to absorb all my attention, while Holmes, who loathed every form of society with his whole Bohemian soul, remained in our lodgings in Baker Street, buried among his old books, and alternating from week to week between cocaine and ambition, the drowsiness of the drug, and the fierce energy of his own keen nature. He was still, as ever, deeply attracted by the study of crime, and occupied his immense faculties and extraordinary powers of observation in following out those clues, and clearing up those mysteries which had been abandoned as hopeless by the official police. From time to time I heard some vague account of his doings: of his summons to Odessa in the case of the Trepoff murder, of his clearing up of the singular tragedy of the Atkinson brothers at Trincomalee, and finally of the mission which he had accomplished so delicately and successfully for the reigning family of Holland. Beyond these signs of his activity, however, which I merely shared with all the readers of the daily press, I knew little of my former friend and companion had seen little of Holmes lately. My marriage had drifted us away from each other. My own complete happiness, and the home-centred interests which rise up around the man who first finds himself master of his own establishment, were sufficient to absorb all my attention, while Holmes, who loathed every form of society with his whole Bohemian soul, remained in our lodgings in Baker Street, buried among his old books, and alternating from week to week between cocaine and ambition, the drowsiness of the drug, and the fierce energy of his own keen nature. He was still, as ever, deeply attracted by the study of crime, and occupied his immense faculties and extraordinary powers of observation in following out those clues, and clearing up those mysteries which had been abandoned as hopeless by the official police. From time to time I heard some vague account of his doings: of his summons to Odessa in the case of the Trepoff murder, of his clearing up of the singular tragedy of the Atkinson brothers at Trincomalee, and finally of the mission which he had accomplished so delicately and successfully for the reigning family of Holland. Beyond these signs of his activity, however, which I merely shared with all the readers of the daily press, I knew little of my former friend and companion'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href('#up'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Up'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$id('faq'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('had seen little of Holmes lately. My marriage had drifted us away from each other. My own complete happiness, and the home-centred interests which rise up around the man who first finds himself master of his own establishment, were sufficient to absorb all my attention, while Holmes, who loathed every form of society with his whole Bohemian soul, remained in our lodgings in Baker Street, buried among his old books, and alternating from week to week between cocaine and ambition, the drowsiness of the drug, and the fierce energy of his own keen nature. He was still, as ever, deeply attracted by the study of crime, and occupied his immense faculties and extraordinary powers of observation in following out those clues, and clearing up those mysteries which had been abandoned as hopeless by the official police. From time to time I heard some vague account of his doings: of his summons to Odessa in the case of the Trepoff murder, of his clearing up of the singular tragedy of the Atkinson brothers at Trincomalee, and finally of the mission which he had accomplished so delicately and successfully for the reigning family of Holland. Beyond these signs of his activity, however, which I merely shared with all the readers of the daily press, I knew little of my former friend and companion had seen little of Holmes lately. My marriage had drifted us away from each other. My own complete happiness, and the home-centred interests which rise up around the man who first finds himself master of his own establishment, were sufficient to absorb all my attention, while Holmes, who loathed every form of society with his whole Bohemian soul, remained in our lodgings in Baker Street, buried among his old books, and alternating from week to week between cocaine and ambition, the drowsiness of the drug, and the fierce energy of his own keen nature. He was still, as ever, deeply attracted by the study of crime, and occupied his immense faculties and extraordinary powers of observation in following out those clues, and clearing up those mysteries which had been abandoned as hopeless by the official police. From time to time I heard some vague account of his doings: of his summons to Odessa in the case of the Trepoff murder, of his clearing up of the singular tragedy of the Atkinson brothers at Trincomalee, and finally of the mission which he had accomplished so delicately and successfully for the reigning family of Holland. Beyond these signs of his activity, however, which I merely shared with all the readers of the daily press, I knew little of my former friend and companion had seen little of Holmes lately. My marriage had drifted us away from each other. My own complete happiness, and the home-centred interests which rise up around the man who first finds himself master of his own establishment, were sufficient to absorb all my attention, while Holmes, who loathed every form of society with his whole Bohemian soul, remained in our lodgings in Baker Street, buried among his old books, and alternating from week to week between cocaine and ambition, the drowsiness of the drug, and the fierce energy of his own keen nature. He was still, as ever, deeply attracted by the study of crime, and occupied his immense faculties and extraordinary powers of observation in following out those clues, and clearing up those mysteries which had been abandoned as hopeless by the official police. From time to time I heard some vague account of his doings: of his summons to Odessa in the case of the Trepoff murder, of his clearing up of the singular tragedy of the Atkinson brothers at Trincomalee, and finally of the mission which he had accomplished so delicately and successfully for the reigning family of Holland. Beyond these signs of his activity, however, which I merely shared with all the readers of the daily press, I knew little of my former friend and companion had seen little of Holmes lately. My marriage had drifted us away from each other. My own complete happiness, and the home-centred interests which rise up around the man who first finds himself master of his own establishment, were sufficient to absorb all my attention, while Holmes, who loathed every form of society with his whole Bohemian soul, remained in our lodgings in Baker Street, buried among his old books, and alternating from week to week between cocaine and ambition, the drowsiness of the drug, and the fierce energy of his own keen nature. He was still, as ever, deeply attracted by the study of crime, and occupied his immense faculties and extraordinary powers of observation in following out those clues, and clearing up those mysteries which had been abandoned as hopeless by the official police. From time to time I heard some vague account of his doings: of his summons to Odessa in the case of the Trepoff murder, of his clearing up of the singular tragedy of the Atkinson brothers at Trincomalee, and finally of the mission which he had accomplished so delicately and successfully for the reigning family of Holland. Beyond these signs of his activity, however, which I merely shared with all the readers of the daily press, I knew little of my former friend and companion had seen little of Holmes lately. My marriage had drifted us away from each other. My own complete happiness, and the home-centred interests which rise up around the man who first finds himself master of his own establishment, were sufficient to absorb all my attention, while Holmes, who loathed every form of society with his whole Bohemian soul, remained in our lodgings in Baker Street, buried among his old books, and alternating from week to week between cocaine and ambition, the drowsiness of the drug, and the fierce energy of his own keen nature. He was still, as ever, deeply attracted by the study of crime, and occupied his immense faculties and extraordinary powers of observation in following out those clues, and clearing up those mysteries which had been abandoned as hopeless by the official police. From time to time I heard some vague account of his doings: of his summons to Odessa in the case of the Trepoff murder, of his clearing up of the singular tragedy of the Atkinson brothers at Trincomalee, and finally of the mission which he had accomplished so delicately and successfully for the reigning family of Holland. Beyond these signs of his activity, however, which I merely shared with all the readers of the daily press, I knew little of my former friend and companion had seen little of Holmes lately. My marriage had drifted us away from each other. My own complete happiness, and the home-centred interests which rise up around the man who first finds himself master of his own establishment, were sufficient to absorb all my attention, while Holmes, who loathed every form of society with his whole Bohemian soul, remained in our lodgings in Baker Street, buried among his old books, and alternating from week to week between cocaine and ambition, the drowsiness of the drug, and the fierce energy of his own keen nature. He was still, as ever, deeply attracted by the study of crime, and occupied his immense faculties and extraordinary powers of observation in following out those clues, and clearing up those mysteries which had been abandoned as hopeless by the official police. From time to time I heard some vague account of his doings: of his summons to Odessa in the case of the Trepoff murder, of his clearing up of the singular tragedy of the Atkinson brothers at Trincomalee, and finally of the mission which he had accomplished so delicately and successfully for the reigning family of Holland. Beyond these signs of his activity, however, which I merely shared with all the readers of the daily press, I knew little of my former friend and companion'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};

var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$Ports$sendFakeInterOpResponseForLocationSwitch(_user$project$Messages$OnDoubleLocationSwitch),
			_1: {
				ctor: '::',
				_0: _user$project$Ports$fetchCachedDataResponse(_user$project$Messages$OnFetchCachedDataCompleted),
				_1: {
					ctor: '::',
					_0: _user$project$Ports$ndaRejected(_user$project$Messages$OnNDARejected),
					_1: {
						ctor: '::',
						_0: _user$project$Ports$ndaAccepted(_user$project$Messages$OnNDAAccepted),
						_1: {
							ctor: '::',
							_0: _user$project$Ports$regularNewNotifsFetch(_user$project$Messages$OnRegularNewNotifsFetch),
							_1: {
								ctor: '::',
								_0: _user$project$Ports$replyWithOrgSettingsPicUri(_user$project$Messages$OnGetUploadedOrgSettingsPicUri),
								_1: {
									ctor: '::',
									_0: _user$project$Ports$getOrgSettingsImageName(_user$project$Messages$OnOrganizationSettingsPicNameReceived),
									_1: {
										ctor: '::',
										_0: _user$project$Ports$sendFakeInterOpResponse3(_user$project$Messages$OnGetFakeInterOpResponse3),
										_1: {
											ctor: '::',
											_0: _user$project$Ports$replyWithSettingsPicUri(_user$project$Messages$OnGetUploadedSettingsPicUri),
											_1: {
												ctor: '::',
												_0: _user$project$Ports$sendFakeInterOpResponse2(_user$project$Messages$OnGetFakeInterOpResponse2),
												_1: {
													ctor: '::',
													_0: _user$project$Ports$getSettingsImageName(_user$project$Messages$OnInnovatorSettingsPicNameReceived),
													_1: {
														ctor: '::',
														_0: _user$project$Ports$replyToMarkAsRedWithSendersData(_user$project$Messages$OnMarkMessageAsRedReply),
														_1: {
															ctor: '::',
															_0: _user$project$Ports$replyWithUnredChatMessageWithPic(_user$project$Messages$OnExtendedUnredMessageIncome),
															_1: {
																ctor: '::',
																_0: _user$project$Ports$chatMessageSubmitError(_user$project$Messages$OnChatMessageError),
																_1: {
																	ctor: '::',
																	_0: _user$project$Ports$incomingChatMessage(_user$project$Messages$OnIncomingChatMessage),
																	_1: {
																		ctor: '::',
																		_0: _user$project$Ports$replyWithIdeaPictureUris(_user$project$Messages$OnGetIdeaPictureUris),
																		_1: {
																			ctor: '::',
																			_0: _user$project$Ports$sendFakeInterOpResponse(_user$project$Messages$OnGetFakeInterOpResponse),
																			_1: {
																				ctor: '::',
																				_0: _user$project$Ports$getIdeaPicName(_user$project$Messages$OnIdeaPicNameChoosen),
																				_1: {
																					ctor: '::',
																					_0: _user$project$Ports$replyWithIdeaVideoFileUri(_user$project$Messages$OnGetUploadedVideoFileUri),
																					_1: {
																						ctor: '::',
																						_0: _user$project$Ports$getIdeaVideoName(_user$project$Messages$OnIdeaVideoNameChoosen),
																						_1: {
																							ctor: '::',
																							_0: _user$project$Ports$getPostImageName(_user$project$Messages$OnPostImageNameChoosen),
																							_1: {
																								ctor: '::',
																								_0: _user$project$Ports$replyWithPostMediaFileUri(_user$project$Messages$OnGetUploadedMediaFileUri),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Main$homeView = function (model) {
	var loggedInData = model.loggedInData;
	var vis = model.mobileMenuView ? {ctor: '_Tuple2', _0: 'display', _1: 'none'} : {ctor: '_Tuple2', _0: 'display', _1: 'initial'};
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _user$project$HeaderView$headerView(model),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: vis,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: _user$project$IntroInfo$mobileMenuScreenView(model),
					_1: {
						ctor: '::',
						_0: _user$project$IntroInfo$infoView(model),
						_1: {
							ctor: '::',
							_0: _user$project$TarrifPlans$ideaGeneratorsPlan(model),
							_1: {
								ctor: '::',
								_0: _user$project$TarrifPlans$ideaGeneratorsPlanTab(model),
								_1: {
									ctor: '::',
									_0: _user$project$TarrifPlans$organizationsPlan(model),
									_1: {
										ctor: '::',
										_0: _user$project$TarrifPlans$organizationsPlanTab(model),
										_1: {
											ctor: '::',
											_0: _user$project$TarrifPlans$tarrifPlansMobile(model),
											_1: {
												ctor: '::',
												_0: _user$project$TopMembersList$innovatorsList(model),
												_1: {
													ctor: '::',
													_0: _user$project$TopMembersList$innovatorsListTab(model),
													_1: {
														ctor: '::',
														_0: _user$project$TopMembersList$innovatorsListMobile(model),
														_1: {
															ctor: '::',
															_0: _user$project$TopMembersList$organizationsList(model),
															_1: {
																ctor: '::',
																_0: _user$project$TopMembersList$organizationsListTab(model),
																_1: {
																	ctor: '::',
																	_0: _user$project$TopMembersList$organizationsListMobile(model),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$br,
																			{ctor: '[]'},
																			{ctor: '[]'}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$br,
																				{ctor: '[]'},
																				{ctor: '[]'}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$br,
																					{ctor: '[]'},
																					{ctor: '[]'}),
																				_1: {
																					ctor: '::',
																					_0: _user$project$AboutUsView$aboutUsView,
																					_1: {
																						ctor: '::',
																						_0: _user$project$AboutUsView$aboutUsViewTab,
																						_1: {
																							ctor: '::',
																							_0: _user$project$AboutUsView$aboutUsMobileView(model),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$br,
																									{ctor: '[]'},
																									{ctor: '[]'}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$br,
																										{ctor: '[]'},
																										{ctor: '[]'}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$br,
																											{ctor: '[]'},
																											{ctor: '[]'}),
																										_1: {
																											ctor: '::',
																											_0: _user$project$ContactUsView$contactUsView(model),
																											_1: {
																												ctor: '::',
																												_0: _user$project$ContactUsView$contactUsViewTab(model),
																												_1: {
																													ctor: '::',
																													_0: _user$project$ContactUsView$contactUsViewMobile(model),
																													_1: {
																														ctor: '::',
																														_0: A2(
																															_elm_lang$html$Html$br,
																															{ctor: '[]'},
																															{ctor: '[]'}),
																														_1: {
																															ctor: '::',
																															_0: A2(
																																_elm_lang$html$Html$br,
																																{ctor: '[]'},
																																{ctor: '[]'}),
																															_1: {
																																ctor: '::',
																																_0: A2(
																																	_elm_lang$html$Html$br,
																																	{ctor: '[]'},
																																	{ctor: '[]'}),
																																_1: {
																																	ctor: '::',
																																	_0: _user$project$FaqView$faqView,
																																	_1: {
																																		ctor: '::',
																																		_0: _user$project$FaqView$faqViewTab,
																																		_1: {
																																			ctor: '::',
																																			_0: _user$project$FaqView$faqViewMobile(model.mobileFaqView),
																																			_1: {
																																				ctor: '::',
																																				_0: A2(
																																					_elm_lang$html$Html$br,
																																					{ctor: '[]'},
																																					{ctor: '[]'}),
																																				_1: {
																																					ctor: '::',
																																					_0: A2(
																																						_elm_lang$html$Html$br,
																																						{ctor: '[]'},
																																						{ctor: '[]'}),
																																					_1: {
																																						ctor: '::',
																																						_0: A2(
																																							_elm_lang$html$Html$br,
																																							{ctor: '[]'},
																																							{ctor: '[]'}),
																																						_1: {
																																							ctor: '::',
																																							_0: A2(
																																								_elm_lang$html$Html$br,
																																								{ctor: '[]'},
																																								{ctor: '[]'}),
																																							_1: {
																																								ctor: '::',
																																								_0: A2(
																																									_elm_lang$html$Html$br,
																																									{ctor: '[]'},
																																									{ctor: '[]'}),
																																								_1: {
																																									ctor: '::',
																																									_0: _user$project$FooterView$footerView,
																																									_1: {
																																										ctor: '::',
																																										_0: _user$project$FooterView$footerViewTab,
																																										_1: {
																																											ctor: '::',
																																											_0: _user$project$ChatWindowView$chatWindowView(model),
																																											_1: {ctor: '[]'}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Main$page = function (model) {
	var currentRoute = model.route;
	var _p0 = currentRoute;
	switch (_p0.ctor) {
		case 'HomeRoute':
			return _user$project$Main$homeView(model);
		case 'DashboardRoute':
			return _user$project$DashboardView$dashboardView(model);
		case 'AdminRoute':
			return _user$project$AdminPanelView$adminView(model);
		default:
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('not found'),
					_1: {ctor: '[]'}
				});
	}
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('uk-height-large'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('uk-container'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'paddingTop', _1: '12px'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _user$project$Main$page(model),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$initialModel = function (route) {
	var initialCountry = _user$project$Utils$makeRealString(
		_elm_lang$core$List$head(_user$project$CountriesList$countries));
	return _user$project$Models$Model(route)(_user$project$Models$Closed)(false)(false)(false)(false)('')('')('')('')(false)('')('')('')('')('')(true)('')(
		{ctor: '[]'})('')('')('')(false)(false)(false)(false)(true)(false)(false)(false)(false)(false)(false)(false)(false)(false)(false)(
		A7(_user$project$Models$CompanyRegistration, '', '', '', initialCountry, false, false, ''))(
		A7(_user$project$Models$InnovatorRegistration, '', '', '', initialCountry, false, false, ''))(
		A4(_user$project$Models$DataRegistered, 0, '', '', ''))(
		{ctor: '[]'})(
		{ctor: '[]'})(
		A3(_user$project$Models$LoggingInMember, '', '', ''))(
		A5(_user$project$Models$LoggedInMember, 0, '', '', false, ''))(false)(_user$project$Models$MobileHomePage)(
		_user$project$Models$InnovatorExtended(0)('')('')(0)('')('')(0)(0)('')('')('')('')('')('')(0))(
		_user$project$Models$OrganizationExtended(0)('')('')('')('')(0)(0)('')('')('')('')('')('')('')(0)(0))(_user$project$Models$NotSelectedForInnovators)(_user$project$Models$NotSelectedForOrganizations)(
		A4(_user$project$Models$ContactUsData, '', '', '', ''))(
		A7(_user$project$Models$PostData, 0, 0, '', '', '', '', ''))(
		{ctor: '[]'})(
		_user$project$Models$NewIdeaData('')('')('')('')('')('')('')('')('')('')(0)('')(''))(
		A8(_user$project$Models$NewChatMessageData, 0, 0, false, false, '', '', '', ''))(false)(
		{ctor: '[]'})(
		{ctor: '[]'})(false)(
		{
			ctor: '::',
			_0: A4(_user$project$Models$SuggestedUser, 0, '', '', ''),
			_1: {
				ctor: '::',
				_0: A4(_user$project$Models$SuggestedUser, 0, '', '', ''),
				_1: {
					ctor: '::',
					_0: A4(_user$project$Models$SuggestedUser, 0, '', '', ''),
					_1: {ctor: '[]'}
				}
			}
		})(
		_user$project$Models$InnovatorSettingsFieldsEditable(false)(false)(false)(false)(false)(false)(false)(false)(false)(false))(
		_user$project$Models$InnovatorSettingsFields(0)('')('')('')(0)('')('')(0)(0)('')('')('')('')('')('')('')('')('')(''))('')(
		_user$project$Models$OrganizationSettingsFields(0)('')('')('')('')(0)(0)('')('')('')('')('')('')('')('')('')('')(''))(
		_user$project$Models$OrganizationSettingsFieldsEditable(false)(false)(false)(false)(false)(false)(false)(false)(false)(false)(false))(
		{ctor: '[]'})(false)(_user$project$Models$Eng)(
		{ctor: '[]'})(
		A7(_user$project$Models$PostCommentData, 0, false, '', '', '', 0, ''))(0)(
		A4(
			_user$project$Models$ProcessedSearchDataWrapper,
			{ctor: '[]'},
			{ctor: '[]'},
			{ctor: '[]'},
			{ctor: '[]'}))(
		A2(_user$project$Models$SearchProgress, '', _user$project$Models$Idle))(_user$project$Models$HomePage)(
		_user$project$Models$InnovatorExtended(0)('')('')(0)('')('')(0)(0)('')('')('')('')('')('')(0))(
		_user$project$Models$OrganizationExtended(0)('')('')('')('')(0)(0)('')('')('')('')('')('')('')(0)(0))(
		{ctor: '[]'})(false)(
		_user$project$Models$IdeaData(0)('')('')('')('')('')('')('')(0)('')(''))(
		_user$project$Models$FullIdeaData(0)('')('')('')('')('')('')('')(0)('')('')(''))(
		{ctor: '[]'})(
		{ctor: '[]'})(
		{ctor: '[]'});
};
var _user$project$Main$init = function (location) {
	var currentRoute = _user$project$Routes$parseLocation(location);
	return {
		ctor: '_Tuple2',
		_0: _user$project$Main$initialModel(currentRoute),
		_1: _user$project$Networking$topMembersFetchCmd
	};
};
var _user$project$Main$main = A2(
	_elm_lang$navigation$Navigation$program,
	_user$project$Messages$OnLocationChange,
	{init: _user$project$Main$init, update: _user$project$Updater$update, view: _user$project$Main$view, subscriptions: _user$project$Main$subscriptions})();

var Elm = {};
Elm['Main'] = Elm['Main'] || {};
if (typeof _user$project$Main$main !== 'undefined') {
    _user$project$Main$main(Elm['Main'], 'Main', undefined);
}

if (typeof define === "function" && define['amd'])
{
  define([], function() { return Elm; });
  return;
}

if (typeof module === "object")
{
  module['exports'] = Elm;
  return;
}

var globalElm = this['Elm'];
if (typeof globalElm === "undefined")
{
  this['Elm'] = Elm;
  return;
}

for (var publicModule in Elm)
{
  if (publicModule in globalElm)
  {
    throw new Error('There are two Elm modules called `' + publicModule + '` on this page! Rename one of them.');
  }
  globalElm[publicModule] = Elm[publicModule];
}

}).call(this);

